<div>
    <div style="position: relative">
        <table class="table sortable table-striped table-hover @ResponsiveType @ExtraCSS">
            <thead class="table-light">
            <tr>
                @foreach (var column in Columns)
                {
                    <th scope="col" class="@(column.IsSortable ? "sort" : "")"
                        @onclick="@(async () => {if (column.IsSortable) await OnSortChanged.InvokeAsync(column.SortName);})">
                        @column.Name

                        @if (column.IsSortable)
                        {
                            <span class="@GetSortClass.Invoke(column.SortName)"></span>
                        }
                    </th>
                }
            </tr>
            </thead>
            <tbody>
            @ChildContent
            </tbody>
        </table>
        <!-- Firefox gives a warning about this for no reason if placed within the table
        https://bugzilla.mozilla.org/show_bug.cgi?id=1081683 so instead this is placed over the entire table -->
        @if (ShowContentSpinner)
        {
            <div class="overlay">
                <div class="d-flex justify-content-center align-items-center" style="height: 100%;">
                    <div class="spinner-border text-light" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                </div>
            </div>
        }
    </div>

    @if (ShowNoContent)
    {
        <div>No items found</div>
    }

    @if (ShowLoading)
    {
        <div class="text-center">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }
</div>


@code {

    public delegate string CalculateSortClass(string column);

    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    [Parameter]
    public string ResponsiveType { get; set; } = "table-responsive-sm";

    [Parameter]
    public bool UseNonFixedColumns { get; set; }

    /// <summary>
    ///   When true shows a spinner overlay on the table body (and ShowPaginator is true)
    /// </summary>
    [Parameter]
    public bool ShowContentSpinner { get; set; }

    [Parameter]
    public bool ShowLoading { get; set; }

    [Parameter]
    public bool ShowNoContent { get; set; }

    [Parameter]
    [EditorRequired]
    public List<TableColumn> Columns { get; set; } = null!;

    [Parameter]
    public EventCallback<string> OnSortChanged { get; set; }

    [Parameter]
    [EditorRequired]
    public CalculateSortClass GetSortClass { get; set; } = null!;

    private string ExtraCSS => UseNonFixedColumns ? "non-fixed" : string.Empty;
}
