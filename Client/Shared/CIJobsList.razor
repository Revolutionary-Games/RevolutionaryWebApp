@inject HttpClient Http
@inject NavigationManager NavManager
@inject IJSRuntime JS
@inject ComponentUrlHelper URLHelper
@inject NotificationHandler NotificationHandler
@using RevolutionaryWebApp.Shared
@using RevolutionaryWebApp.Shared.Notifications
@using System.Threading
@using RevolutionaryWebApp.Client.Services
@using RevolutionaryWebApp.Client.Utilities
@using RevolutionaryWebApp.Shared.Models
@using RevolutionaryWebApp.Shared.Models.Enums
@implements RevolutionaryWebApp.Client.Services.INotificationHandler<CIProjectBuildJobsListUpdated>
@inherits PaginatedPage<ThriveDevCenter.Shared.Models.CIJobDTO>

@if (!string.IsNullOrEmpty(Error))
{
    <div class="alert alert-danger" role="alert">
        @Error
    </div>
}
else
{
    <PaginatedTable ShowPaginator="@(Data != null)" CurrentPage="@Data?.CurrentPage" PageCount="@Data?.PageCount"
                    OnPageChanged="async e => await ChangePage(e)"
                    OnSortChanged="async column => await ChangeSort(column)"
                    GetSortClass="@SortClass"
                    ShowContentSpinner="@VisibleFetchInProgress"
                    Columns="@columns"
                    ShowNoContent="@NoItemsFound">
        @if (Data != null)
        {
            @foreach (var item in Data.Results)
            {
                <tr @key="item.CiJobId">
                    <th scope="row"><NavLink href="@($"ci/{ProjectId}/build/{item.CiBuildId}/jobs/{item.CiJobId}")">
                        @item.JobName
                    </NavLink></th>
                    <td>@item.State</td>

                    @if (item.State == CIJobState.Finished)
                    {
                        <td class="@(!item.Succeeded ? "bg-danger" : "")">@item.Succeeded.ToString()</td>
                    }
                    else
                    {
                        <td>Running</td>
                    }

                    <td><DurationDisplayer Start="@item.CreatedAt" End="@item.FinishedAt" /></td>
                </tr>
            }
        }
    </PaginatedTable>
}

@code {
    private readonly List<TableColumn> columns = new()
    {
        new TableColumn("Name", true, "JobName"),
        new TableColumn("State", false),
        new TableColumn("Success", false),
        new TableColumn("Duration", false),
    };

    [Parameter]
    public long ProjectId { get; set; }

    [Parameter]
    public long BuildId { get; set; }

    public CIJobsList() : base(new SortHelper("JobName", SortDirection.Ascending))
    {
    }

    protected override async Task OnInitializedAsync()
    {
        await NotificationHandler.Register(this);
        await base.OnInitializedAsync();
    }

    public override Task SetParametersAsync(ParameterView parameters)
    {
        this.SetParametersFromQueryString(NavManager);

        return base.SetParametersAsync(parameters);
    }

    public Task Handle(CIProjectBuildJobsListUpdated notification, CancellationToken cancellationToken)
    {
        return HandleItemNotification(notification);
    }

    public void GetWantedListenedGroups(IUserGroupData currentUserGroups, ISet<string> groups)
    {
        groups.Add(NotificationGroups.CIProjectBuildJobsUpdatedPrefix + ProjectId + "_" + BuildId);
    }

    public override async ValueTask DisposeAsync()
    {
        await base.DisposeAsync();
        await NotificationHandler.Unregister(this);
    }

    protected override Task<PagedResult<CIJobDTO>?> StartQuery(Dictionary<string, string?> requestParams)
    {
        return Http.GetFromJsonAsync<PagedResult<CIJobDTO>>(
            QueryHelpers.AddQueryString($"api/v1/CIProject/{ProjectId}/builds/{BuildId}/jobs", requestParams),
            HttpClientHelpers.GetOptionsWithSerializers());
    }

    protected override async Task OnQuerySent(Dictionary<string, string?> requestParams)
    {
        await URLHelper.UpdateUrlHistoryIfChanged(requestParams);
    }
}
