@inject HttpClient Http
@inject NavigationManager NavManager
@inject IJSRuntime JS
@inject ComponentUrlHelper URLHelper
@inject NotificationHandler NotificationHandler
@using RevolutionaryWebApp.Shared
@using RevolutionaryWebApp.Shared.Notifications
@using System.Threading
@using RevolutionaryWebApp.Client.Services
@using RevolutionaryWebApp.Shared.Models
@implements RevolutionaryWebApp.Client.Services.INotificationHandler<CIProjectBuildsListUpdated>
@inherits PaginatedPage<RevolutionaryWebApp.Shared.Models.CIBuildDTO>

@if (!string.IsNullOrEmpty(Error))
{
    <div class="alert alert-danger" role="alert">
        @Error
    </div>
}
else
{
    <PaginatedTable ShowPaginator="@(Data != null)" CurrentPage="@Data?.CurrentPage" PageCount="@Data?.PageCount"
                    OnPageChanged="async e => await ChangePage(e)"
                    OnSortChanged="async column => await ChangeSort(column)"
                    GetSortClass="@SortClass"
                    ShowContentSpinner="@VisibleFetchInProgress"
                    Columns="@columns"
                    ShowNoContent="@NoItemsFound">
        @if (Data != null)
        {
            @foreach (var item in Data.Results)
            {
                <tr @key="item.CiBuildId">
                    <th scope="row"><NavLink href="@($"ci/{ProjectId}/build/{item.CiBuildId}")">
                        @item.CiBuildId
                    </NavLink></th>
                    <td>@item.CommitHash</td>
                    <td>
                        @if (ClickableRef)
                        {
                            <a href="@GenerateUrlForRef(item.RemoteRef)" target="_blank">@item.RemoteRef</a>
                        }
                        else
                        {
                            <span>@item.RemoteRef</span>
                        }
                    </td>
                    <td><RecentTimeShortener Time="@item.CreatedAt" /></td>
                    <td class="@(item.Status is BuildStatus.Failed or BuildStatus.GoingToFail ?
                                   "bg-danger" : "")">
                        @item.Status
                    </td>
                </tr>
            }
        }
    </PaginatedTable>
}

@code {
    private readonly List<TableColumn> columns = new()
    {
        new TableColumn("Id", true, "CiBuildId"),
        new TableColumn("Commit", false),
        new TableColumn("Ref", false),
        new TableColumn("Started At", false),
        new TableColumn("Status", false),
    };

    [Parameter]
    public long ProjectId { get; set; }

    [Parameter]
    public CIProjectType ProjectType { get; set; }

    // This is commented out as the compiler seems to incorrectly complain about this from CIProject.razor
    // [EditorRequired]
    [Parameter]
    public string ProjectFullname { get; set; } = null!;

    private bool ClickableRef => ProjectType == CIProjectType.Github;

    public CIBuildsList() : base(new SortHelper("CiBuildId", SortDirection.Descending))
    {
        DefaultPageSize = 75;
    }

    protected override async Task OnInitializedAsync()
    {
        await NotificationHandler.Register(this);
        await base.OnInitializedAsync();
    }

    public override Task SetParametersAsync(ParameterView parameters)
    {
        this.SetParametersFromQueryString(NavManager);

        return base.SetParametersAsync(parameters);
    }

    public Task Handle(CIProjectBuildsListUpdated notification, CancellationToken cancellationToken)
    {
        return HandleItemNotification(notification);
    }

    public void GetWantedListenedGroups(IUserGroupData currentUserGroups, ISet<string> groups)
    {
        groups.Add(NotificationGroups.CIProjectBuildsUpdatedPrefix + ProjectId);
    }

    public override async ValueTask DisposeAsync()
    {
        await base.DisposeAsync();
        await NotificationHandler.Unregister(this);
    }

    protected override Task<PagedResult<CIBuildDTO>?> StartQuery(Dictionary<string, string?> requestParams)
    {
        return Http.GetFromJsonAsync<PagedResult<CIBuildDTO>>(
            QueryHelpers.AddQueryString($"api/v1/CIProject/{ProjectId}/builds", requestParams));
    }

    protected override async Task OnQuerySent(Dictionary<string, string?> requestParams)
    {
        await URLHelper.UpdateUrlHistoryIfChanged(requestParams);
    }

    private string GenerateUrlForRef(string refText)
    {
        switch (ProjectType)
        {
            case CIProjectType.Github:
                if (refText.StartsWith("pull/"))
                {
                    var prIdentifier = refText.Replace("/head", "");
                    return $"https://github.com/{ProjectFullname}/{prIdentifier}";
                }
                else
                {
                    var onlyBranch = refText.Replace("refs/heads/", "");
                    return $"https://github.com/{ProjectFullname}/tree/{onlyBranch}";
                }
            default:
                throw new ArgumentOutOfRangeException();
        }
    }
}
