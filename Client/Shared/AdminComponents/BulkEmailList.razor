@inject HttpClient Http
@inject NavigationManager NavManager
@inject ComponentUrlHelper URLHelper
@inject NotificationHandler NotificationHandler
@using RevolutionaryWebApp.Shared
@using RevolutionaryWebApp.Shared.Notifications
@using System.Threading
@using SharedBase.Utilities
@using RevolutionaryWebApp.Client.Services
@using RevolutionaryWebApp.Shared.Converters
@using RevolutionaryWebApp.Shared.Models
@using RevolutionaryWebApp.Shared.Models.Enums
@implements RevolutionaryWebApp.Client.Services.INotificationHandler<SentBulkEmailListUpdated>
@inherits PaginatedPage<RevolutionaryWebApp.Shared.Models.SentBulkEmailDTO>

@if (!string.IsNullOrEmpty(Error))
{
    <div class="alert alert-danger" role="alert">
        @Error
    </div>
}
else
{
    <PaginatedTable ShowPaginator="@(Data != null)" CurrentPage="@Data?.CurrentPage" PageCount="@Data?.PageCount"
                    OnPageChanged="async e => await ChangePage(e)"
                    OnSortChanged="async column => await ChangeSort(column)"
                    GetSortClass="@SortClass"
                    ShowContentSpinner="@VisibleFetchInProgress"
                    Columns="@columns"
                    ShowNoContent="@NoItemsFound">
        @if (Data != null)
        {
            @foreach (var item in Data.Results)
            {
                <tr @key="item.Id">
                    <th scope="row">@item.Id</th>
                    <td>@item.Title.Truncate(45)</td>
                    <td>@item.CreatedAt.ToLocalTime().ToString("G")</td>
                    <td>@item.Recipients</td>
                    <td>@item.SentById</td>
                    <td>@item.SystemSend</td>
                </tr>
            }
        }
    </PaginatedTable>
}

@code {
    private readonly List<TableColumn> columns = new()
    {
        new TableColumn("Id", true),
        new TableColumn("Title", false),
        new TableColumn("Sent At", true, "CreatedAt"),
        new TableColumn("Recipients", false),
        new TableColumn("Sent By", true, "SentById"),
        new TableColumn("System Send", true, "SystemSend"),
    };

    public BulkEmailList() : base(new SortHelper("Id", SortDirection.Descending))
    {
    }

    protected override async Task OnInitializedAsync()
    {
        await NotificationHandler.Register(this);
        await base.OnInitializedAsync();
    }

    public override Task SetParametersAsync(ParameterView parameters)
    {
        this.SetParametersFromQueryString(NavManager);

        return base.SetParametersAsync(parameters);
    }

    public Task Handle(SentBulkEmailListUpdated notification, CancellationToken cancellationToken)
    {
        return HandleItemNotification(notification);
    }

    public void GetWantedListenedGroups(IUserGroupData currentUserGroups, ISet<string> groups)
    {
        groups.Add(NotificationGroups.SentBulkEmailListUpdated);
    }

    public override async ValueTask DisposeAsync()
    {
        await base.DisposeAsync();
        await NotificationHandler.Unregister(this);
    }

    protected override Task<PagedResult<SentBulkEmailDTO>?> StartQuery(Dictionary<string, string?> requestParams)
    {
        return Http.GetFromJsonAsync<PagedResult<SentBulkEmailDTO>>(
            QueryHelpers.AddQueryString("api/v1/BulkEmail", requestParams));
    }

    protected override async Task OnQuerySent(Dictionary<string, string?> requestParams)
    {
        await URLHelper.UpdateUrlHistoryIfChanged(requestParams);
    }

}
