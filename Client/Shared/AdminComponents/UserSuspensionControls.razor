@using RevolutionaryWebApp.Shared
@using RevolutionaryWebApp.Shared.Forms
@using RevolutionaryWebApp.Shared.Models
@using RevolutionaryWebApp.Shared.Models.Enums
@inject HttpClient Http

<StatusMessageShower Message="@actionResult" Type="@actionResultType"/>

@if (User.SuspendedUntil == null)
{
    @if (showSuspensionReasonEntry)
    {
        <p class="mt-3">
            Suspending a user means they cannot login at all and their account stops working until unsuspended.
            Suspension reason is visible to the user when trying to login and is required to be provided.
        </p>

        <form>
            <div class="row">
                <div class="mb-3 col-md-6">
                    <input class="form-control" type="text" placeholder="Suspension reason (required)"
                           disabled="@doingSuspension" @bind="@newSuspensionReason" @bind:event="oninput"/>
                </div>
            </div>

            <div class="row">
                <div class="mb-3 col-md-6">
                    <label for="suspensionDuration" class="form-label">Suspension Duration</label>
                    <select id="suspensionDuration" class="form-select" @bind="selectedDuration">
                        <option value="8h">8 Hours</option>
                        <option value="1d">1 Day</option>
                        <option value="3d">3 Days</option>
                        <option value="1w">1 Week</option>
                        <option value="2w">2 Weeks</option>
                        <option value="1m">1 Month</option>
                        <option value="1y">1 Year</option>
                        <option value="100y">100 Years</option>
                        <option value="custom">Custom...</option>
                    </select>
                </div>
            </div>

            @if (selectedDuration == "custom")
            {
                <div class="row">
                    <div class="mb-3 col-md-6">
                        <label for="customDate" class="form-label">Custom End Date</label>
                        <input id="customDate" type="datetime-local" class="form-control"
                               @bind="customSuspensionEndDate"/>
                    </div>
                </div>
            }

            <Button class="mb-1" ButtonStyle="danger" Enabled="@CanStartSuspend" Spinner="@doingSuspension"
                    type="submit" OnPressed="@StartSuspension">
                Suspend
            </Button>
            <Button class="mb-1 ms-1" ButtonStyle="secondary" OnPressed="@ToggleSuspension">Cancel</Button>
        </form>
    }
    else
    {
        <Button class="mb-1" ButtonStyle="danger" Enabled="@CanSuspend" OnPressed="@ToggleSuspension">
            Suspend
        </Button>
    }
}
else
{
    <Button class="mb-1" ButtonStyle="secondary" Enabled="@(!doingSuspension)" Spinner="@doingSuspension"
            OnPressed="@UnsuspendUser">
        Remove Suspension
    </Button>
}

@code {
    private bool showSuspensionReasonEntry;
    private string newSuspensionReason = string.Empty;
    private string selectedDuration = "1d";
    private DateTime customSuspensionEndDate;

    private bool doingSuspension;

    private string? actionResult;
    private SiteNoticeType actionResultType = SiteNoticeType.Danger;

    [Parameter]
    [EditorRequired]
    public UserDTO User { get; set; } = null!;

    // Can't suspend admins through this way
    private bool CanSuspend => !User.Groups.HasAccessLevel(GroupType.Admin);

    private bool CanStartSuspend => CanSuspend && !doingSuspension && !string.IsNullOrWhiteSpace(newSuspensionReason) &&
        (selectedDuration != "custom" || customSuspensionEndDate > DateTime.Now);

    private void ToggleSuspension()
    {
        showSuspensionReasonEntry = !showSuspensionReasonEntry;

        if (showSuspensionReasonEntry)
        {
            newSuspensionReason = string.Empty;
            selectedDuration = "1d";
            customSuspensionEndDate = DateTime.Now.AddDays(1);
        }
    }

    private DateTime CalculateSuspensionEndDate()
    {
        return selectedDuration switch
        {
            "8h" => DateTime.Now.AddHours(8),
            "1d" => DateTime.Now.AddDays(1),
            "3d" => DateTime.Now.AddDays(3),
            "1w" => DateTime.Now.AddDays(7),
            "2w" => DateTime.Now.AddDays(14),
            "1m" => DateTime.Now.AddMonths(1),
            "1y" => DateTime.Now.AddYears(1),
            "100y" => DateTime.Now.AddYears(100),
            "custom" => customSuspensionEndDate,
            _ => throw new ArgumentOutOfRangeException(nameof(selectedDuration), "Invalid selected duration"),
        };
    }

    private async Task StartSuspension()
    {
        var endTime = CalculateSuspensionEndDate().ToUniversalTime();

        doingSuspension = true;
        actionResult = null;
        actionResultType = SiteNoticeType.Danger;
        await InvokeAsync(StateHasChanged);

        HttpResponseMessage result;

        try
        {
            result = await Http.PostAsJsonAsync($"api/v1/UserManagement/{User.Id}/suspend", new UserSuspendRequest
            {
                Reason = newSuspensionReason,
                SuspendedUntil = endTime,
            });
        }
        catch (HttpRequestException e)
        {
            actionResult = $"Network request failed: {e.Message}";
            doingSuspension = false;
            await InvokeAsync(StateHasChanged);
            return;
        }

        doingSuspension = false;

        if (!result.IsSuccessStatusCode)
        {
            var content = await result.Content.ReadAsStringAsync();
            actionResult = $"Failed to suspend user. Server responded with: {content}, {result.StatusCode}";
        }
        else
        {
            actionResult = "User is now suspended";
            actionResultType = SiteNoticeType.Warning;
            showSuspensionReasonEntry = false;
            User.SuspendedManually = true;
            User.SuspendedUntil = endTime;
            User.SuspendedReason = newSuspensionReason;
        }

        await InvokeAsync(StateHasChanged);
    }

    private async Task UnsuspendUser()
    {
        doingSuspension = true;
        actionResult = null;
        actionResultType = SiteNoticeType.Danger;
        await InvokeAsync(StateHasChanged);

        HttpResponseMessage result;

        try
        {
            result = await Http.PostAsync($"api/v1/UserManagement/{User.Id}/unsuspend",
                new StringContent(string.Empty));
        }
        catch (HttpRequestException e)
        {
            actionResult = $"Network request failed: {e.Message}";
            doingSuspension = false;
            await InvokeAsync(StateHasChanged);
            return;
        }

        doingSuspension = false;

        if (!result.IsSuccessStatusCode)
        {
            var content = await result.Content.ReadAsStringAsync();
            actionResult = $"Failed to unsuspend user. Server responded with: {content}, {result.StatusCode}";
        }
        else
        {
            actionResult = "User is now unsuspended";
            actionResultType = SiteNoticeType.Success;
        }

        await InvokeAsync(StateHasChanged);
    }

}
