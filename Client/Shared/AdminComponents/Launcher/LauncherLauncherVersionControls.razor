@inject HttpClient Http
@inject NotificationHandler NotificationHandler
@using RevolutionaryWebApp.Shared
@using RevolutionaryWebApp.Shared.Notifications
@using System.Threading
@using RevolutionaryWebApp.Client.Models
@using RevolutionaryWebApp.Client.Services
@using RevolutionaryWebApp.Client.Utilities
@using RevolutionaryWebApp.Shared.Models
@using RevolutionaryWebApp.Shared.Models.Enums
@implements RevolutionaryWebApp.Client.Services.INotificationHandler<LauncherLauncherVersionListUpdated>
@inherits PaginatedPage<RevolutionaryWebApp.Shared.Models.LauncherLauncherVersionDTO>

@if (!string.IsNullOrEmpty(Error))
{
    <div class="alert alert-danger" role="alert">
        @Error
    </div>
}
else
{
    <StatusMessageShower Message="@message" Type="@messageType" />

    <PaginatedTable ShowPaginator="@(Data != null)" CurrentPage="@Data?.CurrentPage" PageCount="@Data?.PageCount"
                    OnPageChanged="async e => await ChangePage(e)"
                    OnSortChanged="async column => await ChangeSort(column)"
                    GetSortClass="@SortClass"
                    ShowContentSpinner="@VisibleFetchInProgress"
                    Columns="@columns"
                    ShowNoContent="@NoItemsFound"
                    UseNonFixedColumns="@true">
        @if (Data != null)
        {
            @foreach (var item in Data.Results)
            {
                if (clientSideResourceStatus.IsDeleted(item.Id))
                    continue;

                var status = clientSideResourceStatus.GetStatus(item.Id);

                <tr @key="item.Id">
                    <th scope="row" @onclick="() => ToggleDetails(item)" class="clickable">
                        @if (status.Expanded)
                        {
                            <span class="oi oi-chevron-top"></span>
                        }
                        else
                        {
                            <span class="oi oi-chevron-right"></span>
                        }
                        <span class="ml-1">@item.Id</span>
                    </th>
                    <td>@item.Version</td>
                    <td>
                        @if (item.Latest)
                        {
                            <span class="badge badge-success">Latest</span>
                        }
                    </td>
                    <td>@item.CreatedAt.ToLocalTime().ToString("G")</td>
                    <td>@item.UpdatedAt.ToLocalTime().ToString("G")</td>
                    <td>
                        <Button Enabled="@(!IsProcessing(item.Id) && !item.Latest)"
                                OnPressed="@(async () => await MakeVersionLatest(item))"
                                Spinner="@IsProcessing(item.Id)" ButtonStyle="primary" class="btn-sm mr-2">
                            Make Latest
                        </Button>
                        <Button Enabled="@(!IsProcessing(item.Id) && !item.Latest)"
                                OnPressed="@(async () => await VerifyDeleteItem(item))"
                                Spinner="@IsProcessing(item.Id)" ButtonStyle="danger" class="btn-sm">
                            Delete
                        </Button>
                    </td>
                </tr>

                @if (status.Expanded)
                {
                    <LauncherLauncherVersionEditor Id="@item.Id" ColumnSpan="@columns.Count" />
                }
            }
        }
    </PaginatedTable>
}

@if (!showNewForm)
{
    <StatusMessageShower Message="@createMessage" Type="@createMessageType" />
}

<Button class="mb-3 mr-1" ButtonStyle="success" OnPressed="@ToggleCreateNew" Enabled="@(!processingNewForm)">
    New
</Button>

@if (showNewForm)
{
    <LauncherLauncherVersionDataForm EditContext="@editContext" EditedData="@newData" Processing="@processingNewForm"
                  ControlIdSuffix="-new" StatusMessage="@createMessage"
                  StatusMessageType="@createMessageType" OnValidSubmit="@CreateNew" OverrideSaveText="Create">
        <Button ButtonStyle="secondary" OnPressed="@ToggleCreateNew">
            Cancel
        </Button>
    </LauncherLauncherVersionDataForm>
}

@code {
    private readonly List<TableColumn> columns = new()
    {
        new TableColumn("Id", true),
        new TableColumn("Version", true),
        new TableColumn("Latest", false),
        new TableColumn("Created At", true, "CreatedAt"),
        new TableColumn("Updated At", true, "UpdatedAt"),
        new TableColumn("Actions", false),
    };

    private readonly ClientSideResourceStatus<ExpandableResourceStatus> clientSideResourceStatus = new();

    private string? message;
    private SiteNoticeType messageType;

    private string? createMessage;
    private SiteNoticeType createMessageType;

    private bool showNewForm;
    private bool processingNewForm;

    private EditContext editContext = null!;

    private LauncherLauncherVersionDTO? newData;

    public LauncherLauncherVersionControls() : base(new SortHelper("Id", SortDirection.Descending))
    {
    }

    [CascadingParameter]
    public IModalService Modal { get; set; } = null!;

    protected override async Task OnInitializedAsync()
    {
        await NotificationHandler.Register(this);
        await base.OnInitializedAsync();
    }

    public Task Handle(LauncherLauncherVersionListUpdated notification, CancellationToken cancellationToken)
    {
        return HandleItemNotification(notification);
    }

    public void GetWantedListenedGroups(IUserGroupData currentUserGroups, ISet<string> groups)
    {
        groups.Add(NotificationGroups.LauncherLauncherVersionListUpdated);
    }

    public override async ValueTask DisposeAsync()
    {
        await base.DisposeAsync();
        await NotificationHandler.Unregister(this);
    }

    protected override Task<PagedResult<LauncherLauncherVersionDTO>?> StartQuery(Dictionary<string, string?> requestParams)
    {
        return Http.GetFromJsonAsync<PagedResult<LauncherLauncherVersionDTO>>(
            QueryHelpers.AddQueryString("api/v1/LauncherInfoConfiguration/launcherVersions", requestParams));
    }

    private bool IsProcessing(long versionId)
    {
        if (!clientSideResourceStatus.HasStatus(versionId))
            return false;

        return clientSideResourceStatus.GetStatus(versionId).Processing;
    }

    private void SetProcessingStatus(long versionId, bool processing)
    {
        clientSideResourceStatus.GetStatus(versionId).Processing = processing;
    }

    private void ToggleDetails(LauncherLauncherVersionDTO item)
    {
        var status = clientSideResourceStatus.GetStatus(item.Id);
        status.Expanded = !status.Expanded;
    }

    private void ToggleCreateNew()
    {
        if (showNewForm)
        {
            showNewForm = false;
        }
        else
        {
            showNewForm = true;
            createMessage = null;

            newData = new LauncherLauncherVersionDTO();

            editContext = new EditContext(newData);
        }

        StateHasChanged();
    }

    private async void CreateNew()
    {
        createMessageType = SiteNoticeType.Danger;
        processingNewForm = true;
        createMessage = null;
        await InvokeAsync(StateHasChanged);

        HttpResponseMessage result;

        try
        {
            result = await Http.PostAsJsonAsync("api/v1/LauncherInfoConfiguration/launcherVersions", newData!);
        }
        catch (HttpRequestException e)
        {
            createMessage = $"Network request failed: {e.Message}";
            processingNewForm = false;
            await InvokeAsync(StateHasChanged);
            return;
        }

        processingNewForm = false;
        var content = await result.Content.ReadAsStringAsync();

        if (!result.IsSuccessStatusCode)
        {
            createMessage = $"Error, server responded with: {content}, {result.StatusCode}";
        }
        else
        {
            createMessage = "New Launcher Version created";
            createMessageType = SiteNoticeType.Info;

            // Stop showing the form
            showNewForm = false;

            // Expand the item immediately for subresource editing
            if (long.TryParse(content, out var newId))
            {
                newData!.Id = newId;
                ToggleDetails(newData);
            }
        }

        await InvokeAsync(StateHasChanged);
    }

    private async Task VerifyDeleteItem(LauncherLauncherVersionDTO version)
    {
        var parameters = new ModalParameters
        {
            { nameof(ConfirmDelete.Name), $"Launcher version {version.Version}" },
        };

        var modal = Modal.Show<ConfirmDelete>("Delete Launcher Version?", parameters);

        var result = await modal.Result;

        if (result.Cancelled)
            return;

        await DeleteItem(version);
    }

    private async Task DeleteItem(LauncherLauncherVersionDTO version)
    {
        var itemId = version.Id;
        SetProcessingStatus(itemId, true);
        message = null;
        messageType = SiteNoticeType.Danger;
        await InvokeAsync(StateHasChanged);

        HttpResponseMessage result;

        try
        {
            result = await Http.DeleteAsync($"api/v1/LauncherInfoConfiguration/launcherVersions/{itemId}");
        }
        catch (HttpRequestException e)
        {
            message = $"Network request failed: {e.Message}";
            SetProcessingStatus(itemId, false);
            await InvokeAsync(StateHasChanged);
            return;
        }

        SetProcessingStatus(itemId, false);

        if (!result.IsSuccessStatusCode)
        {
            var content = await result.Content.ReadAsStringAsync();
            message = $"Error, server responded with: {content}, {result.StatusCode}";
        }
        else
        {
            message = $"Launcher version {version.Version} deleted";
            messageType = SiteNoticeType.Warning;
            clientSideResourceStatus.SetDeletedStatus(itemId);
        }

        await InvokeAsync(StateHasChanged);
    }

    private async Task MakeVersionLatest(LauncherLauncherVersionDTO version)
    {
        var itemId = version.Id;
        SetProcessingStatus(itemId, true);
        message = null;
        messageType = SiteNoticeType.Danger;
        await InvokeAsync(StateHasChanged);

        HttpResponseMessage result;

        try
        {
            result = await Http.PostAsync($"api/v1/LauncherInfoConfiguration/launcherVersions/{itemId}/latest",
                new StringContent(string.Empty));
        }
        catch (HttpRequestException e)
        {
            message = $"Network request failed: {e.Message}";
            SetProcessingStatus(itemId, false);
            await InvokeAsync(StateHasChanged);
            return;
        }

        SetProcessingStatus(itemId, false);

        if (!result.IsSuccessStatusCode)
        {
            var content = await result.Content.ReadAsStringAsync();
            message = $"Error, server responded with: {content}, {result.StatusCode}";
        }
        else
        {
            message = $"Launcher version {version.Version} is now the latest version";
            messageType = SiteNoticeType.Primary;
        }

        await InvokeAsync(StateHasChanged);
    }
}
