@inject HttpClient Http
@inject NotificationHandler NotificationHandler
@using RevolutionaryWebApp.Shared
@using RevolutionaryWebApp.Shared.Notifications
@using System.Threading
@using RevolutionaryWebApp.Client.Services
@using RevolutionaryWebApp.Client.Utilities
@using RevolutionaryWebApp.Shared.Models
@using System.Text
@using DevCenterCommunication.Models
@using SharedBase.Models
@using SharedBase.Utilities
@using RevolutionaryWebApp.Client.Models
@using RevolutionaryWebApp.Shared.Converters
@using RevolutionaryWebApp.Shared.Models.Enums
@implements RevolutionaryWebApp.Client.Services.INotificationHandler<LauncherThriveVersionPlatformListUpdated>
@inherits PaginatedPage<RevolutionaryWebApp.Shared.Models.LauncherThriveVersionPlatformDTO>

@if (!string.IsNullOrEmpty(Error))
{
    <div class="alert alert-danger" role="alert">
        @Error
    </div>
}
else
{
    <StatusMessageShower Message="@message" Type="@messageType" />

    <PaginatedTable ShowPaginator="@(Data != null)" CurrentPage="@Data?.CurrentPage" PageCount="@Data?.PageCount"
                    OnPageChanged="async e => await ChangePage(e)"
                    OnSortChanged="async column => await ChangeSort(column)"
                    GetSortClass="@SortClass"
                    ShowContentSpinner="@VisibleFetchInProgress"
                    Columns="@columns"
                    ShowNoContent="@NoItemsFound"
                    UseNonFixedColumns="@true">
        @if (Data != null)
        {
            @foreach (var item in Data.Results)
            {
                if (clientSideResourceStatus.IsDeleted(item.Id))
                    continue;

                var status = clientSideResourceStatus.GetStatus(item.Id);

                <tr @key="item.Platform">
                    <th scope="row" @onclick="() => ToggleDetails(item)" class="clickable">
                        @if (status.Expanded)
                        {
                            <span class="oi oi-chevron-top"></span>
                        }
                        else
                        {
                            <span class="oi oi-chevron-right"></span>
                        }
                        <span class="ms-1">@item.Platform</span>
                    </th>
                    <td>@item.FileSha3</td>
                    <td>@item.LocalFileName.Truncate(50)</td>
                    <td>
                        <Button Enabled="@(!IsProcessing(item.Id))"
                                OnPressed="@(async () => await VerifyDelete(item))"
                                Spinner="@IsProcessing(item.Id)" ButtonStyle="danger" class="btn-sm">
                            Delete
                        </Button>
                    </td>
                </tr>

                @if (status.Expanded)
                {
                    <LauncherThriveVersionPlatformEditor
                        Id="@item.VersionId" Platform="@item.Platform" ColumnSpan="@columns.Count" />
                }
            }
        }
    </PaginatedTable>
}

@if (!showNewForm)
{
    <StatusMessageShower Message="@createMessage" Type="@createMessageType" />
}

<Button class="mb-3 me-1" ButtonStyle="success" OnPressed="@ToggleCreateNew" Enabled="@(!processingNewForm)">
    New
</Button>

@if (!showNewForm)
{
}
else if (loadingVersionInfo)
{
    <div class="text-center">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
}
else
{
    <LauncherThriveVersionPlatformDataForm EditContext="@editContext" EditedData="@newData"
                                           Processing="@processingNewForm" ControlIdSuffix="-new"
                                           StatusMessage="@createMessage" StatusMessageType="@createMessageType"
                                           OnValidSubmit="@CreateNew" OverrideSaveText="Create"
                                           RelatedVersion="@relatedVersion">
        <Button ButtonStyle="secondary" OnPressed="@ToggleCreateNew">
            Cancel
        </Button>
    </LauncherThriveVersionPlatformDataForm>
}

@code {
private readonly List<TableColumn> columns = new()
    {
        new TableColumn("Platform", true),
        new TableColumn("File SHA3", false),
        new TableColumn("Folder Name", true, "LocalFileName"),
        new TableColumn("Actions", false),
    };

    private readonly ClientSideResourceStatus<ExpandableResourceStatus> clientSideResourceStatus = new();

    private string? message;
    private SiteNoticeType messageType;

    private string? createMessage;
    private SiteNoticeType createMessageType;

    private bool loadingVersionInfo;
    private LauncherThriveVersionDTO? relatedVersion;

    private bool showNewForm;
    private bool processingNewForm;

    private EditContext editContext = null!;

    private LauncherThriveVersionPlatformDTO? newData;

    public LauncherThriveVersionPlatforms() : base(new SortHelper("Platform", SortDirection.Ascending))
    {
    }

    [Parameter]
    [EditorRequired]
    public long VersionId { get; set; }

    [CascadingParameter]
    public IModalService Modal { get; set; } = null!;

    protected override async Task OnInitializedAsync()
    {
        await NotificationHandler.Register(this);
        await base.OnInitializedAsync();
    }

    public Task Handle(LauncherThriveVersionPlatformListUpdated notification, CancellationToken cancellationToken)
    {
        return HandleItemNotification(notification);
    }

    public void GetWantedListenedGroups(IUserGroupData currentUserGroups, ISet<string> groups)
    {
        groups.Add(NotificationGroups.LauncherThriveVersionPlatformListUpdatedPrefix + VersionId);
    }

    public override async ValueTask DisposeAsync()
    {
        await base.DisposeAsync();
        await NotificationHandler.Unregister(this);
    }

    protected override Task<PagedResult<LauncherThriveVersionPlatformDTO>?> StartQuery(Dictionary<string, string?> requestParams)
    {
        return Http.GetFromJsonAsync<PagedResult<LauncherThriveVersionPlatformDTO>>(
            QueryHelpers.AddQueryString($"api/v1/LauncherInfoConfiguration/thriveVersions/{VersionId}/platforms",
                requestParams));
    }

    private bool IsProcessing(long platformId)
    {
        if (!clientSideResourceStatus.HasStatus(platformId))
            return false;

        return clientSideResourceStatus.GetStatus(platformId).Processing;
    }

    private void SetProcessingStatus(long platformId, bool processing)
    {
        clientSideResourceStatus.GetStatus(platformId).Processing = processing;
    }

    private void ToggleDetails(LauncherThriveVersionPlatformDTO item)
    {
        var status = clientSideResourceStatus.GetStatus(item.Id);
        status.Expanded = !status.Expanded;
    }

    private async void ToggleCreateNew()
    {
        if (showNewForm)
        {
            showNewForm = false;
        }
        else
        {
            showNewForm = true;
            createMessage = null;

            newData = new LauncherThriveVersionPlatformDTO
            {
                VersionId = VersionId,
            };

            // Auto select the next free platform enum value here
            if (Data != null)
            {
                var nextPlatform = Enum.GetValues<PackagePlatform>().FirstOrDefault(
                    p => Data.Results.All(r => r.Platform != p));

                newData.Platform = nextPlatform;
            }

            editContext = new EditContext(newData);

            // Start loading the required info if we don't already have that info
            if (relatedVersion == null)
            {
                await LoadRelatedVersionInfo();
            }
        }
    }

    private async void CreateNew()
    {
        createMessageType = SiteNoticeType.Danger;
        processingNewForm = true;
        createMessage = null;
        await InvokeAsync(StateHasChanged);

        HttpResponseMessage result;

        try
        {
            result = await Http.PostAsJsonAsync(
                $"api/v1/LauncherInfoConfiguration/thriveVersions/{VersionId}/platforms", newData!);
        }
        catch (HttpRequestException e)
        {
            createMessage = $"Network request failed: {e.Message}";
            processingNewForm = false;
            await InvokeAsync(StateHasChanged);
            return;
        }

        processingNewForm = false;

        if (!result.IsSuccessStatusCode)
        {
            var content = await result.Content.ReadAsStringAsync();

            createMessage = $"Error, server responded with: {content}, {result.StatusCode}";
        }
        else
        {
            createMessage = $"Platform {newData!.Platform} created";
            createMessageType = SiteNoticeType.Info;

            // Stop showing the form
            showNewForm = false;

            // Expand the item immediately for subresource editing
            ToggleDetails(newData);

            // As ids will be reused, undelete the created object here
            clientSideResourceStatus.GetStatus(newData.Id).Deleted = false;
        }

        await InvokeAsync(StateHasChanged);
    }

    private async Task LoadRelatedVersionInfo()
    {
        loadingVersionInfo = true;
        await InvokeAsync(StateHasChanged);

        try
        {
            relatedVersion = await Http.GetFromJsonAsync<LauncherThriveVersionDTO>(
                $"api/v1/LauncherInfoConfiguration/thriveVersions/{VersionId}") ??
                throw new NullDecodedJsonException();
        }
        catch (HttpRequestException e)
        {
            messageType = SiteNoticeType.Danger;
            message = $"Network request failed: {e.Message}";
        }

        loadingVersionInfo = false;
        await InvokeAsync(StateHasChanged);
    }

    private async Task VerifyDelete(LauncherThriveVersionPlatformDTO platform)
    {
        var parameters = new ModalParameters
        {
            { nameof(ConfirmDelete.Name), $"Platform {platform.Platform} in version {platform.VersionId}" },
        };

        var modal = Modal.Show<ConfirmDelete>("Delete this platform?", parameters);

        var result = await modal.Result;

        if (result.Cancelled)
            return;

        await PerformDelete(platform);
    }

    private async Task PerformDelete(LauncherThriveVersionPlatformDTO platform)
    {
        messageType = SiteNoticeType.Danger;
        message = null;
        SetProcessingStatus(platform.Id, true);
        await InvokeAsync(StateHasChanged);

        HttpResponseMessage result;

        try
        {
            result = await Http.DeleteAsync(
                $"api/v1/LauncherInfoConfiguration/thriveVersions/{VersionId}/platforms/{(int)platform.Platform}");
        }
        catch (HttpRequestException e)
        {
            message = $"Network request failed: {e.Message}";
            SetProcessingStatus(platform.Id, false);
            await InvokeAsync(StateHasChanged);
            return;
        }

        SetProcessingStatus(platform.Id, false);

        if (!result.IsSuccessStatusCode)
        {
            var content = await result.Content.ReadAsStringAsync();

            message = $"Error, server responded with: {content}, {result.StatusCode}";
        }
        else
        {
            message = $"Platform {platform.Platform} deleted";
            messageType = SiteNoticeType.Warning;

            clientSideResourceStatus.GetStatus(platform.Id).Deleted = true;
        }

        await InvokeAsync(StateHasChanged);
    }
}
