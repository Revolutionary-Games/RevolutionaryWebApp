@inject HttpClient Http
@inject NotificationHandler NotificationHandler
@using RevolutionaryWebApp.Shared
@using RevolutionaryWebApp.Shared.Notifications
@using System.Threading
@using RevolutionaryWebApp.Client.Models
@using RevolutionaryWebApp.Client.Services
@using RevolutionaryWebApp.Client.Utilities
@using RevolutionaryWebApp.Shared.Models
@using RevolutionaryWebApp.Shared.Models.Enums
@implements RevolutionaryWebApp.Client.Services.INotificationHandler<LauncherThriveVersionListUpdated>
@inherits PaginatedPage<RevolutionaryWebApp.Shared.Models.LauncherThriveVersionDTO>

@if (!string.IsNullOrEmpty(Error))
{
    <div class="alert alert-danger" role="alert">
        @Error
    </div>
}
else
{
    <StatusMessageShower Message="@message" Type="@messageType" />

    <PaginatedTable ShowPaginator="@(Data != null)" CurrentPage="@Data?.CurrentPage" PageCount="@Data?.PageCount"
                    OnPageChanged="async e => await ChangePage(e)"
                    OnSortChanged="async column => await ChangeSort(column)"
                    GetSortClass="@SortClass"
                    ShowContentSpinner="@VisibleFetchInProgress"
                    Columns="@columns"
                    ShowNoContent="@NoItemsFound"
                    UseNonFixedColumns="@true">
        @if (Data != null)
        {
            @foreach (var item in Data.Results)
            {
                if (clientSideResourceStatus.IsDeleted(item.Id))
                    continue;

                var status = clientSideResourceStatus.GetStatus(item.Id);

                <tr @key="item.Id">
                    <th scope="row" @onclick="() => ToggleDetails(item)" class="clickable">
                        @if (status.Expanded)
                        {
                            <span class="oi oi-chevron-top"></span>
                        }
                        else
                        {
                            <span class="oi oi-chevron-right"></span>
                        }
                        <span class="ms-1">@item.Id</span>
                    </th>
                    <td>@item.ReleaseNumber</td>
                    <td>
                        @if (!item.Stable)
                        {
                            <span class="badge bg-secondary">Beta</span>
                        }
                    </td>
                    <td>
                        @if (!item.Enabled)
                        {
                            <span class="badge bg-warning">Disabled</span>
                        }
                    </td>
                    <td>
                        @if (item.Latest)
                        {
                            @if(item.Stable)
                            {
                                <span class="badge bg-success">Latest</span>
                            }
                            else
                            {
                                <span class="badge bg-secondary">Latest beta</span>
                            }
                        }
                    </td>
                    <td>@item.CreatedAt.ToLocalTime().ToString("G")</td>
                    <td>@item.UpdatedAt.ToLocalTime().ToString("G")</td>
                    <td>
                        <Button Enabled="@(!IsProcessing(item.Id) && !item.Latest && item.Enabled)"
                                OnPressed="@(async () => await MakeVersionLatest(item))"
                                Spinner="@IsProcessing(item.Id)" ButtonStyle="primary" class="btn-sm me-1">
                            Make Latest
                        </Button>

                        @if(item.Enabled)
                        {
                            <Button Enabled="@(!IsProcessing(item.Id) && !item.Latest)"
                                    OnPressed="@(async () => await DisableVersion(item))"
                                    Spinner="@IsProcessing(item.Id)" ButtonStyle="warning" class="btn-sm me-2">
                                Disable
                            </Button>
                        }
                        else
                        {
                            <Button Enabled="@(!IsProcessing(item.Id))"
                                    OnPressed="@(async () => await EnableVersion(item))"
                                    Spinner="@IsProcessing(item.Id)" ButtonStyle="primary" class="btn-sm me-2">
                                Enable
                            </Button>
                        }

                        <Button Enabled="@(!IsProcessing(item.Id) && !item.Latest && !item.Enabled)"
                                OnPressed="@(async () => await VerifyDeleteItem(item))"
                                Spinner="@IsProcessing(item.Id)" ButtonStyle="danger" class="btn-sm">
                            Delete
                        </Button>
                    </td>
                </tr>

                @if (status.Expanded)
                {
                    <LauncherThriveVersionEditor Id="@item.Id" ColumnSpan="@columns.Count" />
                }
            }
        }
    </PaginatedTable>
}

@if (!showNewForm)
{
    <StatusMessageShower Message="@createMessage" Type="@createMessageType" />
}

<Button class="mb-3 me-1" ButtonStyle="success" OnPressed="@ToggleCreateNew" Enabled="@(!processingNewForm)">
    New
</Button>

@if (showNewForm)
{
    <LauncherThriveVersionDataForm EditContext="@editContext" EditedData="@newData" Processing="@processingNewForm"
                  ControlIdSuffix="-new" StatusMessage="@createMessage"
                  StatusMessageType="@createMessageType" OnValidSubmit="@CreateNew" OverrideSaveText="Create">
        <Button ButtonStyle="secondary" OnPressed="@ToggleCreateNew">
            Cancel
        </Button>
    </LauncherThriveVersionDataForm>
}

@code {
    private readonly List<TableColumn> columns = new()
    {
        new TableColumn("Id", true),
        new TableColumn("Version", true, "ReleaseNumber"),
        new TableColumn("Beta", true, "Stable"),
        new TableColumn("Disabled", true, "Enabled"),
        new TableColumn("Latest", true),
        new TableColumn("Created At", true, "CreatedAt"),
        new TableColumn("Updated At", true, "UpdatedAt"),
        new TableColumn("Actions", false),
    };

    private readonly ClientSideResourceStatus<ExpandableResourceStatus> clientSideResourceStatus = new();

    private string? message;
    private SiteNoticeType messageType;

    private string? createMessage;
    private SiteNoticeType createMessageType;

    private bool showNewForm;
    private bool processingNewForm;

    private EditContext editContext = null!;

    private LauncherThriveVersionDTO? newData;

    public LauncherThriveVersionControls() : base(new SortHelper("Id", SortDirection.Descending))
    {
    }

    [CascadingParameter]
    public IModalService Modal { get; set; } = null!;

    protected override async Task OnInitializedAsync()
    {
        await NotificationHandler.Register(this);
        await base.OnInitializedAsync();
    }

    public Task Handle(LauncherThriveVersionListUpdated notification, CancellationToken cancellationToken)
    {
        return HandleItemNotification(notification);
    }

    public void GetWantedListenedGroups(IUserGroupData currentUserGroups, ISet<string> groups)
    {
        groups.Add(NotificationGroups.LauncherThriveVersionListUpdated);
    }

    public override async ValueTask DisposeAsync()
    {
        await base.DisposeAsync();
        await NotificationHandler.Unregister(this);
    }

    protected override Task<PagedResult<LauncherThriveVersionDTO>?> StartQuery(Dictionary<string, string?> requestParams)
    {
        return Http.GetFromJsonAsync<PagedResult<LauncherThriveVersionDTO>>(
            QueryHelpers.AddQueryString("api/v1/LauncherInfoConfiguration/thriveVersions", requestParams));
    }

    private bool IsProcessing(long versionId)
    {
        if (!clientSideResourceStatus.HasStatus(versionId))
            return false;

        return clientSideResourceStatus.GetStatus(versionId).Processing;
    }

    private void SetProcessingStatus(long versionId, bool processing)
    {
        clientSideResourceStatus.GetStatus(versionId).Processing = processing;
    }

    private void ToggleDetails(LauncherThriveVersionDTO item)
    {
        var status = clientSideResourceStatus.GetStatus(item.Id);
        status.Expanded = !status.Expanded;
    }

    private void ToggleCreateNew()
    {
        if (showNewForm)
        {
            showNewForm = false;
        }
        else
        {
            showNewForm = true;
            createMessage = null;

            newData = new LauncherThriveVersionDTO();

            editContext = new EditContext(newData);
        }

        StateHasChanged();
    }

    private async void CreateNew()
    {
        createMessageType = SiteNoticeType.Danger;
        processingNewForm = true;
        createMessage = null;
        await InvokeAsync(StateHasChanged);

        HttpResponseMessage result;

        try
        {
            result = await Http.PostAsJsonAsync("api/v1/LauncherInfoConfiguration/thriveVersions", newData!);
        }
        catch (HttpRequestException e)
        {
            createMessage = $"Network request failed: {e.Message}";
            processingNewForm = false;
            await InvokeAsync(StateHasChanged);
            return;
        }

        processingNewForm = false;
        var content = await result.Content.ReadAsStringAsync();

        if (!result.IsSuccessStatusCode)
        {
            createMessage = $"Error, server responded with: {content}, {result.StatusCode}";
        }
        else
        {
            createMessage = "New Thrive Version created";
            createMessageType = SiteNoticeType.Info;

            // Stop showing the form
            showNewForm = false;

            // Expand the item immediately for subresource editing
            if (long.TryParse(content, out var newId))
            {
                newData!.Id = newId;
                ToggleDetails(newData);
            }
        }

        await InvokeAsync(StateHasChanged);
    }

    private async Task VerifyDeleteItem(LauncherThriveVersionDTO version)
    {
        var parameters = new ModalParameters
        {
            { nameof(ConfirmDelete.Name), $"Thrive Version {version.ReleaseNumber}" },
        };

        var modal = Modal.Show<ConfirmDelete>("Delete Thrive Version?", parameters);

        var result = await modal.Result;

        if (result.Cancelled)
            return;

        await DeleteItem(version);
    }

    private async Task DeleteItem(LauncherThriveVersionDTO version)
    {
        var itemId = version.Id;
        SetProcessingStatus(itemId, true);
        message = null;
        messageType = SiteNoticeType.Danger;
        await InvokeAsync(StateHasChanged);

        HttpResponseMessage result;

        try
        {
            result = await Http.DeleteAsync($"api/v1/LauncherInfoConfiguration/thriveVersions/{itemId}");
        }
        catch (HttpRequestException e)
        {
            message = $"Network request failed: {e.Message}";
            SetProcessingStatus(itemId, false);
            await InvokeAsync(StateHasChanged);
            return;
        }

        SetProcessingStatus(itemId, false);

        if (!result.IsSuccessStatusCode)
        {
            var content = await result.Content.ReadAsStringAsync();
            message = $"Error, server responded with: {content}, {result.StatusCode}";
        }
        else
        {
            message = $"Thrive version {version.ReleaseNumber} deleted";
            messageType = SiteNoticeType.Warning;
            clientSideResourceStatus.SetDeletedStatus(itemId);
        }

        await InvokeAsync(StateHasChanged);
    }

    private async Task MakeVersionLatest(LauncherThriveVersionDTO version)
    {
        var itemId = version.Id;
        SetProcessingStatus(itemId, true);
        message = null;
        messageType = SiteNoticeType.Danger;
        await InvokeAsync(StateHasChanged);

        HttpResponseMessage result;

        try
        {
            result = await Http.PostAsync($"api/v1/LauncherInfoConfiguration/thriveVersions/{itemId}/latest",
                new StringContent(string.Empty));
        }
        catch (HttpRequestException e)
        {
            message = $"Network request failed: {e.Message}";
            SetProcessingStatus(itemId, false);
            await InvokeAsync(StateHasChanged);
            return;
        }

        SetProcessingStatus(itemId, false);

        if (!result.IsSuccessStatusCode)
        {
            var content = await result.Content.ReadAsStringAsync();
            message = $"Error, server responded with: {content}, {result.StatusCode}";
        }
        else
        {
            message = $"Thrive version {version.ReleaseNumber} is now the latest version";
            messageType = SiteNoticeType.Primary;
        }

        await InvokeAsync(StateHasChanged);
    }

    private Task EnableVersion(LauncherThriveVersionDTO version)
    {
        return SetVersionStatus(version, true);
    }

    private Task DisableVersion(LauncherThriveVersionDTO version)
    {
        return SetVersionStatus(version, false);
    }

    private async Task SetVersionStatus(LauncherThriveVersionDTO version, bool enabled)
    {
        var itemId = version.Id;
        SetProcessingStatus(itemId, true);
        message = null;
        messageType = SiteNoticeType.Danger;
        await InvokeAsync(StateHasChanged);

        HttpResponseMessage result;

        try
        {
            result = await Http.PostAsync(enabled ?
                $"api/v1/LauncherInfoConfiguration/thriveVersions/{itemId}/enable" :
                $"api/v1/LauncherInfoConfiguration/thriveVersions/{itemId}/disable",
                new StringContent(string.Empty));
        }
        catch (HttpRequestException e)
        {
            message = $"Network request failed: {e.Message}";
            SetProcessingStatus(itemId, false);
            await InvokeAsync(StateHasChanged);
            return;
        }

        SetProcessingStatus(itemId, false);

        if (!result.IsSuccessStatusCode)
        {
            var content = await result.Content.ReadAsStringAsync();
            message = $"Error, server responded with: {content}, {result.StatusCode}";
        }
        else if(enabled)
        {
            message = $"Thrive version {version.ReleaseNumber} is now enabled";
            messageType = SiteNoticeType.Primary;
        }
        else
        {
            message = $"Thrive version {version.ReleaseNumber} is now disabled";
            messageType = SiteNoticeType.Warning;
        }

        await InvokeAsync(StateHasChanged);
    }
}
