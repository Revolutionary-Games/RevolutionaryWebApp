@using RevolutionaryWebApp.Shared
@using RevolutionaryWebApp.Shared.Models
@using FeedParser.Shared.Models
@using SharedBase.Models
@using SharedBase.Utilities
@inherits EditFormBase<LauncherThriveVersionPlatformDTO>
<EditForm EditContext="@EditContext" OnValidSubmit="@OnValidSubmit" class="@(@class)">
    <DataAnnotationsValidator/>

    <div class="form-row">
        @if (!ForExistingResource)
        {
            <div class="form-group col-md-12">
                <label for="@($"newThrivePlatformPlatform-{ControlIdSuffix}")">
                    Platform This Works On
                </label>
                <InputSelect TValue="@PackagePlatform" class="form-control"
                             id="@($"newThrivePlatformPlatform-{ControlIdSuffix}")"
                             ValueChanged="@UpdateSelectedPlatform"
                             value="@EditedData.Platform"
                             ValueExpression="@(() => EditedData.Platform)">
                    @foreach (var name in Enum.GetNames<PackagePlatform>())
                    {
                        <option value="@name">@name</option>
                    }
                </InputSelect>
            </div>
        }
    </div>

    <div class="form-row">
        <div class="form-group col-md-12">
            <label for="@($"newThrivePlatformFileName-{ControlIdSuffix}")">
                Local Folder Name (launcher uses this to identify installed versions, so must be correct)
            </label>
            <CustomInputText class="form-control" id="@($"newThrivePlatformFileName-{ControlIdSuffix}")"
                             @bind-Value="EditedData.LocalFileName" placeholder="File name"/>
        </div>
    </div>

    <div class="form-row">
        <Button class="mb-3 ml-1" ButtonStyle="secondary" OnPressed="@UpdateNameAutomaticallyForPlatform">
            Auto Generate File Name
        </Button>
    </div>

    <div class="form-row">
        <div class="form-group col-md-12">
            <label for="@($"newThrivePlatformSha3-{ControlIdSuffix}")">SHA3 Hash of the Release on this Platform</label>
            <CustomInputText class="form-control" id="@($"newThrivePlatformSha3-{ControlIdSuffix}")"
                             @bind-Value="EditedData.FileSha3" placeholder="SHA3"/>
        </div>
    </div>


    <ValidationSummary/>

    <StatusMessageShower Message="@StatusMessage" Type="@StatusMessageType"/>
    <Button class="my-1 mr-1" Enabled="@(!Processing)" type="submit" Spinner="@Processing" ButtonStyle="primary">
        @SaveButtonText
    </Button>

    @ChildContent
</EditForm>

@code {

    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    /// <summary>
    ///   This is required here to properly automatically generate the full download file names
    /// </summary>
    [Parameter]
    [EditorRequired]
    public LauncherThriveVersionDTO RelatedVersion { get; set; } = null!;

    [Parameter]
    public bool ForExistingResource { get; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();

        if (!ForExistingResource)
            UpdateNameAutomaticallyForPlatform();
    }

    private void UpdateSelectedPlatform(PackagePlatform newPlatform)
    {
        EditedData.Platform = newPlatform;
        UpdateNameAutomaticallyForPlatform();
    }

    private void UpdateNameAutomaticallyForPlatform()
    {
        string baseFolderName;
        try
        {
            var split = RelatedVersion.ReleaseNumber.Split('-', 2);
            var parsedVersion = Version.Parse(split[0]);

            // We need to do this to always have the trailing zero
            var properVersion = new Version(parsedVersion.Major, parsedVersion.Minor, parsedVersion.Build,
                parsedVersion.Revision > 0 ? parsedVersion.Revision : 0);

            var stringVersion = properVersion.ToString();

            // Add back the suffix
            if (split.Length > 1)
                stringVersion += $"-{split[1]}";

            baseFolderName = ThriveProperties.GetFolderNameForPlatform(EditedData.Platform, stringVersion, false);
        }
        catch (Exception e)
        {
            Console.WriteLine($"Auto detect version failed due to: {e}");
            EditedData.LocalFileName = "CANNOT AUTO DETECT";
            return;
        }

        // Should hopefully do what github file uploads do to match launcher 1.0 32-bit versions
        var slightlySanitized = baseFolderName.Replace('(', '.').Replace(')', '.');

        // Github removes the last dot from the removed parenthesis in 32-bit releases
        if (slightlySanitized.EndsWith('.'))
            slightlySanitized = slightlySanitized.Substring(0, slightlySanitized.Length - 1);

        // This is the folder name the launcher uses so we don't add any kind of suffix
        EditedData.LocalFileName = slightlySanitized;
    }

}
