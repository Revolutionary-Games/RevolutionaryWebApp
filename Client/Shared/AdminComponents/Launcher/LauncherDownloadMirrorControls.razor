@inject HttpClient Http
@inject NotificationHandler NotificationHandler
@using RevolutionaryWebApp.Shared
@using RevolutionaryWebApp.Shared.Notifications
@using System.Threading
@using SharedBase.Utilities
@using RevolutionaryWebApp.Client.Models
@using RevolutionaryWebApp.Client.Services
@using RevolutionaryWebApp.Client.Utilities
@using RevolutionaryWebApp.Shared.Models
@using RevolutionaryWebApp.Shared.Models.Enums
@implements RevolutionaryWebApp.Client.Services.INotificationHandler<LauncherDownloadMirrorListUpdated>
@inherits PaginatedPage<RevolutionaryWebApp.Shared.Models.LauncherDownloadMirrorDTO>

@if (!string.IsNullOrEmpty(Error))
{
    <div class="alert alert-danger" role="alert">
        @Error
    </div>
}
else
{
    <StatusMessageShower Message="@message" Type="@messageType" />

    <PaginatedTable ShowPaginator="@(Data != null)" CurrentPage="@Data?.CurrentPage" PageCount="@Data?.PageCount"
                    OnPageChanged="async e => await ChangePage(e)"
                    OnSortChanged="async column => await ChangeSort(column)"
                    GetSortClass="@SortClass"
                    ShowContentSpinner="@VisibleFetchInProgress"
                    Columns="@columns"
                    ShowNoContent="@NoItemsFound"
                    UseNonFixedColumns="@true">
        @if (Data != null)
        {
            @foreach (var item in Data.Results)
            {
                if (clientSideResourceStatus.IsDeleted(item.Id))
                    continue;

                var status = clientSideResourceStatus.GetStatus(item.Id);

                <tr @key="item.Id">
                    <th scope="row" @onclick="() => ToggleDetails(item)" class="clickable">
                        @if (status.Expanded)
                        {
                            <span class="oi oi-chevron-top"></span>
                        }
                        else
                        {
                            <span class="oi oi-chevron-right"></span>
                        }
                        <span class="ms-1">@item.InternalName</span>
                    </th>
                    <td>@item.ReadableName.Truncate(50)</td>
                    <td>
                        <a href="@item.InfoLink" target="_blank">@item.InfoLink.Truncate()</a>
                    </td>
                    <td>
                        @if (item.BannerImageUrl != null)
                        {
                            <a href="@item.InfoLink" target="_blank">@item.BannerImageUrl.Truncate()</a>
                        }
                    </td>
                    <td>@item.ExtraDescription?.Truncate()</td>
                    <td>@item.CreatedAt.ToLocalTime().ToString("G")</td>
                    <td>@item.UpdatedAt.ToLocalTime().ToString("G")</td>
                    <td>
                        <Button Enabled="@(!IsProcessing(item.Id))"
                                OnPressed="@(async () => await VerifyDeleteItem(item))"
                                Spinner="@IsProcessing(item.Id)" ButtonStyle="danger" class="btn-sm">
                            Delete
                        </Button>
                    </td>
                </tr>

                @if (status.Expanded)
                {
                    <LauncherDownloadMirrorEditor Id="@item.Id" ColumnSpan="@columns.Count" />
                }
            }
        }
    </PaginatedTable>
}

@if (!showNewForm)
{
    <StatusMessageShower Message="@createMessage" Type="@createMessageType" />
}

<Button class="mb-3 me-1" ButtonStyle="success" OnPressed="@ToggleCreateNew" Enabled="@(!processingNewForm)">
    New
</Button>

@if (showNewForm)
{
    <LauncherDownloadMirrorDataForm EditContext="@editContext" EditedData="@newData" Processing="@processingNewForm"
                  ControlIdSuffix="-new" StatusMessage="@createMessage"
                  StatusMessageType="@createMessageType" OnValidSubmit="@CreateNew" OverrideSaveText="Create">
        <Button ButtonStyle="secondary" OnPressed="@ToggleCreateNew">
            Cancel
        </Button>
    </LauncherDownloadMirrorDataForm>
}

@code {
    private readonly List<TableColumn> columns = new()
    {
        new TableColumn("Name", true, "InternalName"),
        new TableColumn("Readable Name", false),
        new TableColumn("Info Url", true, "InfoLink"),
        new TableColumn("Banner Image Link", false),
        new TableColumn("Extra Description", false),
        new TableColumn("Created At", true, "CreatedAt"),
        new TableColumn("Updated At", true, "UpdatedAt"),
        new TableColumn("Actions", false),
    };

    private readonly ClientSideResourceStatus<ExpandableResourceStatus> clientSideResourceStatus = new();

    private string? message;
    private SiteNoticeType messageType;

    private string? createMessage;
    private SiteNoticeType createMessageType;

    private bool showNewForm;
    private bool processingNewForm;

    private EditContext editContext = null!;

    private LauncherDownloadMirrorDTO? newData;

    public LauncherDownloadMirrorControls() : base(new SortHelper("InternalName", SortDirection.Ascending))
    {
    }

    [CascadingParameter]
    public IModalService Modal { get; set; } = null!;

    protected override async Task OnInitializedAsync()
    {
        await NotificationHandler.Register(this);
        await base.OnInitializedAsync();
    }

    public Task Handle(LauncherDownloadMirrorListUpdated notification, CancellationToken cancellationToken)
    {
        return HandleItemNotification(notification);
    }

    public void GetWantedListenedGroups(IUserGroupData currentUserGroups, ISet<string> groups)
    {
        groups.Add(NotificationGroups.LauncherDownloadMirrorListUpdated);
    }

    public override async ValueTask DisposeAsync()
    {
        await base.DisposeAsync();
        await NotificationHandler.Unregister(this);
    }

    protected override Task<PagedResult<LauncherDownloadMirrorDTO>?> StartQuery(Dictionary<string, string?> requestParams)
    {
        return Http.GetFromJsonAsync<PagedResult<LauncherDownloadMirrorDTO>>(
            QueryHelpers.AddQueryString("api/v1/LauncherInfoConfiguration/mirrors", requestParams));
    }

    private bool IsProcessing(long mirrorId)
    {
        if (!clientSideResourceStatus.HasStatus(mirrorId))
            return false;

        return clientSideResourceStatus.GetStatus(mirrorId).Processing;
    }

    private void SetProcessingStatus(long mirrorId, bool processing)
    {
        clientSideResourceStatus.GetStatus(mirrorId).Processing = processing;
    }

    private void ToggleDetails(LauncherDownloadMirrorDTO item)
    {
        var status = clientSideResourceStatus.GetStatus(item.Id);
        status.Expanded = !status.Expanded;
    }

    private void ToggleCreateNew()
    {
        if (showNewForm)
        {
            showNewForm = false;
        }
        else
        {
            showNewForm = true;
            createMessage = null;

            newData = new LauncherDownloadMirrorDTO();

            editContext = new EditContext(newData);
        }

        StateHasChanged();
    }

    private async void CreateNew()
    {
        createMessageType = SiteNoticeType.Danger;
        processingNewForm = true;
        createMessage = null;
        await InvokeAsync(StateHasChanged);

        HttpResponseMessage result;

        try
        {
            result = await Http.PostAsJsonAsync("api/v1/LauncherInfoConfiguration/mirrors", newData!);
        }
        catch (HttpRequestException e)
        {
            createMessage = $"Network request failed: {e.Message}";
            processingNewForm = false;
            await InvokeAsync(StateHasChanged);
            return;
        }

        processingNewForm = false;

        if (!result.IsSuccessStatusCode)
        {
            var content = await result.Content.ReadAsStringAsync();

            createMessage = $"Error, server responded with: {content}, {result.StatusCode}";
        }
        else
        {
            createMessage = "New Download Mirror created";
            createMessageType = SiteNoticeType.Info;

            // Stop showing the form
            showNewForm = false;
        }

        await InvokeAsync(StateHasChanged);
    }

    private async Task VerifyDeleteItem(LauncherDownloadMirrorDTO mirror)
    {
        var parameters = new ModalParameters
        {
            { nameof(ConfirmDelete.Name), $"Download Mirror {mirror.InternalName}" },
        };

        var modal = Modal.Show<ConfirmDelete>("Delete Download Mirror?", parameters);

        var result = await modal.Result;

        if (result.Cancelled)
            return;

        await DeleteItem(mirror);
    }

    private async Task DeleteItem(LauncherDownloadMirrorDTO mirror)
    {
        var itemId = mirror.Id;
        SetProcessingStatus(itemId, true);
        message = null;
        messageType = SiteNoticeType.Danger;
        await InvokeAsync(StateHasChanged);

        HttpResponseMessage result;

        try
        {
            result = await Http.DeleteAsync($"api/v1/LauncherInfoConfiguration/mirrors/{itemId}");
        }
        catch (HttpRequestException e)
        {
            message = $"Network request failed: {e.Message}";
            SetProcessingStatus(itemId, false);
            await InvokeAsync(StateHasChanged);
            return;
        }

        SetProcessingStatus(itemId, false);

        if (!result.IsSuccessStatusCode)
        {
            var content = await result.Content.ReadAsStringAsync();
            message = $"Error, server responded with: {content}, {result.StatusCode}";
        }
        else
        {
            message = $"Download mirror {mirror.InternalName} deleted";
            messageType = SiteNoticeType.Warning;
            clientSideResourceStatus.SetDeletedStatus(itemId);
        }

        await InvokeAsync(StateHasChanged);
    }
}
