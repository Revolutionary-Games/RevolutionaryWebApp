@inject HttpClient Http
@inject NotificationHandler NotificationHandler
@using RevolutionaryWebApp.Shared
@using RevolutionaryWebApp.Shared.Notifications
@using System.Threading
@using RevolutionaryWebApp.Client.Services
@using RevolutionaryWebApp.Client.Utilities
@using RevolutionaryWebApp.Shared.Models
@using System.Text
@using SharedBase.Utilities
@using RevolutionaryWebApp.Client.Models
@using RevolutionaryWebApp.Shared.Converters
@using RevolutionaryWebApp.Shared.Models.Enums
@implements RevolutionaryWebApp.Client.Services.INotificationHandler<FeedDiscordWebhookListUpdated>
@inherits PaginatedPage<ThriveDevCenter.Shared.Models.FeedDiscordWebhookDTO>

<h3>Discord Webhooks</h3>

<p>
    Fire Webhooks to Discord whenever new content is found.
</p>

@if (!string.IsNullOrEmpty(Error))
{
    <div class="alert alert-danger" role="alert">
        @Error
    </div>
}
else
{
    <StatusMessageShower Message="@message" Type="@messageType" />

    <PaginatedTable ShowPaginator="@(Data != null)" CurrentPage="@Data?.CurrentPage" PageCount="@Data?.PageCount"
                    OnPageChanged="async e => await ChangePage(e)"
                    OnSortChanged="async column => await ChangeSort(column)"
                    GetSortClass="@SortClass"
                    ShowContentSpinner="@VisibleFetchInProgress"
                    Columns="@columns"
                    ShowNoContent="@NoItemsFound"
                    UseNonFixedColumns="@true">
        @if (Data != null)
        {
            @foreach (var item in Data.Results)
            {
                if (clientSideResourceStatus.IsDeleted(item.Id))
                    continue;

                <tr @key="item.Id">
                    <td>@item.FeedId</td>
                    <td>@item.WebhookUrl</td>
                    <td>
                        @if (item.CustomItemFormat != null)
                        {
                            <span>@item.CustomItemFormat.Truncate()</span>
                        }
                    </td>
                    <td>
                        <Button Enabled="@(!IsProcessing(item.Id))"
                                OnPressed="@(async () => await VerifyDelete(item))"
                                Spinner="@IsProcessing(item.Id)" ButtonStyle="danger" class="btn-sm">
                            Delete
                        </Button>
                    </td>
                </tr>
            }
        }
    </PaginatedTable>
}

@if (!showNewForm)
{
    <StatusMessageShower Message="@createMessage" Type="@createMessageType" />
}

<Button class="mb-3 mr-1" ButtonStyle="success" OnPressed="@ToggleCreateNew" Enabled="@(!processingNewForm)">
    New
</Button>

@if (showNewForm)
{
    <EditForm EditContext="@editContext" OnValidSubmit="@CreateNew">
        <DataAnnotationsValidator />

        <div class="form-row">
            <div class="form-group col-md-12">
                <label for="@($"newDiscordItemUrl-{FeedId}")">Discord Webhook URL</label>
                <CustomInputText class="form-control" id="@($"newDiscordItemUrl-{FeedId}")"
                                 @bind-Value="newData!.WebhookUrl" placeholder="URL to post the webhook to" />
            </div>
        </div>

        <div class="form-row">
            <div class="form-group col-md-12">
                <label for="@($"newDiscordItemFormat-{FeedId}")">Custom message template (optional)</label>
                <CustomInputText class="form-control" id="@($"newDiscordItemFormat-{FeedId}")"
                                 @bind-Value="newData!.CustomItemFormat"
                                 placeholder="Custom message template (leave blank for default)" />
            </div>
        </div>

        <ValidationSummary />

        <StatusMessageShower Message="@createMessage" Type="@createMessageType" />
        <Button class="my-1 mr-1" Enabled="@(!processingNewForm)" type="submit"
                Spinner="@processingNewForm" ButtonStyle="primary">
            Create
        </Button>
        <Button ButtonStyle="secondary" OnPressed="@ToggleCreateNew">
           Cancel
        </Button>
    </EditForm>
}

@code {
private readonly List<TableColumn> columns = new()
    {
        new TableColumn("Feed Id", false),
        new TableColumn("Webhook Url", true, "WebhookUrl"),
        new TableColumn("Custom Item Format", false),
        new TableColumn("Actions", false),
    };

    private readonly ClientSideResourceStatus<DeletedResourceStatus> clientSideResourceStatus = new();

    private string? message;
    private SiteNoticeType messageType;

    private string? createMessage;
    private SiteNoticeType createMessageType;

    private bool showNewForm;
    private bool processingNewForm;

    private EditContext editContext = null!;

    private FeedDiscordWebhookDTO? newData;

    public FeedDiscordWebhooks() : base(new SortHelper("WebhookUrl", SortDirection.Descending))
    {
    }

    [Parameter]
    [EditorRequired]
    public long FeedId { get; set; }

    [CascadingParameter]
    public IModalService Modal { get; set; } = null!;

    protected override async Task OnInitializedAsync()
    {
        await NotificationHandler.Register(this);
        await base.OnInitializedAsync();
    }

    public Task Handle(FeedDiscordWebhookListUpdated notification, CancellationToken cancellationToken)
    {
        return HandleItemNotification(notification);
    }

    public void GetWantedListenedGroups(IUserGroupData currentUserGroups, ISet<string> groups)
    {
        groups.Add(NotificationGroups.FeedDiscordWebhookListUpdatedPrefix + FeedId);
    }

    public override async ValueTask DisposeAsync()
    {
        await base.DisposeAsync();
        await NotificationHandler.Unregister(this);
    }

    protected override Task<PagedResult<FeedDiscordWebhookDTO>?> StartQuery(Dictionary<string, string?> requestParams)
    {
        return Http.GetFromJsonAsync<PagedResult<FeedDiscordWebhookDTO>>(
            QueryHelpers.AddQueryString($"api/v1/FeedConfiguration/{FeedId}/discordWebhook", requestParams));
    }

    private bool IsProcessing(long feedId)
    {
        if (!clientSideResourceStatus.HasStatus(feedId))
            return false;

        return clientSideResourceStatus.GetStatus(feedId).Processing;
    }

    private void SetProcessingStatus(long feedId, bool processing)
    {
        clientSideResourceStatus.GetStatus(feedId).Processing = processing;
    }

    private void ToggleCreateNew()
    {
        if (showNewForm)
        {
            showNewForm = false;
        }
        else
        {
            showNewForm = true;
            createMessage = null;

            newData = new FeedDiscordWebhookDTO
            {
                FeedId = FeedId,
            };

            editContext = new EditContext(newData);
        }

        StateHasChanged();
    }

    private async void CreateNew()
    {
        createMessageType = SiteNoticeType.Danger;
        processingNewForm = true;
        createMessage = null;
        await InvokeAsync(StateHasChanged);

        HttpResponseMessage result;

        try
        {
            result = await Http.PostAsJsonAsync($"api/v1/FeedConfiguration/{FeedId}/discordWebhook", newData!);
        }
        catch (HttpRequestException e)
        {
            createMessage = $"Network request failed: {e.Message}";
            processingNewForm = false;
            await InvokeAsync(StateHasChanged);
            return;
        }

        processingNewForm = false;

        if (!result.IsSuccessStatusCode)
        {
            var content = await result.Content.ReadAsStringAsync();

            createMessage = $"Error, server responded with: {content}, {result.StatusCode}";
        }
        else
        {
            createMessage = "New Discord webhook created";
            createMessageType = SiteNoticeType.Info;

            // Stop showing the form
            showNewForm = false;
        }

        await InvokeAsync(StateHasChanged);
    }

    private async Task VerifyDelete(FeedDiscordWebhookDTO webhook)
    {
        var parameters = new ModalParameters();
        parameters.Add(nameof(ConfirmDelete.Name), $"Webhook to {webhook.WebhookUrl}");

        var modal = Modal.Show<ConfirmDelete>("Delete this webhook?", parameters);

        var result = await modal.Result;

        if (result.Cancelled)
            return;

        await PerformDelete(webhook.Id, webhook.WebhookUrl);
    }

    private async Task PerformDelete(long localId, string webhookUrl)
    {
        messageType = SiteNoticeType.Danger;
        message = null;
        SetProcessingStatus(localId, true);
        await InvokeAsync(StateHasChanged);

        // Because the url will contain non-valid characters, we need to encode it
        var encodedUrl = Convert.ToBase64String(Encoding.UTF8.GetBytes(webhookUrl));

        HttpResponseMessage result;

        try
        {
            result = await Http.DeleteAsync($"api/v1/FeedConfiguration/{FeedId}/discordWebhook/{encodedUrl}");
        }
        catch (HttpRequestException e)
        {
            message = $"Network request failed: {e.Message}";
            SetProcessingStatus(localId, false);
            await InvokeAsync(StateHasChanged);
            return;
        }

        SetProcessingStatus(localId, false);

        if (!result.IsSuccessStatusCode)
        {
            var content = await result.Content.ReadAsStringAsync();

            message = $"Error, server responded with: {content}, {result.StatusCode}";
        }
        else
        {
            message = $"Discord webhook ({webhookUrl}) deleted";
            messageType = SiteNoticeType.Warning;

            clientSideResourceStatus.GetStatus(localId).Deleted = true;
        }

        await InvokeAsync(StateHasChanged);
    }
}
