@inject HttpClient Http
@inject NotificationHandler NotificationHandler
@using RevolutionaryWebApp.Shared
@using RevolutionaryWebApp.Shared.Notifications
@using System.Threading
@using SharedBase.Utilities
@using RevolutionaryWebApp.Client.Models
@using RevolutionaryWebApp.Client.Services
@using RevolutionaryWebApp.Client.Utilities
@using RevolutionaryWebApp.Shared.Models
@implements RevolutionaryWebApp.Client.Services.INotificationHandler<CombinedFeedListUpdated>
@inherits PaginatedPage<RevolutionaryWebApp.Shared.Models.CombinedFeedInfo>

<h3>Combined Feeds</h3>

<p>
    Combined feeds combine multiple normal feeds into a single HTML resource that can be read.
    These are an utility to combine multiple feeds for feed consumers that can only read a single feed.
</p>

@if (!string.IsNullOrEmpty(Error))
{
    <div class="alert alert-danger" role="alert">
        @Error
    </div>
}
else
{
    @* TODO: add an option not have the table-hover class as that makes it a bit weird to use the embedded forms *@
    <PaginatedTable ShowPaginator="@(Data != null)" CurrentPage="@Data?.CurrentPage" PageCount="@Data?.PageCount"
                    OnPageChanged="async e => await ChangePage(e)"
                    OnSortChanged="async column => await ChangeSort(column)"
                    GetSortClass="@SortClass"
                    ShowContentSpinner="@VisibleFetchInProgress"
                    Columns="@columns"
                    ShowNoContent="@NoItemsFound">
        @if (Data != null)
        {
            @foreach (var item in Data.Results)
            {
                if (clientSideResourceStatus.IsDeleted(item.Id))
                    continue;

                var status = clientSideResourceStatus.GetStatus(item.Id);

                <tr @key="item.Id">
                    <th scope="row" @onclick="() => ToggleDetails(item)" class="clickable">
                        <ItemExpander Expanded="@status.Expanded" />
                        <span class="ms-1">@item.Id</span>
                    </th>
                    <td><a href="@($"/api/v1/feed/{item.Name}")" target="_blank">@item.Name</a></td>
                    <td>
                        @if (item.ContentUpdatedAt != null)
                        {
                            <RecentTimeShortener Time="@item.ContentUpdatedAt.Value" IncludeSeconds="@true" />
                        }
                    </td>
                    <td>
                        Combined from @("feed".PrintCount(item.CombinedFromFeedsCount))
                        @if (item.DeletedCombinedFromFeedsCount > 0)
                        {
                            <span>
                                This combines a one or more deleted feeds (@item.DeletedCombinedFromFeedsCount)!
                                That data will not be updated, this should be fixed!
                            </span>
                        }
                    </td>
                    <td>@item.CacheTime</td>
                    <td>@item.MaxItems</td>
                    <td>@item.CreatedAt.ToLocalTime().ToString("G")</td>
                    <td>@item.UpdatedAt.ToLocalTime().ToString("G")</td>
                </tr>

                @if (status.Expanded)
                {
                    <CombinedFeedEditor Id="@item.Id" ColumnSpan="@columns.Count" />
                }
            }
        }
    </PaginatedTable>
}

@if (!showNewForm)
{
    <StatusMessageShower Message="@createMessage" Type="@createMessageType" />
}

<Button class="mb-3 me-1" ButtonStyle="success" OnPressed="@ToggleCreateNew" Enabled="@(!processingNewForm)">
    New
</Button>

@if (showNewForm)
{
    <CombinedFeedDataForm EditContext="@editContext" EditedData="@newData" Processing="@processingNewForm"
                  ControlIdSuffix="-new" StatusMessage="@createMessage"
                  StatusMessageType="@createMessageType" OnValidSubmit="@CreateNew" OverrideSaveText="Create">
        <Button ButtonStyle="secondary" OnPressed="@ToggleCreateNew">
            Cancel
        </Button>
    </CombinedFeedDataForm>
}

@code {
private readonly List<TableColumn> columns = new()
    {
        new TableColumn("Id", true),
        new TableColumn("Name", true),
        new TableColumn("Content Updated", false),
        new TableColumn("Combined From", false),
        new TableColumn("Client Cache Time", false),
        new TableColumn("Max Items", false),
        new TableColumn("Created At", true, "CreatedAt"),
        new TableColumn("Updated At", true, "UpdatedAt"),
    };

    private readonly ClientSideResourceStatus<ExpandableResourceStatus> clientSideResourceStatus = new();

    private string? createMessage;
    private SiteNoticeType createMessageType;

    private bool showNewForm;
    private bool processingNewForm;

    private EditContext editContext = null!;

    private CombinedFeedDTO? newData;

    public CombinedFeeds() : base(new SortHelper("Id", SortDirection.Ascending))
    {
    }

    protected override async Task OnInitializedAsync()
    {
        await NotificationHandler.Register(this);
        await base.OnInitializedAsync();
    }

    public Task Handle(CombinedFeedListUpdated notification, CancellationToken cancellationToken)
    {
        return HandleItemNotification(notification);
    }

    public void GetWantedListenedGroups(IUserGroupData currentUserGroups, ISet<string> groups)
    {
        groups.Add(NotificationGroups.CombinedFeedListUpdated);
    }

    public override async ValueTask DisposeAsync()
    {
        await base.DisposeAsync();
        await NotificationHandler.Unregister(this);
    }

    protected override Task<PagedResult<CombinedFeedInfo>?> StartQuery(Dictionary<string, string?> requestParams)
    {
        return Http.GetFromJsonAsync<PagedResult<CombinedFeedInfo>>(
            QueryHelpers.AddQueryString("api/v1/CombinedFeed", requestParams));
    }

    private bool IsProcessing(long feedId)
    {
        if (!clientSideResourceStatus.HasStatus(feedId))
            return false;

        return clientSideResourceStatus.GetStatus(feedId).Processing;
    }

    private void SetProcessingStatus(long feedId, bool processing)
    {
        clientSideResourceStatus.GetStatus(feedId).Processing = processing;
    }

    private void ToggleDetails(CombinedFeedInfo item)
    {
        var status = clientSideResourceStatus.GetStatus(item.Id);
        status.Expanded = !status.Expanded;
    }

    private void ToggleCreateNew()
    {
        if (showNewForm)
        {
            showNewForm = false;
        }
        else
        {
            showNewForm = true;
            createMessage = null;

            newData = new CombinedFeedDTO
            {
                MaxItems = 30,
                CacheTime = TimeSpan.FromMinutes(5),
            };

            editContext = new EditContext(newData);
        }

        StateHasChanged();
    }

    private async void CreateNew()
    {
        createMessageType = SiteNoticeType.Danger;
        processingNewForm = true;
        createMessage = null;
        await InvokeAsync(StateHasChanged);

        HttpResponseMessage result;

        try
        {
            result = await Http.PostAsJsonAsync("api/v1/CombinedFeed", newData!);
        }
        catch (HttpRequestException e)
        {
            createMessage = $"Network request failed: {e.Message}";
            processingNewForm = false;
            await InvokeAsync(StateHasChanged);
            return;
        }

        processingNewForm = false;

        if (!result.IsSuccessStatusCode)
        {
            var content = await result.Content.ReadAsStringAsync();

            createMessage = $"Error, server responded with: {content}, {result.StatusCode}";
        }
        else
        {
            createMessage = "New CombinedFeed created";
            createMessageType = SiteNoticeType.Info;

            // Stop showing the form
            showNewForm = false;
        }

        await InvokeAsync(StateHasChanged);
    }
}
