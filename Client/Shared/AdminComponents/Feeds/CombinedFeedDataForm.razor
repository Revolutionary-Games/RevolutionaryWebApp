@inject HttpClient Http
@using RevolutionaryWebApp.Shared
@using RevolutionaryWebApp.Shared.Models
@inherits EditFormBase<CombinedFeedDTO>
<EditForm EditContext="@EditContext" OnValidSubmit="@OnValidSubmit" class="@(@class)">
    <DataAnnotationsValidator />

    <div class="form-row">
        <div class="form-group col-md-12">
            <label for="@($"combinedFeedFormName-{ControlIdSuffix}")">Name</label>
            <CustomInputText class="form-control" id="@($"combinedFeedFormName-{ControlIdSuffix}")"
                             @bind-Value="EditedData.Name"
                             placeholder="Feed name (filename when clients request from us)" />
        </div>
    </div>

    <div class="form-row">
        <div class="form-group col-md-12">
            <label for="@($"combinedFeedFormCacheTime-{ControlIdSuffix}")">
                Cache Time (passed to Clients reading this from us)
            </label>
            <InputSelect class="form-control" id="@($"combinedFeedFormCacheTime-{ControlIdSuffix}")"
                         @bind-Value="EditedData.CacheTime">
                <option value="@TimeSpan.FromMinutes(1)">1 minute</option>
                <option value="@TimeSpan.FromMinutes(2)">2 minutes</option>
                <option value="@TimeSpan.FromMinutes(3)">3 minutes</option>
                <option value="@TimeSpan.FromMinutes(5)">5 minutes</option>
                <option value="@TimeSpan.FromMinutes(10)">10 minutes</option>
                <option value="@TimeSpan.FromMinutes(15)">15 minutes</option>
                <option value="@TimeSpan.FromMinutes(20)">20 minutes</option>
                <option value="@TimeSpan.FromMinutes(30)">30 minutes</option>
                <option value="@TimeSpan.FromMinutes(60)">60 minutes</option>
            </InputSelect>
        </div>
    </div>

    <div class="form-row">
        <div class="form-group col-md-12">
            <label for="@($"combinedFeedFormMaxItems-{ControlIdSuffix}")">Max Items To Pick From Feeds</label>
            <InputNumber class="form-control" id="@($"combinedFeedFormMaxItems-{ControlIdSuffix}")"
                         @bind-Value="EditedData.MaxItems" />
        </div>
    </div>

    <div class="form-row">
        <p>Combined from feeds:</p>
    </div>

    <StatusMessageShower Message="@statusMessage" Type="@statusMessageType" />

    @if (fetching)
    {
        <div class="spinner-border text-primary" role="status">
            <span class="sr-only">Loading...</span>
        </div>
    }
    else
    {
        <ul>
            @foreach (var feed in EditedData.CombinedFromFeeds)
            {
                <li>
                    <span class="mr-1">@FindFeedName(feed) (@feed)</span>
                    <Button ButtonStyle="warning" OnPressed="@(() => RemoveFeed(feed))">
                        Delete
                    </Button>
                </li>
            }
        </ul>

        if (availableFeedsForCombine is not {Count: >= 1 })
        {
            <div>Could not fetch available feeds</div>
        }
        else if(HasAnyFeedToAdd())
        {
            <div class="form-row">
                <div class="form-group col-md-12">
                    <label for="addNewCombined">Pick feed to add:</label>
                    <select class="custom-select" id="addNewCombined" @onchange="FeedToAddChanged"
                            value="@(currentlyPickedFeedToAdd?.ToString() ?? string.Empty)">
                        <option value=""></option>
                        @foreach (var feed in availableFeedsForCombine.Where(f => !IsAlreadyAdded(f.Id)))
                        {
                            <option value="@feed.Id">@feed.Name</option>
                        }
                    </select>
                </div>
            </div>
            <div class="form-row">
                <Button class="mb-2" Enabled="@(currentlyPickedFeedToAdd != null)"
                        OnPressed="@AddCurrentlyPickedFeed">
                    Add
                </Button>
            </div>

            <br />
        }
    }

    @if (EditedData.DeletedCombinedFromFeeds is {Count: > 0})
    {
        <p>
            This depended on the following deleted feeds
            (saving will remove these, please re-add these above or undelete the feeds before saving):
        </p>

        <ul>
            @foreach (var item in EditedData.DeletedCombinedFromFeeds)
            {
                <li>@item</li>
            }
        </ul>
    }

    <div class="form-row">
        <div class="form-group col-md-12">
            <label for="@($"combinedFeedFormHtmlTemplate-{ControlIdSuffix}")">
                HTML Template For Items (required)
            </label>
            <CustomInputTextArea class="form-control" id="@($"combinedFeedFormHtmlTemplate-{ControlIdSuffix}")"
                @bind-Value="EditedData.HtmlFeedItemEntryTemplate" placeholder="HTML feed conversion template text"/>
        </div>
    </div>

    <ValidationSummary />

    <StatusMessageShower Message="@StatusMessage" Type="@StatusMessageType" />
    <Button class="my-1 mr-1" Enabled="@(!Processing)" type="submit" Spinner="@Processing" ButtonStyle="primary">
        @SaveButtonText
    </Button>

    @ChildContent
</EditForm>

@code {
    private bool fetching = true;
    private string? statusMessage;
    private SiteNoticeType statusMessageType = SiteNoticeType.Danger;

    private List<FeedInfo>? availableFeedsForCombine;
    private long? currentlyPickedFeedToAdd;

    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await FetchAvailableFeeds();
    }

    private void AddFeed(long feedId)
    {
        EditedData.CombinedFromFeeds.Add(feedId);
    }

    private void RemoveFeed(long feedId)
    {
        EditedData.CombinedFromFeeds.Remove(feedId);
    }

    private async Task FetchAvailableFeeds()
    {
        statusMessageType = SiteNoticeType.Danger;
        fetching = true;
        statusMessage = null;
        await InvokeAsync(StateHasChanged);

        try
        {
            availableFeedsForCombine =
                await Http.GetFromJsonAsync<List<FeedInfo>>("api/v1/FeedConfiguration/availableForCombine");
        }
        catch (HttpRequestException e)
        {
            statusMessage = $"Network request failed: {e.Message}";
            fetching = false;
            await InvokeAsync(StateHasChanged);
            return;
        }

        fetching = false;

        await InvokeAsync(StateHasChanged);
    }

    private bool HasAnyFeedToAdd()
    {
        if (availableFeedsForCombine == null)
            return false;

        return availableFeedsForCombine.Any(f => !IsAlreadyAdded(f.Id));
    }

    private bool IsAlreadyAdded(long feedId)
    {
        if (availableFeedsForCombine == null)
            return false;

        foreach (var feed in EditedData.CombinedFromFeeds)
        {
            if (feed == feedId)
                return true;
        }

        return false;
    }

    private string FindFeedName(long id)
    {
        if (availableFeedsForCombine == null)
            return "Error: names not loaded";

        foreach (var feed in availableFeedsForCombine)
        {
            if (feed.Id == id)
                return feed.Name;
        }

        return "Unknown feed";
    }

    private void FeedToAddChanged(ChangeEventArgs e)
    {
        var value = e.Value?.ToString();

        if (string.IsNullOrEmpty(value))
        {
            currentlyPickedFeedToAdd = null;
        }
        else
        {
            currentlyPickedFeedToAdd = long.Parse(value);
        }
    }

    private void AddCurrentlyPickedFeed()
    {
        if (currentlyPickedFeedToAdd == null)
            return;

        AddFeed(currentlyPickedFeedToAdd.Value);
        currentlyPickedFeedToAdd = null;
    }
}
