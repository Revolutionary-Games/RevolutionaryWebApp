@inject HttpClient Http
@inject NavigationManager NavManager
@inject IJSRuntime JS
@inject ComponentUrlHelper URLHelper
@inject NotificationHandler NotificationHandler
@using RevolutionaryWebApp.Shared
@using RevolutionaryWebApp.Shared.Notifications
@using System.Threading
@using RevolutionaryWebApp.Client.Models
@using RevolutionaryWebApp.Client.Services
@using RevolutionaryWebApp.Client.Utilities
@using RevolutionaryWebApp.Shared.Models
@using RevolutionaryWebApp.Shared.Models.Enums
@implements RevolutionaryWebApp.Client.Services.INotificationHandler<AccessKeyListUpdated>
@inherits PaginatedPage<ThriveDevCenter.Shared.Models.AccessKeyDTO>

@if (!string.IsNullOrEmpty(Error))
{
    <div class="alert alert-danger" role="alert">
        @Error
    </div>
}
else
{
    <AccessLimited RequiredAccess="GroupType.Admin" RedirectOnInsufficientPermission="true">

        <StatusMessageShower Message="@statusMessage" Type="@statusMessageType" />

        <PaginatedTable ShowPaginator="@(Data != null)" CurrentPage="@Data?.CurrentPage" PageCount="@Data?.PageCount"
                        OnPageChanged="async e => await ChangePage(e)"
                        OnSortChanged="async column => await ChangeSort(column)"
                        GetSortClass="@SortClass"
                        ShowContentSpinner="@VisibleFetchInProgress"
                        Columns="@columns"
                        ShowNoContent="@NoItemsFound">
            @if (Data != null)
            {
                @foreach (var item in Data.Results)
                {
                    if (resourceStatus.IsDeleted(item.Id))
                        continue;

                    <tr @key="item.Id">
                        <th scope="row">@item.Id</th>
                        <td>@item.Description</td>
                        <td>
                            @(item.LastUsed == null ? "never" : item.LastUsed.Value.ToLocalTime().ToString("G"))
                        </td>
                        <td>
                            @(item.LastUsedFrom == null ? "" : item.LastUsedFrom.ToString())
                        </td>
                        <td>@item.KeyType</td>
                        <td>
                            <AdminResourceDeleteButtons Deleted="@false" Name="@item.Description" Id="@item.Id"
                                                        ButtonClass="btn-sm" UsesSoftDelete="false"
                                                        DeleteURLBase="api/v1/AccessKey"
                                                        DeletePromptTitle="Delete this access key?"
                                                        OnDeleted="@(() => resourceStatus.SetDeletedStatus(item.Id))"
                                                        CustomErrorDisplay="@SetStatusMessage" />
                        </td>
                    </tr>
                }
            }
        </PaginatedTable>
    </AccessLimited>
}

@code {
    private readonly List<TableColumn> columns = new()
    {
        new TableColumn("Id", true),
        new TableColumn("Description", true),
        new TableColumn("Last Accessed", true, "LastUsed"),
        new TableColumn("Last Used From", true, "LastUsedFrom"),
        new TableColumn("Scope", true, "KeyType"),
        new TableColumn("Actions", false),
    };

    private readonly ClientSideResourceStatus<DeletedResourceStatus> resourceStatus = new();

    private string? statusMessage;
    private SiteNoticeType statusMessageType = SiteNoticeType.Danger;

    public AccessKeyList() : base(new SortHelper("Id", SortDirection.Descending))
    {
    }

    protected override async Task OnInitializedAsync()
    {
        await NotificationHandler.Register(this);
        await base.OnInitializedAsync();
    }

    public override Task SetParametersAsync(ParameterView parameters)
    {
        this.SetParametersFromQueryString(NavManager);

        return base.SetParametersAsync(parameters);
    }

    public Task Handle(AccessKeyListUpdated notification, CancellationToken cancellationToken)
    {
        return HandleItemNotification(notification);
    }

    public void GetWantedListenedGroups(IUserGroupData currentUserGroups, ISet<string> groups)
    {
        groups.Add(NotificationGroups.AccessKeyListUpdated);
    }

    public override async ValueTask DisposeAsync()
    {
        await base.DisposeAsync();
        await NotificationHandler.Unregister(this);
    }

    protected override Task<PagedResult<AccessKeyDTO>?> StartQuery(Dictionary<string, string?> requestParams)
    {
        return Http.GetFromJsonAsync<PagedResult<AccessKeyDTO>>(
            QueryHelpers.AddQueryString("api/v1/AccessKey", requestParams));
    }

    protected override async Task OnQuerySent(Dictionary<string, string?> requestParams)
    {
        await URLHelper.UpdateUrlHistoryIfChanged(requestParams);
    }

    private void SetStatusMessage(string message, SiteNoticeType noticeType)
    {
        statusMessage = message;
        statusMessageType = noticeType;
        StateHasChanged();
    }
}
