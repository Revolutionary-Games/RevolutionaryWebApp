@inject NavigationManager NavManager
@inject ICSRFTokenReader CSRF
@using System.Timers
@using RevolutionaryWebApp.Client.Services
@implements IDisposable

@if (!valid)
{
    <div class="alert alert-danger" role="alert">
        This page's authorization has ended, interaction is no longer possible,
        <a href="#" class="alert-link" @onclick="NavManager.ForceReload" @onclick:preventDefault="true">reload</a>.
    </div>
}

@*Only shown if the more serious error is not shown*@
@if (alert != null && valid)
{
    <div class="alert alert-warning" role="alert">
        This page's authorization will end soon. Please save your work and reload as soon as possible.
        @alert
        <a href="#" class="alert-link" @onclick="NavManager.ForceReload" @onclick:preventDefault="true">reload now</a>.
    </div>
}

@code {

    [Parameter]
    public int StartAlertingTimeRemaining { get; set; } = 500;

    private bool valid = true;
    private string? alert;

    // Don't want to waste too much performance on this so this is quite long interval
    private Timer checkTimer = new (5000);

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        checkTimer.Elapsed += OnCheck;
        checkTimer.Enabled = true;
    }

    public void Dispose()
    {
        checkTimer.Dispose();
    }

    private async void OnCheck(object? sender, ElapsedEventArgs elapsedEventArgs)
    {
        bool changes = false;
        bool newValid = CSRF.Valid;

        if (newValid != valid)
        {
            valid = newValid;
            changes = true;
        }

        var remaining = CSRF.TimeRemaining;

        if (remaining < StartAlertingTimeRemaining)
        {
            // To make this look better with a countdown the interval is reduced to 1 second here
            if (Math.Abs(checkTimer.Interval - 1000) > 0.01)
                checkTimer.Interval = 1000;

            if (remaining < 0)
                remaining = 0;

            var newAlert = $"Time remaining: {remaining} seconds";

            if (newAlert != alert)
            {
                alert = newAlert;
                changes = true;
            }
        }
        else if (alert != null)
        {
            alert = null;
            changes = true;
        }

        if (changes)
            await InvokeAsync(StateHasChanged);
    }

}
