@{
    #pragma warning disable 108,114 // invalid warning for razor override
}
@inject CurrentUserInfo CurrentUserInfo
@inject HttpClient Http
@using RevolutionaryWebApp.Shared.Models
@using RevolutionaryWebApp.Shared
@using RevolutionaryWebApp.Client.Services
@using RevolutionaryWebApp.Shared.Forms
@using RevolutionaryWebApp.Shared.Models.Enums
@inherits UserInfoReactingComponent

<h4>User Info For @User.Name (ID: @User.Id)</h4>

@if (ShowSelfIdentification && LookingAtSelf)
{
    <p>This is you.</p>
}

<ul>
    <li><strong>Email</strong>: @User.Email</li>
    <li><strong>Name</strong>: @User.Name</li>
    <li><strong>Primary group</strong>: @User.Groups.ComputePrimaryGroup()</li>
    <li><strong>SSO</strong>: @User.SsoSource</li>
    <li><strong>Local</strong>: @User.Local</li>
    <li><strong>Total launcher links</strong>: @User.TotalLauncherLinks</li>

    <li><strong>API token</strong>: @User.HasApiToken</li>

    @if (LookingAtSelf)
    {
        <UserTokenControls HasThisToken="@User.HasApiToken" TokenType="API" TokenCreateAPI="api/v1/Tokens/api/self" />
    }

    <li><strong>Git LFS token</strong>: @User.HasLfsToken</li>

    @if (LookingAtSelf)
    {
        <UserTokenControls HasThisToken="@User.HasLfsToken" TokenType="LFS" TokenCreateAPI="api/v1/Tokens/lfs/self" />
    }

    <AccessLimited RequiredAccess="GroupType.Admin">
        <li><strong>Admin</strong>: @User.Groups.HasAccessLevel(GroupType.Admin)</li>
        <li><strong>Developer</strong>: @User.Groups.HasAccessLevel(GroupType.Developer)</li>
        <li><strong>Restricted</strong>: @User.Groups.HasGroup(GroupType.RestrictedUser)</li>
        <li><strong>Created At</strong>: @User.CreatedAt.ToLocalTime().ToString("G")</li>
        <li><strong>Updated At</strong>: @User.UpdatedAt.ToLocalTime().ToString("G")</li>
        <li><strong>Suspended</strong>: @User.Suspended</li>
        <li><strong>Suspension reason</strong>: @User.SuspendedReason</li>
        <li><strong>Suspended manually</strong>: @User.SuspendedManually</li>
    </AccessLimited>
</ul>

<h4>Launcher Links</h4>

<AccessLimited RequiredAccess="GroupType.User">
    <p>
        You can link up to @AppInfo.DefaultMaxLauncherLinks Thrive Launchers to your account to access dev center
        features from the launcher. By linking a launcher you can access devbuilds. Linking the launcher to your
        account is meant for your personally use only. Please do not share your account.
    </p>

    <LauncherLinkList UserId="@User.Id" />
</AccessLimited>

<StatusMessageShower Message="@linkResult" Type="@linkResultType" OnClosed="@HideLinkResult" />

<div>
    <AccessLimited RequiredAccess="GroupType.User">
        @if (LookingAtSelf)
        {
            <Button class="mb-2" ButtonStyle="success" Enabled="@(!gettingLauncherLinkCode)"
                    Spinner="@gettingLauncherLinkCode" OnPressed="@StartLauncherLink">
                Link Launcher
            </Button>
        }
    </AccessLimited>

    <Button class="mx-1 mb-2" ButtonStyle="danger" Enabled="@(!clearingAllLinks)" Spinner="@clearingAllLinks"
            OnPressed="@ClearLauncherLinksOnUser">
        Unlink All Launchers
    </Button>
</div>

<h4 class="mt-2">Sessions</h4>

<UserSessions Id="@User.Id" LookingAtSelf="@LookingAtSelf"/>

<p class="mt-2">
    <small>
        Note: forum login sessions are not listed here but logging out everywhere will work for them once login for
        them is handled through this website.
    </small>
</p>

<h4 class="mt-3">Groups</h4>

<p>Member of following groups:</p>
<ul>
    @foreach (var group in User.Groups.Groups.OrderBy(g => g))
    {
        @* TODO: displaying custom group names (should be retrieved similarly as user names) *@
        <li>
            @if (group > GroupType.Custom)
            {
                <span>@($"Custom group: {(int)group}")</span>
            }
            else
            {
                <span>@group.ToString()</span>
            }
        </li>
    }
</ul>

<AccessLimited RequiredAccess="GroupType.Admin">
    @if (!LookingAtSelf)
    {
        <p>TODO: group management controls</p>
    }
</AccessLimited>

<h4 class="mt-2">Association</h4>

@if (User.AssociationMember)
{
    @if (LookingAtSelf)
    {
        <p>You are a member of Revolutionary Games Studio ry!</p>
    }
    else
    {
        <p>This user is a member of Revolutionary Games Studio ry!</p>
    }

    @if (User.BoardMember)
    {
        @if (LookingAtSelf)
        {
            <p>You are currently a board member.</p>
        }
        else
        {
            <p>This user is currently a board member.</p>
        }
    } else if (User.HasBeenBoardMember)
    {
        @if (LookingAtSelf)
        {
            <p>You have been a board member in the past and this affects your voting power.</p>
        }
        else
        {
            <p>This user has been a board member in the past.</p>
        }
    }
}
else
{
    @if (LookingAtSelf)
    {
        <p>You are not a member of the association.</p>
    }
    else
    {
        <p>This user is not a member of the association.</p>
    }
}

<p>If the information in this section is incorrect, please contact us.</p>

<AccessLimited RequiredAccess="GroupType.Admin">
    Association membership can be edited <NavLink href="/association/members">here</NavLink>.
    <br />
    <br />
</AccessLimited>

<h4>Actions</h4>

<StatusMessageShower Message="@actionResult" Type="@actionResultType" />

@if (LookingAtSelf)
{
    <p>You can logout everywhere with a button in the "Sessions" section.</p>
    <br />
}

<AccessLimited RequiredAccess="GroupType.Admin">
    <p>Force logout action is in the "Sessions" section.</p>
    <br />
    <Button class="mb-1" ButtonStyle="danger" Enabled="@CanClearTokens" Spinner="@clearingTokens"
            OnPressed="@ClearTokensOnUser">
        Force Clear Tokens
    </Button>
    <br />

    @if (!User.Suspended)
    {
        @if (showSuspensionReasonEntry)
        {
            <p class="mt-3">
                Suspending a user means they cannot login at all and their account stops working until unsuspended.
                Suspension reason is visible to the user when trying to login and is required to be provided.
            </p>

            <form>
                <div class="row">
                    <div class="mb-3 col-md-6">
                        <input class="form-control" type="text" placeholder="Suspension reason (required)"
                               @bind="@newSuspensionReason" @bind:event="oninput" />
                    </div>
                </div>

                <Button class="mb-1" ButtonStyle="danger" Enabled="@CanStartSuspend" Spinner="@doingSuspension"
                        type="submit" OnPressed="@StartSuspension">
                    Suspend
                </Button>
                <Button class="mb-1 ms-1" ButtonStyle="secondary" OnPressed="@ToggleSuspension">Cancel</Button>
            </form>
        }
        else
        {
            <Button class="mb-1" ButtonStyle="danger" Enabled="@CanSuspend" OnPressed="@ToggleSuspension">
                Suspend
            </Button>
        }
    }
    else
    {
        <Button class="mb-1" ButtonStyle="secondary" Enabled="@(!doingSuspension)" Spinner="@doingSuspension"
                OnPressed="@UnsuspendUser">
            Remove Suspension
        </Button>
    }
    <br />
</AccessLimited>

@code {

    private bool clearingAllLinks;
    private bool gettingLauncherLinkCode;

    private string? linkResult;
    private SiteNoticeType linkResultType = SiteNoticeType.Danger;

    private bool clearingTokens;

    private bool showSuspensionReasonEntry;
    private string newSuspensionReason = string.Empty;
    private bool doingSuspension;

    private string? actionResult;
    private SiteNoticeType actionResultType = SiteNoticeType.Danger;

    [Parameter]
    [EditorRequired]
    public UserDTO User { get; set; } = null!;

    [Parameter]
    public bool ShowSelfIdentification { get; set; }

    private bool CanClearTokens
    {
        get
        {
            if (clearingTokens)
                return false;

            return User.HasApiToken || User.HasLfsToken;
        }
    }

    private bool LookingAtSelf => CurrentUserInfo.InfoReady && CurrentUserInfo.Email ==
        User.Email;

    // Can't suspend admins through this way
    private bool CanSuspend => !LookingAtSelf && !User.Groups.HasAccessLevel(GroupType.Admin);

    private bool CanStartSuspend => CanSuspend && !doingSuspension && !string.IsNullOrWhiteSpace(newSuspensionReason);

    private async void ClearTokensOnUser()
    {
        clearingTokens = true;
        actionResult = null;
        actionResultType = SiteNoticeType.Danger;
        await InvokeAsync(StateHasChanged);

        HttpResponseMessage result;

        try
        {
            result = await Http.PostAsJsonAsync("api/v1/Tokens/clear", new ForceClearTokensForm
            {
                TargetUserId = User.Id,
            });
        }
        catch (HttpRequestException e)
        {
            actionResult = $"Network request failed: {e.Message}";
            clearingTokens = false;
            await InvokeAsync(StateHasChanged);
            return;
        }

        clearingTokens = false;

        var content = await result.Content.ReadAsStringAsync();

        if (!result.IsSuccessStatusCode)
        {
            actionResult = $"Failed to clear tokens. Server responded with: {content}, {result.StatusCode}";
        }
        else
        {
            actionResult = $"Tokens successfully cleared for user ({content})";
            actionResultType = SiteNoticeType.Primary;
        }

        await InvokeAsync(StateHasChanged);
    }

    private async void ClearLauncherLinksOnUser()
    {
        clearingAllLinks = true;
        linkResult = null;
        linkResultType = SiteNoticeType.Danger;
        await InvokeAsync(StateHasChanged);

        HttpResponseMessage result;

        try
        {
            result = await Http.DeleteAsync($"api/v1/LauncherLinks/{User.Id}");
        }
        catch (HttpRequestException e)
        {
            linkResult = $"Network request failed: {e.Message}";
            clearingAllLinks = false;
            await InvokeAsync(StateHasChanged);
            return;
        }

        clearingAllLinks = false;

        if (!result.IsSuccessStatusCode)
        {
            var content = await result.Content.ReadAsStringAsync();
            linkResult = $"Failed to delete launcher links. Server responded with: {content}, {result.StatusCode}";
        }
        else
        {
            linkResult = $"Successfully deleted all launcher links for user";
            linkResultType = SiteNoticeType.Primary;
        }

        await InvokeAsync(StateHasChanged);
    }

    private void HideLinkResult()
    {
        linkResult = null;
    }

    private async void StartLauncherLink()
    {
        gettingLauncherLinkCode = true;
        linkResult = null;
        linkResultType = SiteNoticeType.Danger;
        await InvokeAsync(StateHasChanged);

        HttpResponseMessage result;

        try
        {
            result = await Http.PostAsync($"api/v1/LauncherLinks", new StringContent(string.Empty));
        }
        catch (HttpRequestException e)
        {
            linkResult = $"Network request failed: {e.Message}";
            clearingAllLinks = false;
            await InvokeAsync(StateHasChanged);
            return;
        }

        gettingLauncherLinkCode = false;
        var content = await result.Content.ReadAsStringAsync();

        if (!result.IsSuccessStatusCode)
        {
            linkResult = $"Failed to start launcher link. Server responded with: {content}, {result.StatusCode}";
        }
        else
        {
            var expiryTime = (DateTime.Now + AppInfo.LauncherLinkCodeExpireTime).ToShortTimeString();

            linkResult = $"Your launcher link code is: {content} Please copy it into the Thrive Launcher to " +
                $"continue. The code expires at {expiryTime}";
            linkResultType = SiteNoticeType.Info;
        }

        await InvokeAsync(StateHasChanged);
    }

    private void ToggleSuspension()
    {
        showSuspensionReasonEntry = !showSuspensionReasonEntry;

        if (showSuspensionReasonEntry)
            newSuspensionReason = string.Empty;
    }

    private async Task StartSuspension()
    {
        doingSuspension = true;
        actionResult = null;
        actionResultType = SiteNoticeType.Danger;
        await InvokeAsync(StateHasChanged);

        HttpResponseMessage result;

        try
        {
            result = await Http.PostAsJsonAsync($"api/v1/UserManagement/{User.Id}/suspend", newSuspensionReason);
        }
        catch (HttpRequestException e)
        {
            actionResult = $"Network request failed: {e.Message}";
            doingSuspension = false;
            await InvokeAsync(StateHasChanged);
            return;
        }

        doingSuspension = false;

        if (!result.IsSuccessStatusCode)
        {
            var content = await result.Content.ReadAsStringAsync();
            actionResult = $"Failed to suspend user. Server responded with: {content}, {result.StatusCode}";
        }
        else
        {
            actionResult = "User is now suspended";
            actionResultType = SiteNoticeType.Warning;
            showSuspensionReasonEntry = false;
        }

        await InvokeAsync(StateHasChanged);
    }

    private async Task UnsuspendUser()
    {
        doingSuspension = true;
        actionResult = null;
        actionResultType = SiteNoticeType.Danger;
        await InvokeAsync(StateHasChanged);

        HttpResponseMessage result;

        try
        {
            result = await Http.PostAsync($"api/v1/UserManagement/{User.Id}/unsuspend",
                new StringContent(string.Empty));
        }
        catch (HttpRequestException e)
        {
            actionResult = $"Network request failed: {e.Message}";
            doingSuspension = false;
            await InvokeAsync(StateHasChanged);
            return;
        }

        doingSuspension = false;

        if (!result.IsSuccessStatusCode)
        {
            var content = await result.Content.ReadAsStringAsync();
            actionResult = $"Failed to unsuspend user. Server responded with: {content}, {result.StatusCode}";
        }
        else
        {
            actionResult = "User is now unsuspended";
            actionResultType = SiteNoticeType.Success;
        }

        await InvokeAsync(StateHasChanged);
    }

}
