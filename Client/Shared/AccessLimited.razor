@{
    #pragma warning disable 108,114 // invalid warning for razor override
}
@inject CurrentUserInfo CurrentUserInfo
@implements IDisposable
@using RevolutionaryWebApp.Client.Services
@using RevolutionaryWebApp.Shared.Models.Enums
@inherits UserInfoReactingComponent

@* For now only show something when info is ready, to reduce having infinite number of spinners on one page *@
@if (CurrentUserInfo.InfoReady)
{
    bool hasAccess;

    if (RequiredGroup.HasValue)
    {
        hasAccess = CurrentUserInfo.HasGroup(RequiredGroup.Value);
    }
    else
    {
        hasAccess = CurrentUserInfo.HasAccessLevel(RequiredAccess);
    }

    // Check access due to override
    if (!hasAccess && (OrHasOverride != GroupType.NotLoggedIn && CurrentUserInfo.HasGroup(OrHasOverride)))
        hasAccess = true;

    if (hasAccess)
    {
        if (AuthorizedContent == null)
        {
            @ChildContent
        }
        else
        {
            @AuthorizedContent
        }
    }
    else
    {
        if ((AutoRedirectIfNotLoggedIn || RedirectOnInsufficientPermission) && !CurrentUserInfo.LoggedIn)
        {
            <RedirectToLogin />
        }
        else if (RedirectOnInsufficientPermission && CurrentUserInfo.LoggedIn)
        {
            <RedirectToLogin PermissionsProblem="true" />
        }
        else if(ShowDefaultNoAccess)
        {
            <DevCenterTitle>Access Denied</DevCenterTitle>
            <div>You lack the needed permission to view this content.</div>
        }
        else
        {
            @AccessMissingContent
        }
    }
}

@code {

    /// <summary>
    ///   Requires current user to have this access level. Note doesn't work with non-access level groups, for those
    ///   use <see cref="RequiredGroup"/>. Either this or group has to be specified.
    /// </summary>
    [Parameter]
    public GroupType RequiredAccess { get; set; } = GroupType.Developer;

    /// <summary>
    ///   If specified checks is the user in the given group (doesn't work with access levels). If specified always
    ///   takes precedence over <see cref="RequiredAccess"/>.
    /// </summary>
    [Parameter]
    public GroupType? RequiredGroup { get; set; }

    /// <summary>
    ///   Allows specifying an additional group to check. For now this is used as a workaround for simple group checks
    ///   that should have admin override. Does not work with access levels in general.
    /// </summary>
    [Parameter]
    public GroupType OrHasOverride { get; set; } = GroupType.NotLoggedIn;

    [Parameter]
    public bool ShowDefaultNoAccess { get; set; }

    [Parameter]
    public bool RedirectOnInsufficientPermission { get; set; }

    [Parameter]
    public bool AutoRedirectIfNotLoggedIn { get; set; } = true;

    [Parameter]
    public RenderFragment? AccessMissingContent { get; set; }

    [Parameter]
    public RenderFragment? AuthorizedContent { get; set; }

    /// <summary>
    ///   Alternative to AuthorizedContent if that isn't set
    /// </summary>
    [Parameter]
    public RenderFragment? ChildContent { get; set; }
}
