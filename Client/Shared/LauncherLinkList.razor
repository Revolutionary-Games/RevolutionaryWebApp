@inject HttpClient Http
@inject NotificationHandler NotificationHandler
@using RevolutionaryWebApp.Shared
@using RevolutionaryWebApp.Shared.Notifications
@using System.Threading
@using RevolutionaryWebApp.Client.Models
@using RevolutionaryWebApp.Client.Services
@using RevolutionaryWebApp.Client.Utilities
@using RevolutionaryWebApp.Shared.Models
@implements RevolutionaryWebApp.Client.Services.INotificationHandler<LauncherLinkListUpdated>
@inherits PaginatedPage<RevolutionaryWebApp.Shared.Models.LauncherLinkDTO>

@if (!string.IsNullOrEmpty(Error))
{
    <div class="alert alert-danger" role="alert">
        @Error
    </div>
}
else
{
    <StatusMessageShower Message="@statusMessage" Type="@statusMessageType" />

    <PaginatedTable ShowPaginator="@(Data != null)" CurrentPage="@Data?.CurrentPage" PageCount="@Data?.PageCount"
                    OnPageChanged="async e => await ChangePage(e)"
                    OnSortChanged="async column => await ChangeSort(column)"
                    GetSortClass="@SortClass"
                    ShowContentSpinner="@VisibleFetchInProgress"
                    Columns="@columns"
                    ShowNoContent="@NoItemsFound">
        @if (Data != null)
        {
            @foreach (var item in Data.Results)
            {
                if (resourceStatus.IsDeleted(item.Id))
                    continue;

                <tr @key="item.Id">
                    <td>
                        @if (item.LastConnection != null)
                        {
                            <RecentTimeShortener Time="@item.LastConnection.Value" IncludeSeconds="@false" />
                        }
                        else
                        {
                            <span>never</span>
                        }
                    </td>
                    <td>@item.LastIp</td>
                    <td>@item.TotalApiCalls</td>
                    <td>@item.CreatedAt.ToLocalTime().ToString("G")</td>
                    <td>
                        <AdminResourceDeleteButtons Deleted="@false"
                                                    Name="@item.CreatedAt.ToLocalTime().ToString("G")" Id="@item.Id"
                                                    ButtonClass="btn-sm" UsesSoftDelete="false"
                                                    DeleteURLBase="@($"api/v1/LauncherLinks/{UserId}")"
                                                    DeletePromptTitle="Delete this launcher link?"
                                                    OnDeleted="@(() => resourceStatus.SetDeletedStatus(item.Id))"
                                                    CustomErrorDisplay="@SetStatusMessage" />
                    </td>
                </tr>
            }
        }
    </PaginatedTable>
}

@code {

    private readonly List<TableColumn> columns = new()
    {
        new TableColumn("Last Used", true, "LastConnection"),
        new TableColumn("Last Used From", true, "LastIp"),
        new TableColumn("Total Uses", true, "TotalApiCalls"),
        new TableColumn("Created At", true, "CreatedAt"),
        new TableColumn("Actions", false),
    };

    private readonly ClientSideResourceStatus<DeletedResourceStatus> resourceStatus = new();

    private string? statusMessage;
    private SiteNoticeType statusMessageType = SiteNoticeType.Danger;

    [Parameter]
    public long UserId { get; set; }

    public LauncherLinkList() : base(new SortHelper("LastConnection", SortDirection.Descending))
    {
    }

    protected override async Task OnInitializedAsync()
    {
        await NotificationHandler.Register(this);
        await base.OnInitializedAsync();
    }

    public Task Handle(LauncherLinkListUpdated notification, CancellationToken cancellationToken)
    {
        return HandleItemNotification(notification);
    }

    public void GetWantedListenedGroups(IUserGroupData currentUserGroups, ISet<string> groups)
    {
        groups.Add(NotificationGroups.UserLauncherLinksUpdatedPrefix + UserId);
    }

    public override async ValueTask DisposeAsync()
    {
        await base.DisposeAsync();
        await NotificationHandler.Unregister(this);
    }

    protected override Task<PagedResult<LauncherLinkDTO>?> StartQuery(Dictionary<string, string?> requestParams)
    {
        return Http.GetFromJsonAsync<PagedResult<LauncherLinkDTO>>(
            QueryHelpers.AddQueryString($"api/v1/LauncherLinks/{UserId}", requestParams));
    }

    private void SetStatusMessage(string message, SiteNoticeType noticeType)
    {
        statusMessage = message;
        statusMessageType = noticeType;
        StateHasChanged();
    }

}
