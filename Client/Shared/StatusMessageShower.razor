@using RevolutionaryWebApp.Shared

@if (!string.IsNullOrEmpty(Message))
{
    <div class="alert @Type.AlertClass() @ExtraCSS" role="alert">
        @Message

        @if (HasCallback)
        {
            <button type="button" class="btn-close float-end" data-dismiss="alert" aria-label="Close"
                    @onclick="DismissNotification" @onclick:preventDefault="true" @onclick:stopPropagation="true">
            </button>
        }
    </div>
}

@code {
    [Parameter]
    public string? Message { get; set; }

    [Parameter]
    public SiteNoticeType Type { get; set; } = SiteNoticeType.Danger;

    [Parameter]
    public string? ExtraCSS { get; set; }

    /// <summary>
    ///   Adds support for closing this. The button is automatically added if this is not null
    /// </summary>
    [Parameter]
    public EventCallback OnClosed { get; set; }

    private bool HasCallback => OnClosed.HasDelegate;

    private async void DismissNotification()
    {
        await OnClosed.InvokeAsync();
    }
}
