@inject HttpClient Http
@inject NavigationManager NavManager
@inject ComponentUrlHelper URLHelper
@inject NotificationHandler NotificationHandler
@using RevolutionaryWebApp.Shared
@using RevolutionaryWebApp.Shared.Notifications
@using System.Threading
@using SharedBase.Utilities
@using RevolutionaryWebApp.Client.Services
@using RevolutionaryWebApp.Shared.Converters
@using RevolutionaryWebApp.Shared.Models
@using RevolutionaryWebApp.Shared.Models.Enums
@implements RevolutionaryWebApp.Client.Services.INotificationHandler<DevBuildListUpdated>
@inherits PaginatedPage<RevolutionaryWebApp.Shared.Models.DevBuildDTO>

@if (!string.IsNullOrEmpty(Error))
{
    <div class="alert alert-danger" role="alert">
        @Error
    </div>
}
else
{
    <PaginatedTable ShowPaginator="@(Data != null)" CurrentPage="@Data?.CurrentPage" PageCount="@Data?.PageCount"
                    OnPageChanged="async e => await ChangePage(e)"
                    OnSortChanged="async column => await ChangeSort(column)"
                    GetSortClass="@SortClass"
                    ShowContentSpinner="@VisibleFetchInProgress"
                    Columns="@columns"
                    ShowNoContent="@NoItemsFound"
                    UseNonFixedColumns="@true">
        @if (Data != null)
        {
            @foreach (var item in Data.Results)
            {
                <tr @key="item.Id">
                    <th scope="row"><NavLink href="@($"builds/{item.Id}")">@item.Id</NavLink></th>
                    <td>@item.BuildHash</td>
                    <td>@item.Branch.Truncate()</td>
                    <td>@item.Platform</td>
                    <td>
                        @if (item.Verified)
                        {
                            <span class="badge bg-success">yes</span>
                        }
                    </td>
                    <td>@item.Score</td>
                    <td>@item.Description.Truncate()</td>
                    <td></td>
                    <td><RecentTimeShortener Time="@item.CreatedAt"/></td>
                    <td>@item.Downloads</td>
                    <td>
                        @if (item.Keep || item.Important || item.BuildOfTheDay)
                        {
                            <span class="badge bg-success">yes</span>
                        }
                    </td>
                </tr>
            }
        }
    </PaginatedTable>
}

@code {

    private readonly List<TableColumn> columns = new()
    {
        new TableColumn("ID", true, "Id"),
        new TableColumn("Commit", false),
        new TableColumn("Branch", false),
        new TableColumn("Platform", true),
        new TableColumn("Verified", false),
        new TableColumn("Score", false),
        new TableColumn("Description", false),
        new TableColumn("PR", false),
        new TableColumn("Created", true, "CreatedAt"),
        new TableColumn("Downloads", false),
        new TableColumn("Kept", false),
    };

    [Parameter]
    public DevBuildSearchType BuildType { get; set; }

    [Parameter]
    public bool UseQueryParams { get; set; }

    public DevBuildList() : base(new SortHelper("Id", SortDirection.Descending))
    {
        AutoFetchDataOnInit = false;
    }

    protected override async Task OnInitializedAsync()
    {
        await NotificationHandler.Register(this);
        await base.OnInitializedAsync();
    }

    public override async Task SetParametersAsync(ParameterView parameters)
    {
        await base.SetParametersAsync(parameters);

        if (UseQueryParams)
            this.SetParametersFromQueryString(NavManager);

        if (Data == null)
            await FetchData();
    }

    public Task Handle(DevBuildListUpdated notification, CancellationToken cancellationToken)
    {
        return HandleItemNotification(notification);
    }

    public void GetWantedListenedGroups(IUserGroupData currentUserGroups, ISet<string> groups)
    {
        groups.Add(NotificationGroups.DevBuildsListUpdated);
    }

    public override async ValueTask DisposeAsync()
    {
        await base.DisposeAsync();
        await NotificationHandler.Unregister(this);
    }

    protected override Task<PagedResult<DevBuildDTO>?> StartQuery(Dictionary<string, string?> requestParams)
    {
        return Http.GetFromJsonAsync<PagedResult<DevBuildDTO>>(
            QueryHelpers.AddQueryString("api/v1/DevBuilds/list", requestParams));
    }

    protected override async Task OnQuerySent(Dictionary<string, string?> requestParams)
    {
        if(UseQueryParams)
            await URLHelper.UpdateUrlHistoryIfChanged(requestParams);
    }

    protected override Dictionary<string, string?> CreatePageRequestParams()
    {
        var result = base.CreatePageRequestParams();

        result["type"] = Convert.ToInt32(BuildType).ToString();
        return result;
    }

    protected override void PruneRequestParams(Dictionary<string, string?> queryParams)
    {
        base.PruneRequestParams(queryParams);
        queryParams.Remove("type");
    }

}
