@inject HttpClient Http
@inject IJSRuntime JS
@inject ComponentUrlHelper URLHelper
@inject NotificationHandler NotificationHandler
@using RevolutionaryWebApp.Shared
@using RevolutionaryWebApp.Shared.Notifications
@using System.Threading
@using RevolutionaryWebApp.Client.Services
@using RevolutionaryWebApp.Shared.Models
@using RevolutionaryWebApp.Shared.Models.Enums
@implements RevolutionaryWebApp.Client.Services.INotificationHandler<CIProjectBuildJobOutputSectionsListUpdated>
@implements RevolutionaryWebApp.Client.Services.INotificationHandler<BuildMessageNotification>
@inherits ListDataPage<RevolutionaryWebApp.Shared.Models.CIJobOutputSectionInfo>

@if (!string.IsNullOrEmpty(Error))
{
    <div class="alert alert-danger" role="alert">
        @Error
    </div>
}
else
{
    @if (Data != null)
    {
        if (Data.Count < 1)
        {
            <p>This job has no output sections.</p>
        }

        @foreach (var item in Data)
        {
            <div @key="item.CiJobOutputSectionId" class="output @ClassForStatus(item.Status)"
                 @onclick="() => ToggleSection(item)">
                @if (ShouldShowSection(item))
                {
                    <span class="oi oi-chevron-top"></span>
                }
                else
                {
                    <span class="oi oi-chevron-right"></span>
                }
                <span class="ml-2">@item.Name</span>
                <span class="float-right"><DurationDisplayer Start="@item.StartedAt" End="@item.FinishedAt" /></span>
            </div>
            <div @key="@(item.CiJobOutputSectionId + "-output")"
                 class="@(ShouldShowSection(item) ? "" : "collapse") output-content"
                 aria-expanded="@ShouldShowSection(item)">
                @if (ShouldShowSection(item))
                {
                    <CIJobOutputSection ProjectId="@ProjectId" BuildId="@BuildId" JobId="@JobId"
                                        Id="@item.CiJobOutputSectionId"
                                        RealtimeOutput="@GetOutput(item.CiJobOutputSectionId)" />
                }
            </div>
        }
    }
    else
    {
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    }
}

@code {
    private readonly Dictionary<long, bool> shownSections = new();

    private readonly List<string> receivedRealtimeOutput = new ();
    private long? receivingRealtimeOutputForSection;

    [Parameter]
    public long ProjectId { get; set; }

    [Parameter]
    public long BuildId { get; set; }

    [Parameter]
    public long JobId { get; set; }

    public CIJobOutput() : base(new SortHelper("CiJobOutputSectionId", SortDirection.Ascending))
    {
    }

    protected override async Task OnInitializedAsync()
    {
        await NotificationHandler.Register((INotificationHandler<CIProjectBuildJobOutputSectionsListUpdated>)this);
        await base.OnInitializedAsync();
    }

    public Task Handle(CIProjectBuildJobOutputSectionsListUpdated notification, CancellationToken cancellationToken)
    {
        return HandleItemNotification(notification);
    }

    public Task Handle(BuildMessageNotification notificationWrapper, CancellationToken cancellationToken)
    {
        var notification = notificationWrapper.Message;

        if (notification.Type == BuildSectionMessageType.SectionStart &&
            receivingRealtimeOutputForSection != notification.SectionId)
        {
            // Hide the section output was previously received for
            if (receivingRealtimeOutputForSection != null)
                shownSections[receivingRealtimeOutputForSection.Value] = false;

            // Setup receiving the new section
            receivedRealtimeOutput.Clear();
            receivingRealtimeOutputForSection = notification.SectionId;
            shownSections[receivingRealtimeOutputForSection.Value] = true;

            // A new section object is not created here as we should very shortly (if not already) have received
            // a creation notification about it and our Data list should be updated shortly

            StateHasChanged();

        } else if (notification.Type == BuildSectionMessageType.BuildOutput &&
            !string.IsNullOrEmpty(notification.Output))
        {
            // TODO: limit how much data can be in memory here on the client
            bool first = true;
            foreach (var line in notification.Output.Split('\n'))
            {
                if(first)
                {
                    // First line might not be just after a line-break so append that to an existing line in
                    // receivedRealtimeOutput
                    if (receivedRealtimeOutput.Count < 1)
                    {
                        receivedRealtimeOutput.Add(line);
                    }
                    else
                    {
                        receivedRealtimeOutput[^1] += line;
                    }

                    first = false;
                }
                else
                {
                    receivedRealtimeOutput.Add(line);
                }
            }

            StateHasChanged();
        }

        return Task.CompletedTask;
    }

    public void GetWantedListenedGroups(IUserGroupData currentUserGroups, ISet<string> groups)
    {
        var notificationId = ProjectId + "_" + BuildId + "_" + JobId;

        groups.Add(NotificationGroups.CIProjectBuildJobSectionsUpdatedPrefix + notificationId);
        groups.Add(NotificationGroups.CIProjectsBuildsJobRealtimeOutputPrefix + notificationId);
    }

    public override async ValueTask DisposeAsync()
    {
        await base.DisposeAsync();
        await NotificationHandler.Unregister((INotificationHandler<CIProjectBuildJobOutputSectionsListUpdated>)this);
    }

    protected override Task<List<CIJobOutputSectionInfo>?> StartQuery(Dictionary<string, string?> requestParams)
    {
        return Http.GetFromJsonAsync<List<CIJobOutputSectionInfo>>(
            QueryHelpers.AddQueryString($"api/v1/CIProject/{ProjectId}/builds/{BuildId}/jobs/{JobId}/output",
                requestParams));
    }

    protected override async Task OnQuerySent(Dictionary<string, string?> requestParams)
    {
        await URLHelper.UpdateUrlHistoryIfChanged(requestParams);
    }

    private string ClassForStatus(CIJobSectionStatus status)
    {
        switch (status)
        {
            case CIJobSectionStatus.Running:
                return "pending bg-secondary";
            case CIJobSectionStatus.Succeeded:
                return "success bg-success";
            case CIJobSectionStatus.Failed:
                return "failed bg-danger";
            default:
                throw new ArgumentOutOfRangeException(nameof(status), status, null);
        }
    }

    private void ToggleSection(CIJobOutputSectionInfo section)
    {
        shownSections[section.CiJobOutputSectionId] = !ShouldShowSection(section);
    }

    private bool ShouldShowSection(CIJobOutputSectionInfo section)
    {
        if (!shownSections.TryGetValue(section.CiJobOutputSectionId, out bool shown))
        {
            // Failed sections are shown by default
            return section.Status == CIJobSectionStatus.Failed;
        }

        return shown;
    }

    private List<string>? GetOutput(long sectionId)
    {
        if (receivingRealtimeOutputForSection != sectionId)
            return null;

        return receivedRealtimeOutput;
    }

}
