@inject HttpClient Http
@using RevolutionaryWebApp.Shared.Models
@using SharedBase.Utilities
@inherits SimpleResourceFetcher<RevolutionaryWebApp.Shared.Models.DevBuildsStatisticsDTO>
<h4>DevBuild Statistics</h4>

<SingleResourceDisplayer Error="@Error" Loading="@Loading" HasData="@(Data != null)" ShowDataWithError="@false">
    @if (Data != null)
    {
        <div>
            Latest build:
            @if (Data.LatestBuild.HasValue)
            {
                <RecentTimeShortener Time="@Data.LatestBuild.Value"/>
            }
            else
            {
                <span>never</span>
            }
            latest Build Of The day:
            @if (Data.BOTDUpdated.HasValue)
            {
                <RecentTimeShortener Time="@Data.BOTDUpdated.Value"/>
            }
            else
            {
                <span>never</span>
            }
        </div>
        <div>
            Total builds: @Data.TotalBuilds (old and deleted builds: @Data.DeletedBuilds) with
            @("dehydrated object".PrintCount(Data.DehydratedFiles))
            taking up @Data.TotalSpaceUsed.BytesToMiB() of storage. Total downloads: @Data.TotalDownloads
        </div>
    }
</SingleResourceDisplayer>


@code {

    protected override Task<DevBuildsStatisticsDTO?> StartQuery()
    {
        return Http.GetFromJsonAsync<DevBuildsStatisticsDTO>("api/v1/DevBuilds");
    }
}
