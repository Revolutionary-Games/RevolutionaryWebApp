@using RevolutionaryWebApp.Shared
@using Microsoft.EntityFrameworkCore.Storage.ValueConversion
@using DevCenterCommunication.Models
@using System.Net
@using System.Text.Json
@using System.Threading
@using DevCenterCommunication.Models.Enums
@using RevolutionaryWebApp.Client.Services
@using RevolutionaryWebApp.Shared.Models
@using RevolutionaryWebApp.Shared.Models.Enums
@using RevolutionaryWebApp.Shared.Notifications
@using RevolutionaryWebApp.Shared.Utilities
@inject HttpClient Http
@inject CurrentUserInfo CurrentUserInfo
@implements RevolutionaryWebApp.Client.Services.INotificationHandler<FolderContentsUpdated>
@inherits PaginatedPage<DevCenterCommunication.Models.StorageItemInfo>

<NonNavigatingBreadCrumbs CurrentPath="@CurrentPath" OnPathSelected="@OnFolderChange"/>

@if (!string.IsNullOrEmpty(Error))
{
    <div class="alert alert-danger" role="alert">
        @Error
    </div>
}
else
{
    <PaginatedTable ShowPaginator="@(Data != null)" CurrentPage="@Data?.CurrentPage" PageCount="@Data?.PageCount"
                    OnPageChanged="async e => await ChangePage(e)"
                    OnSortChanged="async column => await ChangeSort(column)"
                    GetSortClass="@SortClass"
                    ShowContentSpinner="@VisibleFetchInProgress"
                    Columns="@columns"
                    ShowNoContent="@NoItemsFound">

        @if (Data != null)
        {
            @foreach (var item in Data.Results)
            {
                <tr @key="item.Id">
                    <th scope="row">
                        <a href="#" @onclick="@(() => NavigateToPath(item))" @onclick:preventDefault="true">
                            @item.Name
                        </a>
                    </th>
                    <td>@item.ReadAccess</td>
                    <td>@item.WriteAccess</td>
                </tr>
            }
        }
    </PaginatedTable>

    @if (hasWriteAccess == false && NonWritableWarning && parsedFolderId != null)
    {
        <StatusMessageShower Type="SiteNoticeType.Warning" Message="You do not have write access to this folder"/>
    }
}

@code {

    private readonly List<TableColumn> columns = new()
    {
        new TableColumn("Name", true),
        new TableColumn("Read Access", false),
        new TableColumn("Write Access", false),
    };

    private bool fetchedData;
    private string? lastFetchedPath;

    private long? parsedFolderId;
    private bool? hasWriteAccess;

    public FolderSelector() : base(new SortHelper("Name", SortDirection.Ascending))
    {
        DefaultPageSize = 100;
        AutoFetchDataOnInit = false;
    }

    /// <summary>
    ///   The currently shown path. Should be updated when <see cref="OnFolderChange"/> is triggered
    /// </summary>
    [Parameter]
    public string? CurrentPath { get; set; }

    [Parameter]
    public bool NonWritableWarning { get; set; }

    [Parameter]
    [EditorRequired]
    public EventCallback<string?> OnFolderChange { get; set; }

    public void GetWantedListenedGroups(IUserGroupData currentUserGroups, ISet<string> groups)
    {
        // TODO: should this component listen for folder changes?
    }

    public Task Handle(FolderContentsUpdated notification, CancellationToken cancellationToken)
    {
        // Start fetching data again if something in the folder we cared about changed
        if (notification.Item.Ftype == FileType.Folder)
            WantsToFetchDataAgain = true;

        return Task.CompletedTask;
    }

    public override async Task SetParametersAsync(ParameterView parameters)
    {
        await base.SetParametersAsync(parameters);

        if (!fetchedData || lastFetchedPath != CurrentPath)
        {
            await ParseCurrentPath();
        }
    }

    protected override Dictionary<string, string?> CreatePageRequestParams()
    {
        var request = base.CreatePageRequestParams();

        // We rely on the fact that ParseCurrentPath calls FetchData to make sure this is setup right
        request["parentId"] = parsedFolderId?.ToString() ?? string.Empty;

        return request;
    }

    protected override Task<PagedResult<StorageItemInfo>?> StartQuery(Dictionary<string, string?> requestParams)
    {
        return Http.GetFromJsonAsync<PagedResult<StorageItemInfo>>(
            QueryHelpers.AddQueryString("api/v1/Files/folderFolders", requestParams));
    }

    protected override Task OnDataReceived()
    {
        fetchedData = true;
        return base.OnDataReceived();
    }

    private async Task NavigateToPath(StorageItemInfo subFolder)
    {
        if (string.IsNullOrEmpty(CurrentPath))
        {
            await OnFolderChange.InvokeAsync(subFolder.Name);
        }
        else
        {
            await OnFolderChange.InvokeAsync(CurrentPath + '/' + subFolder.Name);
        }
    }

    private async Task ParseCurrentPath()
    {
        lastFetchedPath = CurrentPath;
        parsedFolderId = null;
        VisibleFetchInProgress = true;
        Error = null;

        await InvokeAsync(StateHasChanged);

        HttpResponseMessage result;

        try
        {
            result = await Http.GetAsync(QueryHelpers.AddQueryString(
                "api/v1/Files/itemFromPath","path", CurrentPath ?? string.Empty));
        }
        catch (HttpRequestException e)
        {
            Error = $"Network request failed: {e.Message}";
            VisibleFetchInProgress = false;
            await InvokeAsync(StateHasChanged);
            return;
        }

        var content = await result.Content.ReadAsStringAsync();
        VisibleFetchInProgress = false;

        if (result.StatusCode != HttpStatusCode.OK)
        {
            Error = $"Failed to process current path: {content}";
            if (string.IsNullOrEmpty(content))
                Error += result.StatusCode.ToString();
        }
        else
        {
            var parsedResult = JsonSerializer.Deserialize<PathParseResult>(content,
                new JsonSerializerOptions(JsonSerializerDefaults.Web));
            if (parsedResult != null)
            {
                if (parsedResult.FinalItem != null && parsedResult.FinalItem.Ftype != FileType.Folder)
                {
                    // This is a file
                    Error = "Current path is a file somehow";
                }
                else
                {
                    parsedFolderId = parsedResult.FinalItem?.Id;

                    if (parsedResult.FinalItem == null)
                    {
                        hasWriteAccess = CurrentUserInfo.HasGroup(GroupType.Admin);
                    }
                    else
                    {
                        hasWriteAccess = parsedResult.FinalItem.WriteAccess.IsAccessibleTo(CurrentUserInfo.Groups,
                            CurrentUserInfo.Info?.Id, parsedResult.FinalItem.OwnerId);
                    }
                }

                VisibleFetchInProgress = true;

                // await NotificationHandler.NotifyWantedGroupsChanged();
                await FetchData();
            }
            else
            {
                Error = "Failed to parse response JSON";
            }
        }
    }

}
