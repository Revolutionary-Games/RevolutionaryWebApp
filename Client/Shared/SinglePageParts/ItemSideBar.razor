@inject HttpClient Http
@inject NavigationManager NavManager
@inject IClipboard Clipboard
@inject CurrentUserInfo CurrentUserInfo
@using RevolutionaryWebApp.Shared.Models
@using System.IO
@using System.Net
@using DevCenterCommunication.Models
@using SharedBase.Utilities
@using TextCopy
@using RevolutionaryWebApp.Client.Services
@using RevolutionaryWebApp.Shared
@using RevolutionaryWebApp.Shared.Models.Enums
@using RevolutionaryWebApp.Shared.Utilities

<div class="item-sidebar @ExpandedClass">
    <button type="button" class="btn-close" data-dismiss="alert" aria-label="Close"
            @onclick="CloseSideBar" @onclick:preventDefault="true" @onclick:stopPropagation="true">
        <span aria-hidden="true">&times;</span>
    </button>

    <h2>
        @Item.Name
        @if (Item.Deleted)
        {
            <span class="badge bg-danger ms-1">DELETED</span>
        }
    </h2>

    <StatusMessageShower Message="@statusMessage" Type="@statusMessageType" />

    @if (!Item.Deleted)
    {
        <div class="preview-box">
            @switch (Extension)
            {
                case ".jpg":
                case ".jpeg":
                case ".gif":
                case ".webp":
                case ".png":
                case ".svg":
                {
                    <img src="@GetDownloadURL()" alt="@Item.Name" class="preview-image"/>
                    break;
                }
                case ".mkv":
                case ".webm":
                case ".mp4":
                {
                    <video src="@GetDownloadURL()" alt="@Item.Name" class="preview-video" controls></video>
                    break;
                }
                case ".flac":
                case ".ogg":
                {
                    <audio src="@GetDownloadURL()" alt="@Item.Name" class="preview-audio" controls></audio>
                    break;
                }
                case ".json":
                case ".md":
                case ".txt":
                {
                    if (downloadingData)
                    {
                        <div class="text-center">
                            <div class="spinner-border text-primary" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                        </div>
                    }
                    else
                    {
                        <pre>@downloadedTextContent</pre>
                    }

                    break;
                }
                case ".pdf":
                {
                    <object data="@GetDownloadURL()" type="application/pdf" height="800" width="100%">
                        <embed src="@GetDownloadURL()" type="application/pdf" height="800" width="100%">
                    </object>

                    break;
                }
                default:
                {
                    <span>No preview available for this file type (@Extension)</span>
                    break;
                }
            }
        </div>
    }
    else
    {
        <span>Deleted items can't be previewed</span>
    }

    @if (Item.Deleted)
    {
        <p>
            This file is deleted and will be automatically cleaned from the storage after
            @AppInfo.DeleteTrashedItemsAfter.TotalDays days. This file can only be downloaded by users who see this in
            trash. Only specific versions can be downloaded (normal download will fail), select one of the non-deleted
            versions in the versions table below to download it.
        </p>
    }

    <div class="mx-2 my-1">
        <a href="@GetDownloadURL()" target="_blank">Download</a>

        <Button ButtonStyle="primary" class="btn-sm ms-1" OnPressed="@CopyLinkToClipboard">
            @if (!linkCopied)
            {
                <span>Copy Download Link</span>
            }
            else
            {
                <span>Copied</span>
            }
        </Button>
    </div>

    <div class="mx-1">
        @if (Item.Deleted)
        {
            <h3>Deleted</h3>

            @if (downloadingDeleteInfo)
            {
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            }
            else if (loadedDeleteInfo == null)
            {
                <p>Error loading delete info: @deleteInfoError</p>
            }
            else
            {
                <p>
                    This file file was originally at: @loadedDeleteInfo.OriginalPath
                </p>
                <p>
                    This was deleted at: <RecentTimeShortener Time="@loadedDeleteInfo.DeletedAt"/> by
                    <UsernameDisplayer UserId="@loadedDeleteInfo.DeletedById"/>
                </p>
            }

            @if (showAlternativeRestorePath)
            {
                <p>Select a different folder to restore to:</p>

                <FolderSelector CurrentPath="@newRestorePath" NonWritableWarning="@true"
                                OnFolderChange="@ChangeNewRestorePath"/>

                <Button ButtonStyle="primary" Enabled="@(!processingAction && !string.IsNullOrEmpty(newRestorePath))"
                        Spinner="@processingAction" class="mb-1 me-1" OnPressed="@(() => RestoreItem(newRestorePath))">
                    Retry Restore
                </Button>

                <Button ButtonStyle="warning" Enabled="@(!processingAction)"
                        Spinner="@processingAction" class="mb-1" OnPressed="@CancelRetryRestore">
                    Cancel
                </Button>
            }
            else
            {
                <Button ButtonStyle="success" Enabled="@(!processingAction)" Spinner="@processingAction" class="mb-1"
                        OnPressed="@(() => RestoreItem(null))">
                    Restore
                </Button>

                @* TODO: admin immediate purge button *@
            }
        }

        <h3>Information</h3>
        <div>Size: @(Item.Size != null ? Item.Size.Value.BytesToMiB() : "unknown")</div>
        <div>Read: @Item.ReadAccess.ToUserReadableString() </div>
        <div>Write: @Item.WriteAccess.ToUserReadableString() </div>

        <AccessLimited AutoRedirectIfNotLoggedIn="@false" RequiredAccess="GroupType.RestrictedUser">
            <div>
                Owner: <UsernameDisplayer UserId="@Item.OwnerId"/>
            </div>
        </AccessLimited>

        <div>Created: <RecentTimeShortener Time="@Item.CreatedAt"/></div>
        <div>Updated: <RecentTimeShortener Time="@Item.UpdatedAt"/></div>

        <AccessLimited AutoRedirectIfNotLoggedIn="@false" RequiredAccess="GroupType.RestrictedUser">
            @if (Item.LastModifiedById != null)
            {
                <div>
                    Last modified by (excluding versions): <UsernameDisplayer UserId="@Item.LastModifiedById"/>
                </div>
            }
        </AccessLimited>

        <StatusMessageShower Message="@actionStatusMessage" Type="@actionStatusMessageType"/>
        
        @if (expanded)
        {
            <Button ButtonStyle="primary" class="btn-sm me-1" OnPressed="@ToggleExpand">
                Shrink Panel
            </Button>
        }
        else
        {
            <Button ButtonStyle="primary" class="btn-sm me-1" OnPressed="@ToggleExpand">
                Expand Versions View
            </Button>
        }

        <AccessLimited AutoRedirectIfNotLoggedIn="@false" RequiredAccess="GroupType.RestrictedUser">

            @if (!Item.Special && !Item.ModificationLocked && Item.WriteAccess.IsAccessibleTo(
                CurrentUserInfo.Groups, CurrentUserInfo.Info!.Id, Item.OwnerId))
            {
                <StorageItemFolderEditor Data="@Item" ButtonClass="btn-sm" FormClass="ms-3"/>
            }

            @if (!Item.Deleted)
            {
                <Button ButtonStyle="secondary" Enabled="@CanMoveItem" class="btn-sm ms-1" OnPressed="@ToggleMove">
                    Move
                </Button>

                @if (!Item.Special && (CurrentUserInfo.Groups!.HasGroup(GroupType.Admin) ||
                    CurrentUserInfo.Info!.Id == Item.OwnerId))
                {
                    if (Item.ModificationLocked)
                    {
                        <Button Enabled="@(!processingAction)" Spinner="@processingAction" class="btn-sm ms-1"
                                ButtonStyle="warning" OnPressed="@UnlockItem">
                            Unlock Properties
                        </Button>
                    }
                    else
                    {
                        <Button Enabled="@(!processingAction)" Spinner="@processingAction" class="btn-sm ms-1"
                                ButtonStyle="secondary" OnPressed="@LockItem">
                            Lock Properties
                        </Button>
                    }

                    if (Item.Important)
                    {
                        <Button Enabled="@(!processingAction)" Spinner="@processingAction" class="btn-sm ms-1"
                                ButtonStyle="warning" OnPressed="@UnmarkImportant">
                            Remove Important Status
                        </Button>
                    }
                    else
                    {
                        <Button Enabled="@(!processingAction)" Spinner="@processingAction" class="btn-sm ms-1"
                                ButtonStyle="secondary" OnPressed="@MarkImportant">
                            Mark Important
                        </Button>
                    }
                }

                <Button ButtonStyle="danger" Enabled="@CanDeleteItem" Spinner="@processingAction" class="btn-sm ms-1"
                        OnPressed="@DeleteItem">
                    Delete
                </Button>
            }

            @if (showMoveControls)
            {
                <p class="mt-2">Select the folder to move this file to:</p>

                <FolderSelector CurrentPath="@targetMovePath" NonWritableWarning="@true" OnFolderChange="@BrowseMoveFolder"/>

                <Button Enabled="@(!processingAction)" class="mb-1" ButtonStyle="primary" OnPressed="@PerformMove"
                        Spinner="@processingAction">
                    Move
                </Button>
            }

            <h3 class="mt-2">Versions</h3>

            <StorageItemVersions StorageItem="@Item" ExpandedView="@expanded"/>
        </AccessLimited>

        <h4 class="mt-2">Extended Info</h4>
        <div>Name: @Item.Name</div>
        <div>ID: @Item.Id</div>
        <div>Type: @Item.Ftype</div>
        <div>Properties locked: @Item.ModificationLocked</div>
        <div>Can be parentless: @Item.AllowParentless</div>
        <div>Parent folder: @Item.ParentId</div>
        <div>Moved from (if recently moved): @Item.MovedFromLocation</div>
        <div>Special: @Item.Special</div>
        <div>Important: @Item.Important</div>
    </div>
</div>

@code {

    private string? statusMessage;
    private SiteNoticeType statusMessageType = SiteNoticeType.Danger;

    private bool processingAction;
    private string? actionStatusMessage;
    private SiteNoticeType actionStatusMessageType = SiteNoticeType.Danger;

    private bool downloadingDeleteInfo;
    private StorageItemDeleteInfoDTO? loadedDeleteInfo;
    private string? deleteInfoError;

    private string? downloadCheckedFilename;
    private bool downloadingData = true;

    // TODO: implement markdown parsing etc
    private string? downloadedTextContent;

    private bool linkCopied;

    private bool showMoveControls;
    private string? targetMovePath;

    private bool showAlternativeRestorePath;
    private string? newRestorePath;

    private bool expanded;

    [Parameter]
    [EditorRequired]
    public StorageItemDTO Item { get; set; } = null!;

    [Parameter]
    public bool PreventClose { get; set; }

    [CascadingParameter]
    public IModalService Modal { get; set; } = null!;

    private string Extension => Path.GetExtension(Item.Name);

    private string ExpandedClass => expanded ? "expanded" : string.Empty;

    private bool CanDeleteItem => !Item.Special && !Item.ModificationLocked && !Item.Important &&
        Item.WriteAccess.IsAccessibleTo(CurrentUserInfo.Groups, CurrentUserInfo.Info!.Id, Item.OwnerId) &&
        !processingAction;

    // TODO: can we somehow check the writability of the parent folder?
    private bool CanMoveItem => Item is {Special: false, ModificationLocked: false,
        Important: false } && (CurrentUserInfo.Groups!.HasGroup(GroupType.Admin) || Item.ParentId != null);

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();

        if (Item.Deleted && (!downloadingDeleteInfo || (loadedDeleteInfo != null && loadedDeleteInfo.StorageItemId != Item.Id)))
        {
            loadedDeleteInfo = null;

            await FetchDeleteInfo(Item.Id);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (downloadCheckedFilename != Item.Name && !Item.Deleted)
        {
            downloadCheckedFilename = Item.Name;

            switch (Extension)
            {
                case ".json":
                case ".md":
                case ".txt":
                {
                    if (Item.Size is null or > AppInfo.MaxInBrowserPreviewTextFileSize)
                    {
                        downloadedTextContent = "File too large for preview";
                        downloadingData = false;
                    }
                    else
                    {
                        await DownloadTextFile();
                    }
                    break;
                }
            }
        }
    }

    private void CloseSideBar()
    {
        // Disallow changing the file path while uploading
        if (PreventClose)
            return;

        // Navigate to the parent path, as that should close the file showing
        NavManager.NavigateTo(PathParser.GetParentPath(NavManager.Uri));
    }

    private void ToggleExpand()
    {
        expanded = !expanded;
    }

    private string GetDownloadURL(int version = -1)
    {
        string relative;

        if (version >= 0)
        {
            relative = $"api/v1/download/{Item.Id}?version={version}";
        }
        else
        {
            relative = $"api/v1/download/{Item.Id}";
        }

        return new Uri(new Uri(NavManager.BaseUri), relative).ToString();
    }

    private async Task DownloadTextFile()
    {
        downloadingData = true;
        statusMessage = null;
        statusMessageType = SiteNoticeType.Danger;
        await InvokeAsync(StateHasChanged);

        HttpResponseMessage result;

        try
        {
            result = await Http.GetAsync(GetDownloadURL());
        }
        catch (HttpRequestException e)
        {
            statusMessage = $"Network request failed: {e.Message}";
            downloadingData = false;
            await InvokeAsync(StateHasChanged);
            return;
        }

        downloadingData = false;
        var content = await result.Content.ReadAsStringAsync();

        if (!result.IsSuccessStatusCode)
        {
            statusMessage = $"Error, server responded with: {content}, {result.StatusCode}";
        }
        else
        {
            downloadedTextContent = content;
        }

        await InvokeAsync(StateHasChanged);
    }

    private async Task CopyLinkToClipboard()
    {
        linkCopied = false;
        await InvokeAsync(StateHasChanged);

        await Clipboard.SetTextAsync(GetDownloadURL());

        linkCopied = true;
        await InvokeAsync(StateHasChanged);
    }

    private async void LockItem()
    {
        processingAction = true;
        actionStatusMessage = null;
        actionStatusMessageType = SiteNoticeType.Danger;
        await InvokeAsync(StateHasChanged);

        HttpResponseMessage result;

        try
        {
            result = await Http.PostAsync($"api/v1/Files/{Item.Id}/lock", new StringContent(string.Empty));
        }
        catch (HttpRequestException e)
        {
            actionStatusMessage = $"Network request failed: {e.Message}";
            processingAction = false;
            await InvokeAsync(StateHasChanged);
            return;
        }

        processingAction = false;

        if (!result.IsSuccessStatusCode)
        {
            var content = await result.Content.ReadAsStringAsync();
            actionStatusMessage = $"Error, server responded with: {content}, {result.StatusCode}";
        }
        else
        {
            actionStatusMessage = "File properties (name, read access, write access) are now locked against " +
                "modifications. This also can't be deleted.";
            actionStatusMessageType = SiteNoticeType.Primary;
        }

        await InvokeAsync(StateHasChanged);
    }

    private async void UnlockItem()
    {
        processingAction = true;
        actionStatusMessage = null;
        actionStatusMessageType = SiteNoticeType.Danger;
        await InvokeAsync(StateHasChanged);

        HttpResponseMessage result;

        try
        {
            result = await Http.DeleteAsync($"api/v1/Files/{Item.Id}/lock");
        }
        catch (HttpRequestException e)
        {
            actionStatusMessage = $"Network request failed: {e.Message}";
            processingAction = false;
            await InvokeAsync(StateHasChanged);
            return;
        }

        processingAction = false;

        if (!result.IsSuccessStatusCode)
        {
            var content = await result.Content.ReadAsStringAsync();
            actionStatusMessage = $"Error, server responded with: {content}, {result.StatusCode}";
        }
        else
        {
            actionStatusMessage = "This file is no longer locked against modifications";
            actionStatusMessageType = SiteNoticeType.Secondary;
        }

        await InvokeAsync(StateHasChanged);
    }

    private async void MarkImportant()
    {
        processingAction = true;
        actionStatusMessage = null;
        actionStatusMessageType = SiteNoticeType.Danger;
        await InvokeAsync(StateHasChanged);

        HttpResponseMessage result;

        try
        {
            result = await Http.PostAsync($"api/v1/Files/{Item.Id}/important", new StringContent(string.Empty));
        }
        catch (HttpRequestException e)
        {
            actionStatusMessage = $"Network request failed: {e.Message}";
            processingAction = false;
            await InvokeAsync(StateHasChanged);
            return;
        }

        processingAction = false;

        if (!result.IsSuccessStatusCode)
        {
            var content = await result.Content.ReadAsStringAsync();
            actionStatusMessage = $"Error, server responded with: {content}, {result.StatusCode}";
        }
        else
        {
            actionStatusMessage = "This file is now important. All uploaded versions will be kept (normally only " +
                "the last few versions are kept and other are automatically deleted) and this " +
                "can't be deleted.";
            actionStatusMessageType = SiteNoticeType.Primary;
        }

        await InvokeAsync(StateHasChanged);
    }

    private async void UnmarkImportant()
    {
        processingAction = true;
        actionStatusMessage = null;
        actionStatusMessageType = SiteNoticeType.Danger;
        await InvokeAsync(StateHasChanged);

        HttpResponseMessage result;

        try
        {
            result = await Http.DeleteAsync($"api/v1/Files/{Item.Id}/important");
        }
        catch (HttpRequestException e)
        {
            actionStatusMessage = $"Network request failed: {e.Message}";
            processingAction = false;
            await InvokeAsync(StateHasChanged);
            return;
        }

        processingAction = false;

        if (!result.IsSuccessStatusCode)
        {
            var content = await result.Content.ReadAsStringAsync();
            actionStatusMessage = $"Error, server responded with: {content}, {result.StatusCode}";
        }
        else
        {
            actionStatusMessage = "This file is no longer marked important";
            actionStatusMessageType = SiteNoticeType.Warning;
        }

        await InvokeAsync(StateHasChanged);
    }

    private async Task FetchDeleteInfo(long id)
    {
        downloadingDeleteInfo = true;
        deleteInfoError = "Unknown error";
        await InvokeAsync(StateHasChanged);

        try
        {
            loadedDeleteInfo = await Http.GetFromJsonAsync<StorageItemDeleteInfoDTO>(
                $"api/v1/Files/{id}/deleteStatus") ?? throw new NullDecodedJsonException();
        }
        catch (HttpRequestException e)
        {
            deleteInfoError = $"Network request failed: {e.Message}";
        }

        downloadingDeleteInfo = false;
        await InvokeAsync(StateHasChanged);
    }

    private async void DeleteItem()
    {
        processingAction = true;
        actionStatusMessage = null;
        actionStatusMessageType = SiteNoticeType.Danger;
        await InvokeAsync(StateHasChanged);

        HttpResponseMessage result;

        try
        {
            result = await Http.DeleteAsync($"api/v1/Files/{Item.Id}");
        }
        catch (HttpRequestException e)
        {
            actionStatusMessage = $"Network request failed: {e.Message}";
            processingAction = false;
            await InvokeAsync(StateHasChanged);
            return;
        }

        processingAction = false;

        if (!result.IsSuccessStatusCode)
        {
            var content = await result.Content.ReadAsStringAsync();
            actionStatusMessage = $"Error, server responded with: {content}, {result.StatusCode}";

            await InvokeAsync(StateHasChanged);
        }
        else
        {
            actionStatusMessage = "This file is now in Trash, but can be restored before it is fully cleared " +
                "from storage automatically after a delay. Only the file owner will see this file in the trash. " +
                "If you are not the file owner you can still restore it as long as you do not close the " +
                "current panel.";
            actionStatusMessageType = SiteNoticeType.Warning;

            await InvokeAsync(StateHasChanged);

            await FetchDeleteInfo(Item.Id);
        }
    }

    private async void RestoreItem(string? customPath)
    {
        processingAction = true;
        actionStatusMessage = null;
        actionStatusMessageType = SiteNoticeType.Danger;
        await InvokeAsync(StateHasChanged);

        HttpResponseMessage result;

        try
        {
            result = await Http.PostAsync($"api/v1/Files/{Item.Id}/restore", new FormUrlEncodedContent(
                new []
                {
                    new KeyValuePair<string, string?>("customPath", customPath),
                }));
        }
        catch (HttpRequestException e)
        {
            actionStatusMessage = $"Network request failed: {e.Message}";
            processingAction = false;
            await InvokeAsync(StateHasChanged);
            return;
        }

        processingAction = false;
        var content = await result.Content.ReadAsStringAsync();

        if (!result.IsSuccessStatusCode)
        {
            actionStatusMessage = $"Error, server responded with: {content}, {result.StatusCode}";

            await InvokeAsync(StateHasChanged);

            if (result.StatusCode == HttpStatusCode.Conflict)
            {
                await OfferRestoreToDifferentFolder(content,
                    customPath ?? loadedDeleteInfo?.OriginalPath ?? "unknown");
            }
        }
        else
        {
            actionStatusMessage = "This file is now restored to: " + content;
            actionStatusMessageType = SiteNoticeType.Success;
            showAlternativeRestorePath = false;
        }

        await InvokeAsync(StateHasChanged);
    }

    private void ToggleMove()
    {
        if (showMoveControls)
        {
            showMoveControls = false;
        }
        else
        {
            showMoveControls = true;
            targetMovePath = null;
        }
    }

    private void BrowseMoveFolder(string? folder)
    {
        targetMovePath = folder;
    }

    private async void PerformMove()
    {
        processingAction = true;
        actionStatusMessage = null;
        actionStatusMessageType = SiteNoticeType.Danger;
        await InvokeAsync(StateHasChanged);

        HttpResponseMessage result;

        try
        {
            result = await Http.PostAsJsonAsync($"api/v1/Files/{Item.Id}/move", targetMovePath ?? string.Empty);
        }
        catch (HttpRequestException e)
        {
            actionStatusMessage = $"Network request failed: {e.Message}";
            processingAction = false;
            await InvokeAsync(StateHasChanged);
            return;
        }

        processingAction = false;
        var content = await result.Content.ReadAsStringAsync();

        if (!result.IsSuccessStatusCode)
        {
            actionStatusMessage = $"Error, server responded with: {content}, {result.StatusCode}";
        }
        else
        {
            actionStatusMessage = "This file was moved to: " + content;
            actionStatusMessageType = SiteNoticeType.Primary;
            showMoveControls = false;
        }

        await InvokeAsync(StateHasChanged);
    }

    private async Task OfferRestoreToDifferentFolder(string errorContent, string triedRestorePath)
    {
        var parameters = new ModalParameters
        {
            { nameof(ConfirmFileRestoreRetry.Name), Item.Name.Truncate() },
            { nameof(ConfirmFileRestoreRetry.TriedPath), triedRestorePath },
            { nameof(ConfirmFileRestoreRetry.ErrorMessage), errorContent },
        };

        var modal = Modal.Show<ConfirmFileRestoreRetry>("Restore to previous location failed", parameters);

        var result = await modal.Result;

        if (result.Cancelled)
            return;

        // Show the controls to retry the restore to a different place. This is not in the modal itself as having
        // a table in it causes an error
        showAlternativeRestorePath = true;
        newRestorePath = null;

        await InvokeAsync(StateHasChanged);
    }

    private void ChangeNewRestorePath(string? newPath)
    {
        newRestorePath = newPath;
    }

    private void CancelRetryRestore()
    {
        showAlternativeRestorePath = false;
    }

}
