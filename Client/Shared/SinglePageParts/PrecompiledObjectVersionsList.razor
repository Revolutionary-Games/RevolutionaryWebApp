@inject HttpClient Http
@inject NavigationManager NavManager
@inject IJSRuntime JS
@inject ComponentUrlHelper URLHelper
@inject NotificationHandler NotificationHandler
@inject CurrentUserInfo CurrentUserInfo
@using DevCenterCommunication.Models.Enums
@using RevolutionaryWebApp.Shared
@using DevCenterCommunication.Models
@using System.Net
@using System.Net.Http
@using System.Text
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Routing
@using Microsoft.JSInterop
@using SharedBase.Utilities
@using RevolutionaryWebApp.Client.Models
@using RevolutionaryWebApp.Client.Services
@using RevolutionaryWebApp.Client.Shared
@using RevolutionaryWebApp.Client.Utilities
@using RevolutionaryWebApp.Shared.Models
@using RevolutionaryWebApp.Shared.Models.Enums
@inherits RevolutionaryWebApp.Client.Shared.PaginatedPage<PrecompiledObjectVersionDTO>

@if (!string.IsNullOrEmpty(Error))
{
    <div class="alert alert-danger" role="alert">
        @Error
    </div>
}
else
{
    <StatusMessageShower Message="@statusMessage" Type="@statusMessageType" OnClosed="@ClearStatusMessage"/>

    <PaginatedTable ShowPaginator="@(Data != null)" CurrentPage="@Data?.CurrentPage" PageCount="@Data?.PageCount"
                    OnPageChanged="async e => await ChangePage(e)"
                    OnSortChanged="async column => await ChangeSort(column)"
                    GetSortClass="@SortClass"
                    ShowContentSpinner="@VisibleFetchInProgress"
                    Columns="@columns" UseNonFixedColumns="@true"
                    ShowNoContent="@NoItemsFound">
        @if (Data != null)
        {
            @foreach (var item in Data.Results)
            {
                if (resourceStatus.IsDeleted(item.Id))
                    continue;

                <tr @key="item.Id">
                    <th scope="row">@item.Version</th>
                    <td>@item.Platform</td>
                    <td>@ConvertTagsForDisplay(item.Tags)</td>
                    <td><RecentTimeShortener Time="@item.CreatedAt"/></td>
                    <td>
                        @if (item.Uploaded)
                        {
                            <span>yes</span>
                        }
                        else
                        {
                            <span class="badge badge-danger">no</span>
                        }
                    </td>

                    <td>@item.Size.BytesToMiB()</td>
                    <td>
                        @if (item.LastDownload != null)
                        {
                            <RecentTimeShortener Time="@item.LastDownload.Value"/>
                        }
                    </td>
                    <td>
                        @if(CurrentUserInfo.LoggedIn)
                        {
                            <UsernameDisplayer UserId="@item.CreatedById"/>
                        }
                    </td>
                    <td>
                        <Button Small="@true" ButtonStyle="primary"
                                Enabled="@(item.Uploaded && !IsProcessingItem(item))"
                                OnPressed="@(() => RedirectToDownloadUrl(item))">
                            Download
                        </Button>

                        <AccessLimited RequiredAccess="GroupType.Developer" AutoRedirectIfNotLoggedIn="@false">
                            <Button Small="@true" ButtonStyle="danger" Enabled="@CanDelete(item)"
                                    OnPressed="@(() => AskDeleteConfirm(item))" Spinner="@IsProcessingItem(item)">
                                Delete
                            </Button>
                        </AccessLimited>
                    </td>
                </tr>
            }
        }
    </PaginatedTable>

    <p>Note: the above list doesn't update without refresh</p>
}

<p>(*) Tags explanation key:</p>
<table class="table table-bordered col-12">
    <thead>
    <tr><th>Abbreviation Letter</th><th>Explanation</th></tr>
    </thead>
    @foreach (var entry in TagDisplayMapping)
    {
        <tr>
            <td>@entry.Value.Letter</td>
            <td>@entry.Value.Explanation</td>
        </tr>
    }
</table>

@code {

    private static readonly Dictionary<PrecompiledTag, (char Letter, string Explanation)> TagDisplayMapping = new()
    {
        {PrecompiledTag.Debug,  ('D', "Debug mode binary")},
    };

    // TODO: when not logged in hide the "created by" column entirely as it doesn't have any data
    private readonly List<TableColumn> columns = new()
    {
        new TableColumn("Version", true),
        new TableColumn("Platform", true),
        new TableColumn("Tags (*)", false),
        new TableColumn("Created At", true, "CreatedAt"),
        new TableColumn("Uploaded", false),
        new TableColumn("Size", false),
        new TableColumn("Last Download", false),
        new TableColumn("Created By", false),
        new TableColumn("Actions", false),
    };

    private readonly ClientSideResourceStatus<DeletedResourceStatus> resourceStatus = new();

    private readonly StringBuilder tagDisplayBuilder = new();

    private string? statusMessage;
    private SiteNoticeType statusMessageType;

    [Parameter]
    [EditorRequired]
    public long ObjectId { get; set; }

    [CascadingParameter]
    public IModalService Modal { get; set; } = null!;

    public PrecompiledObjectVersionsList() : base(new SortHelper("CreatedAt", SortDirection.Descending))
    {
        DefaultPageSize = 100;
    }

    public override Task SetParametersAsync(ParameterView parameters)
    {
        this.SetParametersFromQueryString(NavManager);

        return base.SetParametersAsync(parameters);
    }

    protected override Task<PagedResult<PrecompiledObjectVersionDTO>?> StartQuery(Dictionary<string, string?> requestParams)
    {
        return Http.GetFromJsonAsync<PagedResult<PrecompiledObjectVersionDTO>>(
            QueryHelpers.AddQueryString($"api/v1/PrecompiledObject/{ObjectId}/versions", requestParams));
    }

    protected override async Task OnQuerySent(Dictionary<string, string?> requestParams)
    {
        await URLHelper.UpdateUrlHistoryIfChanged(requestParams);
    }

    private bool CanDelete(PrecompiledObjectVersionDTO version)
    {
        if (IsProcessingItem(version))
            return false;

        if (CurrentUserInfo.HasGroup(GroupType.Admin) || version.CreatedById == CurrentUserInfo.Info?.Id)
            return true;

        return false;
    }

    private async void AskDeleteConfirm(PrecompiledObjectVersionDTO version)
    {
        var parameters = new ModalParameters
        {
            {
                nameof(ConfirmDelete.Name),
                $"{version.OwnedById}:{version.Version}:{version.Platform}:{ConvertTagsForDisplay(version.Tags)}"
            },
        };

        var modal = Modal.Show<ConfirmDelete>("Delete this precompiled object version?", parameters);

        var result = await modal.Result;

        if (result.Cancelled)
            return;

        await ConfirmDeleteVersion(version);
    }

    private async Task ConfirmDeleteVersion(PrecompiledObjectVersionDTO version)
    {
        SetProcessing(version, true);
        statusMessage = null;
        statusMessageType = SiteNoticeType.Danger;
        await InvokeAsync(StateHasChanged);

        HttpResponseMessage result;

        try
        {
            result = await Http.DeleteAsync(
                $"api/v1/PrecompiledObject/{version.OwnedById}/versions/{version.Version}/" +
                    $"{(int)version.Platform}/{(int)version.Tags}");
        }
        catch (HttpRequestException e)
        {
            statusMessage = $"Network request failed: {e.Message}";
            SetProcessing(version, false);
            await InvokeAsync(StateHasChanged);
            return;
        }

        SetProcessing(version, false);

        if (!result.IsSuccessStatusCode)
        {
            var content = await result.Content.ReadAsStringAsync();
            statusMessage = $"Error, server responded with: {content}, {result.StatusCode}";
        }
        else
        {
            statusMessage = "Precompiled object version has been queued to be deleted in a few minutes";
            statusMessageType = SiteNoticeType.Danger;
            resourceStatus.SetDeletedStatus(version.Id);
        }

        await InvokeAsync(StateHasChanged);
    }

    private string ConvertTagsForDisplay(PrecompiledTag tag)
    {
        // To reduce visual clutter, empty tags are empty
        if (tag == PrecompiledTag.None)
            return string.Empty;

        tagDisplayBuilder.Clear();

        var builtTag = PrecompiledTag.None;

        foreach (var entry in TagDisplayMapping)
        {
            if ((tag & entry.Key) != 0)
            {
                builtTag |= entry.Key;
                tagDisplayBuilder.Append(entry.Value.Letter);
            }
        }

        if (builtTag != tag)
            tagDisplayBuilder.Append(" + UNKNOWN");

        return tagDisplayBuilder.ToString();
    }

    private async void RedirectToDownloadUrl(PrecompiledObjectVersionDTO version)
    {
        // Need to fetch the download URL to redirect to first (as redirecting to the primary URL wouldn't work for
        // users with cookies)
        var url = await GetDownloadLink(version);

        if (string.IsNullOrEmpty(url))
        {
            return;
        }

        NavManager.NavigateTo(url);
    }

    private async Task<string> GetDownloadLink(PrecompiledObjectVersionDTO version)
    {
        SetProcessing(version, true);
        statusMessage = null;
        statusMessageType = SiteNoticeType.Danger;
        await InvokeAsync(StateHasChanged);

        HttpResponseMessage result;

        try
        {
            result = await Http.GetAsync(
                $"api/v1/PrecompiledObject/{version.OwnedById}/versions/{version.Version}/" +
                    $"{(int)version.Platform}/{(int)version.Tags}/link");
        }
        catch (HttpRequestException e)
        {
            statusMessage = $"Network request failed: {e.Message}";
            SetProcessing(version, false);
            await InvokeAsync(StateHasChanged);
            return string.Empty;
        }

        SetProcessing(version, false);
        var content = await result.Content.ReadAsStringAsync();

        if (!result.IsSuccessStatusCode)
        {
            statusMessage = $"Error, server responded with: {content}, {result.StatusCode}";
            await InvokeAsync(StateHasChanged);
            return string.Empty;
        }

        // Prevent button being stuck on
        await InvokeAsync(StateHasChanged);
        return content;
    }

    private bool IsProcessingItem(PrecompiledObjectVersionDTO item)
    {
        if (resourceStatus.GetStatus(item.Id).Processing)
            return true;

        return false;
    }

    private void SetProcessing(PrecompiledObjectVersionDTO item, bool processing)
    {
        resourceStatus.GetStatus(item.Id).Processing = processing;
    }

    private void ClearStatusMessage()
    {
        statusMessage = null;
    }
}
