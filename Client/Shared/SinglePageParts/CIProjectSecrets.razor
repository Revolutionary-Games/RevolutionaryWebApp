@inject HttpClient Http
@inject NotificationHandler NotificationHandler
@using RevolutionaryWebApp.Shared
@using RevolutionaryWebApp.Shared.Notifications
@using System.Threading
@using RevolutionaryWebApp.Client.Models
@using RevolutionaryWebApp.Client.Services
@using RevolutionaryWebApp.Client.Utilities
@using RevolutionaryWebApp.Shared.Forms
@using RevolutionaryWebApp.Shared.Models
@using RevolutionaryWebApp.Shared.Models.Enums
@implements RevolutionaryWebApp.Client.Services.INotificationHandler<CIProjectSecretsUpdated>
@inherits ListDataPage<RevolutionaryWebApp.Shared.Models.CISecretDTO>

@if (!string.IsNullOrEmpty(Error))
{
    <div class="alert alert-danger" role="alert">
        @Error
    </div>
}
else
{
    <StatusMessageShower Message="@statusMessage" Type="@statusMessageType" />

    <SortableTable ShowLoading="@(Data == null)"
                   OnSortChanged="@(async column => await ChangeSort(column))"
                   GetSortClass="@SortClass"
                   ShowContentSpinner="@VisibleFetchInProgress"
                   Columns="@columns"
                   ShowNoContent="@NoItemsFound">
        @if (Data != null)
        {
            @foreach (var item in Data)
            {
                if (resourceStatus.IsDeleted(item.CiSecretId))
                    continue;

                <tr @key="item.CiSecretId">
                    <th scope="row">@item.SecretName</th>
                    <td>@item.UsedForBuildTypes</td>
                    <td>@item.CreatedAt.ToLocalTime().ToString("G")</td>
                    <td>
                        <AdminResourceDeleteButtons Deleted="@false" Name="@item.SecretName" Id="@item.CiSecretId"
                                                    ButtonClass="btn-sm" UsesSoftDelete="false"
                                                    DeleteURLBase="@($"api/v1/CISecrets/{ProjectId}")"
                                                    DeletePromptTitle="Delete this secret?"
                                                    OnDeleted="@(() =>
                                                                   resourceStatus.SetDeletedStatus(item.CiSecretId))"
                                                    CustomErrorDisplay="@SetStatusMessage" />
                    </td>
                </tr>
            }
        }
    </SortableTable>

    @if (!showNewForm)
    {
        <StatusMessageShower Message="@createMessage" Type="@createMessageType" />
    }

    <Button class="mb-3 me-1" ButtonStyle="success" OnPressed="@ToggleCreateNew" Enabled="@(!processingNewForm)">
        New
    </Button>

    @if (showNewForm)
    {
        <form>
            <div class="row">
                <div class="mb-3 col-md-6">
                    <label class="form-label" for="newSecretName">Secret Name</label>
                    <input type="text" class="form-control" id="newSecretName" @bind="newSecretName"
                           @bind:event="oninput">
                </div>
                <div class="mb-3 col-md-6">
                    <label class="me-1" for="newSecretType">Type</label>
                    <select class="form-select" id="newSecretType" @bind="newSecretType">
                        @foreach (var name in Enum.GetNames<CISecretType>())
                        {
                            <option value="@name">@name</option>
                        }
                    </select>
                </div>
            </div>
            <div class="row">
                <label class="form-label" for="newSecretContent">Secret Content</label>
                <input type="text" class="form-control" id="newSecretContent" @bind="newSecretContent">
            </div>

            <StatusMessageShower Message="@createMessage" Type="@createMessageType" />
            <Button class="my-1" Enabled="@CanCreateNew" OnPressed="@CreateNew" Spinner="@processingNewForm">
                Create
            </Button>
        </form>
    }
}

<hr />

@code {

    private readonly List<TableColumn> columns = new()
    {
        new TableColumn("Name", true, "SecretName"),
        new TableColumn("Type", false),
        new TableColumn("Created At", true, "CreatedAt"),
        new TableColumn("Actions", false),
    };

    private readonly ClientSideResourceStatus<DeletedResourceStatus> resourceStatus = new();

    private string? statusMessage;
    private SiteNoticeType statusMessageType = SiteNoticeType.Danger;

    private string? createMessage;
    private SiteNoticeType createMessageType;

    private bool showNewForm;
    private bool processingNewForm;
    private string? newSecretName;
    private string? newSecretContent;
    private CISecretType newSecretType;

    [Parameter]
    public long ProjectId { get; set; }

    private bool CanCreateNew => !processingNewForm && !string.IsNullOrEmpty(newSecretName) && newSecretName.Length > 1;

    public CIProjectSecrets() : base(new SortHelper("SecretName", SortDirection.Ascending))
    {
    }

    protected override async Task OnInitializedAsync()
    {
        await NotificationHandler.Register(this);
        await base.OnInitializedAsync();
    }

    public Task Handle(CIProjectSecretsUpdated notification, CancellationToken cancellationToken)
    {
        return HandleItemNotification(notification);
    }

    public void GetWantedListenedGroups(IUserGroupData currentUserGroups, ISet<string> groups)
    {
        groups.Add(NotificationGroups.CIProjectSecretsUpdatedPrefix + ProjectId);
    }

    public override async ValueTask DisposeAsync()
    {
        await base.DisposeAsync();
        await NotificationHandler.Unregister(this);
    }

    protected override Task<List<CISecretDTO>?> StartQuery(Dictionary<string, string?> requestParams)
    {
        return Http.GetFromJsonAsync<List<CISecretDTO>>(
            QueryHelpers.AddQueryString($"api/v1/CISecrets/{ProjectId}", requestParams));
    }

    private void SetStatusMessage(string message, SiteNoticeType noticeType)
    {
        statusMessage = message;
        statusMessageType = noticeType;
        StateHasChanged();
    }

    private void ToggleCreateNew()
    {
        if (showNewForm)
        {
            showNewForm = false;
        }
        else
        {
            showNewForm = true;
            createMessage = null;

            // Reset form status
            newSecretName = null;
            newSecretContent = null;
            newSecretType = CISecretType.SafeOnly;
        }

        StateHasChanged();
    }

    private async void CreateNew()
    {
        processingNewForm = true;
        createMessage = null;
        createMessageType = SiteNoticeType.Danger;
        await InvokeAsync(StateHasChanged);

        HttpResponseMessage result;

        try
        {
            result = await Http.PostAsJsonAsync($"api/v1/CISecrets/{ProjectId}", new CreateCISecretForm
            {
                SecretName = newSecretName!,
                SecretContent = newSecretContent ?? string.Empty,
                UsedForBuildTypes = newSecretType,
            });
        }
        catch (HttpRequestException e)
        {
            createMessage = $"Network request failed: {e.Message}";
            processingNewForm = false;
            await InvokeAsync(StateHasChanged);
            return;
        }

        processingNewForm = false;

        if (!result.IsSuccessStatusCode)
        {
            var content = await result.Content.ReadAsStringAsync();

            createMessage = $"Error, server responded with: {content}, {result.StatusCode}";
        }
        else
        {
            createMessage = "New secret created";
            createMessageType = SiteNoticeType.Info;

            showNewForm = false;
        }

        await InvokeAsync(StateHasChanged);
    }

}
