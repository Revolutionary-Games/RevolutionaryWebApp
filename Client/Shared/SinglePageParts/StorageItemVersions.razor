@inject HttpClient Http
@inject NavigationManager NavManager
@inject NotificationHandler NotificationHandler
@inject CurrentUserInfo CurrentUserInfo
@using RevolutionaryWebApp.Shared
@using RevolutionaryWebApp.Shared.Notifications
@using System.Threading
@using RevolutionaryWebApp.Client.Services
@using RevolutionaryWebApp.Shared.Models
@using System.Text.Json
@using DevCenterCommunication.Models
@using SharedBase.Utilities
@using RevolutionaryWebApp.Client.Models
@using RevolutionaryWebApp.Client.Utilities
@using RevolutionaryWebApp.Shared.Models.Enums
@using RevolutionaryWebApp.Shared.Utilities
@implements RevolutionaryWebApp.Client.Services.INotificationHandler<StorageItemVersionListUpdated>
@inherits PaginatedPage<RevolutionaryWebApp.Shared.Models.StorageItemVersionInfo>

@if (!string.IsNullOrEmpty(Error))
{
    <div class="alert alert-danger" role="alert">
        @Error
    </div>
}
else
{
    <StatusMessageShower Message="@statusMessage" Type="@statusMessageType"/>

    <PaginatedTable ShowPaginator="@(Data != null)" CurrentPage="@Data?.CurrentPage" PageCount="@Data?.PageCount"
                    OnPageChanged="async e => await ChangePage(e)"
                    OnSortChanged="async column => await ChangeSort(column)"
                    GetSortClass="@SortClass"
                    ShowContentSpinner="@VisibleFetchInProgress"
                    Columns="@(ExpandedView ? expandedColumns : columns)"
                    ShowNoContent="@NoItemsFound"
                    UseNonFixedColumns="@true">
        @if (Data != null)
        {
            @foreach (var item in Data.Results)
            {
                <tr @key="item.Id" class="@(item.Deleted ? "bg-danger" : string.Empty)">
                    <th scope="row">
                        <a href="@GetDownloadURL(item.Version)" target="_blank">@item.Version</a>
                    </th>

                    @if (!ExpandedView)
                    {
                        <td>@(item.Size != null ? item.Size.Value.BytesToMiB() : "unknown")</td>
                        <td>
                            <UsernameDisplayer UserId="@item.UploadedById"/>
                        </td>
                        <td>
                            @if (item.Keep || item.Protected)
                            {
                                <span class="badge bg-success">yes</span>
                            }
                        </td>
                        <td>@(!item.Uploading)</td>
                        <td>
                            <RecentTimeShortener Time="@item.UpdatedAt"/>
                        </td>
                        <td>
                            @if (!item.Keep || item.Deleted)
                            {
                                @DeleteOrRestoreButton(item)
                            }
                        </td>
                    }
                    else
                    {
                        <td>@(item.Size != null ? item.Size.Value.BytesToMiB() : "unknown")</td>
                        <td>
                            <UsernameDisplayer UserId="@item.UploadedById" ShowNavLink="@true"/>
                        </td>
                        <td>
                            @if (item.Keep)
                            {
                                <span class="badge bg-success">yes</span>
                            }
                        </td>
                        <td>
                            @if (item.Protected)
                            {
                                <span class="badge bg-success">yes</span>
                            }
                        </td>
                        <td>@(!item.Uploading)</td>
                        <td>
                            <RecentTimeShortener Time="@item.UpdatedAt"/>
                        </td>
                        <td>
                            <RecentTimeShortener Time="@item.CreatedAt"/>
                        </td>
                        <td>
                            @DeleteOrRestoreButton(item)

                            @if (item.Keep)
                            {
                                <Button Enabled="@CanChangeMarkedStatus(item)" Spinner="@IsProcessingItem(item)"
                                        OnPressed="@(async () => await UnmarkVersionKept(item))" ButtonStyle="warning"
                                        class="btn-sm ms-1">
                                    Unmark Kept
                                </Button>
                            }
                            else
                            {
                                <Button Enabled="@CanChangeMarkedStatus(item)" Spinner="@IsProcessingItem(item)"
                                        OnPressed="@(async () => await MarkVersionKept(item))" ButtonStyle="primary"
                                        class="btn-sm ms-1">
                                    Keep
                                </Button>
                            }
                        </td>
                    }
                </tr>
            }
        }
    </PaginatedTable>
}

@code {

    private readonly List<TableColumn> columns = new()
    {
        new TableColumn("Version", true),
        new TableColumn("Size", false),
        new TableColumn("Uploader", false),
        new TableColumn("Keep", true),
        new TableColumn("Uploaded", false),
        new TableColumn("Updated At", true, "UpdatedAt"),
        new TableColumn("Actions", false),
    };

    private readonly List<TableColumn> expandedColumns = new()
    {
        new TableColumn("Version", true),
        new TableColumn("Size", false),
        new TableColumn("Uploader", false),
        new TableColumn("Keep", true),
        new TableColumn("Protected", true),
        new TableColumn("Uploaded", false),
        new TableColumn("Updated At", true, "UpdatedAt"),
        new TableColumn("Created At", true, "CreatedAt"),
        new TableColumn("Actions", false),
    };

    private readonly ClientSideResourceStatus<DeletedResourceStatus> resourceStatus = new();

    private string? statusMessage;
    private SiteNoticeType statusMessageType = SiteNoticeType.Danger;

    [Parameter]
    [EditorRequired]
    public StorageItemDTO StorageItem { get; set; } = null!;

    [Parameter]
    public bool ExpandedView { get; set; }

    public long StorageItemId => StorageItem.Id;

    public StorageItemVersions() : base(new SortHelper("Version", SortDirection.Descending))
    {
    }

    protected override async Task OnInitializedAsync()
    {
        await NotificationHandler.Register(this);
        await base.OnInitializedAsync();
    }

    public Task Handle(StorageItemVersionListUpdated notification, CancellationToken cancellationToken)
    {
        return HandleItemNotification(notification);
    }

    public void GetWantedListenedGroups(IUserGroupData currentUserGroups, ISet<string> groups)
    {
        // TODO: notifications for this
        // groups.Add(NotificationGroups.LFSListUpdated + StorageItemId.ToString() );
    }

    public override async ValueTask DisposeAsync()
    {
        await base.DisposeAsync();
        await NotificationHandler.Unregister(this);
    }

    protected override Task<PagedResult<StorageItemVersionInfo>?> StartQuery(Dictionary<string, string?> requestParams)
    {
        return Http.GetFromJsonAsync<PagedResult<StorageItemVersionInfo>>(
            QueryHelpers.AddQueryString($"api/v1/Files/{StorageItemId}/versions", requestParams));
    }

    private string GetDownloadURL(int version)
    {
        var urlParams = new Dictionary<string, string?> { ["version"] = version.ToString() };

        return QueryHelpers.AddQueryString(new Uri(new Uri(NavManager.BaseUri),
            $"api/v1/download/{StorageItemId}").ToString(), urlParams);
    }

    private bool CanChangeDeleteStatus(StorageItemVersionInfo item)
    {
        if (IsProcessingItem(item))
            return false;

        if (item.Protected)
            return false;

        if (item.Keep && CurrentUserInfo.Info?.Id != StorageItem.OwnerId &&
            CurrentUserInfo.Groups?.HasGroup(GroupType.Admin) != true)
        {
            return false;
        }

        if (StorageItem.Important)
            return false;

        if (!StorageItem.WriteAccess.IsAccessibleTo(CurrentUserInfo.Groups, CurrentUserInfo.Info?.Id,
            StorageItem.OwnerId))
        {
            return false;
        }

        return true;
    }

    private bool CanChangeMarkedStatus(StorageItemVersionInfo item)
    {
        if (IsProcessingItem(item))
            return false;

        if (item.Deleted)
            return false;

        if (item.Keep && CurrentUserInfo.Info?.Id != StorageItem.OwnerId &&
            CurrentUserInfo.Groups?.HasGroup(GroupType.Admin) != true)
        {
            if(item.UploadedById == null || item.UploadedById != CurrentUserInfo.Info?.Id)
                return false;
        }

        if (!StorageItem.WriteAccess.IsAccessibleTo(CurrentUserInfo.Groups, CurrentUserInfo.Info?.Id,
            StorageItem.OwnerId))
        {
            return false;
        }

        return true;
    }

    private bool IsProcessingItem(StorageItemVersionInfo item)
    {
        if (resourceStatus.GetStatus(item.Version).Processing)
            return true;

        return false;
    }

    private void SetProcessing(StorageItemVersionInfo item, bool processing)
    {
        resourceStatus.GetStatus(item.Version).Processing = processing;
    }

    private async Task RestoreVersion(StorageItemVersionInfo item)
    {
        SetProcessing(item, true);
        statusMessage = null;
        statusMessageType = SiteNoticeType.Danger;
        await InvokeAsync(StateHasChanged);

        HttpResponseMessage result;

        try
        {
            result = await Http.PostAsync($"api/v1/Files/{StorageItemId}/versions/{item.Version}/restore",
                new StringContent(string.Empty));
        }
        catch (HttpRequestException e)
        {
            statusMessage = $"Network request failed: {e.Message}";
            SetProcessing(item, false);
            await InvokeAsync(StateHasChanged);
            return;
        }

        SetProcessing(item, false);

        if (!result.IsSuccessStatusCode)
        {
            var content = await result.Content.ReadAsStringAsync();
            statusMessage = $"Error, server responded with: {content}, {result.StatusCode}";
        }
        else
        {
            statusMessage = $"Version {item.Version} restored";
            statusMessageType = SiteNoticeType.Success;

            // For now we manually modify the deleted status here
            // TODO: https://github.com/Revolutionary-Games/RevolutionaryWebApp/issues/632
            item.Deleted = false;
        }

        await InvokeAsync(StateHasChanged);
    }

    private async Task DeleteVersion(StorageItemVersionInfo item)
    {
        SetProcessing(item, true);
        statusMessage = null;
        statusMessageType = SiteNoticeType.Danger;
        await InvokeAsync(StateHasChanged);

        HttpResponseMessage result;

        try
        {
            result = await Http.DeleteAsync($"api/v1/Files/{StorageItemId}/versions/{item.Version}");
        }
        catch (HttpRequestException e)
        {
            statusMessage = $"Network request failed: {e.Message}";
            SetProcessing(item, false);
            await InvokeAsync(StateHasChanged);
            return;
        }

        SetProcessing(item, false);

        if (!result.IsSuccessStatusCode)
        {
            var content = await result.Content.ReadAsStringAsync();
            statusMessage = $"Error, server responded with: {content}, {result.StatusCode}";
        }
        else
        {
            statusMessage = $"Version {item.Version} deleted. It can still be restored. " +
                "It will be permanently deleted after some time.";
            statusMessageType = SiteNoticeType.Primary;

            item.Deleted = true;
        }

        await InvokeAsync(StateHasChanged);
    }

    private async Task MarkVersionKept(StorageItemVersionInfo item)
    {
        SetProcessing(item, true);
        statusMessage = null;
        statusMessageType = SiteNoticeType.Danger;
        await InvokeAsync(StateHasChanged);

        HttpResponseMessage result;

        try
        {
            result = await Http.PostAsync($"api/v1/Files/{StorageItemId}/versions/{item.Version}/keep",
                new StringContent(string.Empty));
        }
        catch (HttpRequestException e)
        {
            statusMessage = $"Network request failed: {e.Message}";
            SetProcessing(item, false);
            await InvokeAsync(StateHasChanged);
            return;
        }

        SetProcessing(item, false);

        if (!result.IsSuccessStatusCode)
        {
            var content = await result.Content.ReadAsStringAsync();
            statusMessage = $"Error, server responded with: {content}, {result.StatusCode}";
        }
        else
        {
            statusMessage = $"Version {item.Version} is now kept. It will not be automatically deleted even if " +
                "there are newer versions uploaded.";
            statusMessageType = SiteNoticeType.Primary;

            // TODO: https://github.com/Revolutionary-Games/RevolutionaryWebApp/issues/632
            item.Keep = true;
        }

        await InvokeAsync(StateHasChanged);
    }

    private async Task UnmarkVersionKept(StorageItemVersionInfo item)
    {
        SetProcessing(item, true);
        statusMessage = null;
        statusMessageType = SiteNoticeType.Danger;
        await InvokeAsync(StateHasChanged);

        HttpResponseMessage result;

        try
        {
            result = await Http.DeleteAsync($"api/v1/Files/{StorageItemId}/versions/{item.Version}/keep");
        }
        catch (HttpRequestException e)
        {
            statusMessage = $"Network request failed: {e.Message}";
            SetProcessing(item, false);
            await InvokeAsync(StateHasChanged);
            return;
        }

        SetProcessing(item, false);

        if (!result.IsSuccessStatusCode)
        {
            var content = await result.Content.ReadAsStringAsync();
            statusMessage = $"Error, server responded with: {content}, {result.StatusCode}";
        }
        else
        {
            statusMessage = $"Version {item.Version} is no longer kept";
            statusMessageType = SiteNoticeType.Primary;

            item.Keep = false;
        }

        await InvokeAsync(StateHasChanged);
    }

    private RenderFragment DeleteOrRestoreButton(StorageItemVersionInfo item)
    {
        if (item.Deleted)
        {
            return @<Button Enabled="@CanChangeDeleteStatus(item)" Spinner="@IsProcessingItem(item)"
                            OnPressed="@(async () => await RestoreVersion(item))" ButtonStyle="success" class="btn-sm">
                       Restore
                   </Button>;
        }

        return @<Button Enabled="@CanChangeDeleteStatus(item)" Spinner="@IsProcessingItem(item)"
                        OnPressed="@(async () => await DeleteVersion(item))" ButtonStyle="danger" class="btn-sm">
                   Delete
               </Button>;
    }

}

