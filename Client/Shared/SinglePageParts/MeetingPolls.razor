@inject HttpClient Http
@inject NotificationHandler NotificationHandler
@inject IJSRuntime JS
@using RevolutionaryWebApp.Shared
@using RevolutionaryWebApp.Shared.Notifications
@using System.Threading
@using System.Timers
@using RevolutionaryWebApp.Client.Models
@using RevolutionaryWebApp.Client.Services
@using RevolutionaryWebApp.Client.Utilities
@using RevolutionaryWebApp.Shared.Forms
@using RevolutionaryWebApp.Shared.Models
@using RevolutionaryWebApp.Shared.Models.Enums
@implements RevolutionaryWebApp.Client.Services.INotificationHandler<MeetingPollListUpdated>
@implements IDisposable
@inherits ListDataPage<RevolutionaryWebApp.Shared.Models.MeetingPollDTO>

@if (!string.IsNullOrEmpty(Error))
{
    <div class="alert alert-danger" role="alert">
        @Error
    </div>
}
else
{
    <StatusMessageShower Message="@statusMessage" Type="@statusMessageType" />

    @if (Data != null)
    {
        @foreach (var item in Data)
        {
            <div @key="item.PollId" class="mb-3">
                <h4>
                    Poll: @item.Title
                    @if (item.AutoCloseAt.HasValue && item.ClosedAt == null)
                    {
                        <span class="@($"badge {CountdownTimerBadgeClass(item)} ms-2")">
                            <CountdownTimer EndTime="@item.AutoCloseAt.Value" /> left
                        </span>
                    }
                </h4>

                @if (!string.IsNullOrEmpty(item.PollResults))
                {
                    var choiceData = GetOrSetupPollData(item);

                    var resultData = GetParsedResultsWithCache(item);

                    <div>
                        @* TODO: grab a graphs library and make nice result graphs *@
                        Results:
                        <ol>
                            @foreach (var result in resultData.Results)
                            {
                                <li><strong>@choiceData.Item2.Choices[result.ChoiceId].Name:</strong> @result.Votes</li>
                            }
                        </ol>
                    </div>

                    @if (resultData.TiebreakInFavourOf != null)
                    {
                        <p>
                            Tiebreak has been decided in favour of:
                            @choiceData.Item2.Choices[resultData.TiebreakInFavourOf.Value].Name
                        </p>
                    }

                    <div>
                        Total votes: @resultData.TotalVotes
                    </div>

                    <p>
                        Results computed at: @(item.PollResultsCreatedAt?.ToLocalTime().ToString("G")).
                        Poll's tiebreak type: @item.TiebreakType
                    </p>
                }

                @if (item.ClosedAt == null)
                {
                    var data = GetOrSetupPollData(item);

                    <p>Choices:</p>

                    <form>
                        @if (data.Item2.WeightedChoices != null)
                        {
                            var renderCount = GetNextRenderCount(item);

                            <div class="mb-1">
                                Rank one or more choices according to your preference, 1 being your most preferred,
                                and highest number your least preferred. More preference numbers to select become
                                available as you set your most preferred choices.
                            </div>

                            @* Don't apply reordering here based on what is the first choice as that's very confusing *@
                            @foreach (var choice in data.Item2.Choices)
                            {
                                var elementId = WeightedChoicePollElementId(item, choice.Key, renderCount);

                                <div class="row">
                                    <div class="mb-3 col-12">
                                        <label for="@elementId">@choice.Value.Name</label>
                                        <select @key="elementId" class="form-select" id="@elementId"
                                                value="@data.Item1[choice.Key].ChoiceNumber"
                                                @onchange="e => UpdatePollChoiceRank(
                                                choice.Value, e, item, data.Item1)">
                                            <option value="">No preference</option>
                                            @foreach (var number in GetPossibleWeightedChoiceNumbers(data.Item1))
                                            {
                                                <option value="@number">@(number).</option>
                                            }
                                        </select>
                                    </div>
                                </div>
                            }
                        }
                        else if (data.Item2.MultipleChoiceOption != null)
                        {
                            <div class="mb-1">
                                Select @data.Item2.MultipleChoiceOption.MinimumSelections to
                                @data.Item2.MultipleChoiceOption.MaximumSelections options below.
                            </div>

                            @foreach (var choice in data.Item2.Choices)
                            {
                                var elementId = $"poll{item.PollId}Choice{choice.Key}";

                                <div class="row">
                                    <div class="mb-3 col-12">
                                        <label for="@elementId">@choice.Value.Name</label>
                                        <input type="checkbox" id="@elementId"
                                               checked="@(data.Item1[choice.Key].ChoiceNumber != null)"
                                               @onchange="e => MultipleChoiceButtonChanged(choice.Value, e,
                                                data.Item1)" />
                                    </div>
                                </div>
                            }
                        }
                        else if (data.Item2.SingleChoiceOption != null)
                        {
                            <div class="mb-1">
                                Select your preferred choice below.
                            </div>

                            @foreach (var choice in data.Item2.Choices)
                            {
                                var elementId = $"poll{item.PollId}Choice{choice.Key}";

                                <div class="row">
                                    <div class="mb-3 col-12">
                                        <input type="radio" id="@elementId"
                                               checked="@(data.Item1[choice.Key].ChoiceNumber != null)"
                                               @onchange="e => SingleChoiceButtonChanged(choice.Value, e,
                                                data.Item1)" />
                                        <label for="@elementId">@choice.Value.Name</label>
                                    </div>
                                </div>
                            }
                        }
                        else
                        {
                            <div>Error: unknown poll type to vote in</div>
                        }

                        <p>Tiebreak type for this poll is: @item.TiebreakType</p>

                        @if (AlreadyVotedIn(item))
                        {
                            <p>You have already voted in this poll</p>
                        }

                        <Button Enabled="@(!IsRunningPollAction(item) && !AlreadyVotedIn(item))"
                                Spinner="@IsRunningPollAction(item)" ButtonStyle="primary" class="mb-1 me-1"
                                OnPressed="@(() => SendVotes(item))">
                            Vote
                        </Button>

                        <Button Enabled="@(!IsRunningPollAction(item) && !AlreadyVotedIn(item))"
                                ButtonStyle="warning" class="mb-1" OnPressed="@(() => ClearVotes(item))">
                            Clear Votes
                        </Button>
                    </form>
                }
                else
                {
                    <p>This poll closed at @item.ClosedAt.Value.ToLocalTime().ToString("G")</p>

                    @if (item.AutoCloseAt == null || item.ManuallyClosedById != null)
                    {
                        <p>This poll was manually closed by <UsernameDisplayer UserId="@item.ManuallyClosedById"/></p>
                    }
                }

                @if (CanEdit)
                {
                    <Button Enabled="@(item.ClosedAt == null && !IsRunningPollAction(item))"
                            Spinner="@IsRunningPollAction(item)"
                            ButtonStyle="danger" class="me-1" OnPressed="@(() => ClosePoll(item))">
                        Close Now
                    </Button>
                    <Button Enabled="@(item.ClosedAt != null && !IsRunningPollAction(item))"
                            Spinner="@IsRunningPollAction(item)"
                            ButtonStyle="secondary" OnPressed="@(() => RecomputePollResults(item))">
                        Recompute Results
                    </Button>
                }
            </div>
        }
    }

    <br />

    @if (!showNewForm)
    {
        <StatusMessageShower Message="@createMessage" Type="@createMessageType" />

        <Button class="mb-3 me-1" ButtonStyle="success" OnPressed="@(() => ShowNewForm(NewPollType.WeightedChoice))"
                Enabled="@CanEdit">
            New Weighted Choice (election)
        </Button>
        <Button class="mb-3 me-1" ButtonStyle="success" OnPressed="@(() => ShowNewForm(NewPollType.MultipleChoice))"
                Enabled="@CanEdit">
            New Multiple Choice
        </Button>
        <Button class="mb-3 me-1" ButtonStyle="success" OnPressed="@(() => ShowNewForm(NewPollType.SingleChoice))"
                Enabled="@CanEdit">
            New Single Choice
        </Button>
    }
    else
    {
        <form>
            <div class="row">
                <div class="mb-3 col-md-6">
                    <label for="newPollTitle">Title</label>
                    <input type="text" class="form-control" id="newPollTitle" @bind="newPollDTOData.Title"
                           @bind:event="oninput">
                </div>
                <div class="mb-3 col-md-6">
                    <label class="me-1" for="newTiebreakType">Tiebreak type</label>
                    <select class="form-select" id="newTiebreakType" @bind="newPollDTOData.TiebreakType">
                        @foreach (var name in Enum.GetNames<VotingTiebreakType>())
                        {
                            <option value="@name">@name</option>
                        }
                    </select>
                </div>
            </div>
            <div class="row">
                <div class="mb-3 col-12">
                    <label for="newAutoCloseInMinutes">Auto close in (minutes)</label>
                    <input type="number" min="2" max="60" step="1"
                           class="form-control" id="newAutoCloseInMinutes" @bind="newAutoCloseInMinutes">
                </div>
            </div>

            <div class="row">
                <div>Choices:</div>
            </div>

            @foreach (var item in newPollData.Choices)
            {
                var elementId = $"newPollChoiceName{item.Key}";

                <div class="row">
                    <div class="mb-3 col-md-10">
                        <input type="text" placeholder="Choice name..."
                               class="form-control" id="@elementId" @bind="item.Value.Name">
                    </div>

                    <div class="mb-3 col-md-2">
                        <Button ButtonStyle="warning" class="form-control" OnPressed="@(() => RemoveChoice(item.Key))">
                            Remove
                        </Button>
                    </div>
                </div>
            }

            <div class="row">
                <Button class="mb-3" Enabled="@(!processingNewForm)" OnPressed="@AddNewChoice">
                    Add Choice
                </Button>
            </div>

            @if (newPollData.MultipleChoiceOption != null)
            {
                <div class="mb-3 col-md-6">
                    <label class="me-1" for="newMinChoices">Minimum Number of Options Voters Can Choose</label>
                    <input type="number" min="0" max="@(newPollData.Choices.Count - 1)" step="1"
                           class="form-control" id="newMinChoices"
                           @bind="newPollData.MultipleChoiceOption.MinimumSelections">
                </div>

                <div class="mb-3 col-md-6">
                    <label class="me-1" for="newMaxChoices">Maximum Number Of Options</label>
                    <input type="number" min="1" max="@newPollData.Choices.Count" step="1"
                           class="form-control" id="newMaxChoices"
                           @bind="newPollData.MultipleChoiceOption.MaximumSelections">
                </div>
            }
            else if (newPollData.WeightedChoices != null)
            {
                <div class="mb-3 col-md-12">
                    <label class="me-1" for="newAllowEmpty">Can Votes Be Empty?</label>
                    <input type="checkbox" id="newAllowEmpty"
                           @bind="newPollData.WeightedChoices.CanSelectNone">
                </div>
            }
            else if (newPollData.SingleChoiceOption != null)
            {
                <div class="mb-3 col-md-12">
                    <label class="me-1" for="newAllowEmpty">Can Votes Be Empty?</label>
                    <input type="checkbox" id="newAllowEmpty"
                           @bind="newPollData.SingleChoiceOption.CanSelectNone">
                </div>
            }

            <StatusMessageShower Message="@createMessage" Type="@createMessageType" />
            <Button class="my-1 me-1" Enabled="@CanCreateNew" OnPressed="@CreateNew" Spinner="@processingNewForm">
                Create
            </Button>
            <Button class="my-1" OnPressed="@HideNewForm" ButtonStyle="secondary">
                Cancel
            </Button>
        </form>
    }
}

@code {
    private readonly ClientSideResourceStatus<PollResourceStatus> clientSideResourceStatus = new();
    private readonly System.Timers.Timer secondTimer;

    private string? statusMessage;
    private SiteNoticeType statusMessageType = SiteNoticeType.Danger;

    private string? createMessage;
    private SiteNoticeType createMessageType;

    private bool showNewForm;
    private bool processingNewForm;
    private int? newAutoCloseInMinutes;
    private MeetingPollDTO newPollDTOData = new();
    private PollData newPollData = new();

    [Parameter]
    public long MeetingId { get; set; }

    [Parameter]
    public bool CanEdit { get; set; }

    private bool CanCreateNew => !processingNewForm &&
        !string.IsNullOrEmpty(newPollDTOData.Title) && newPollData.Choices.Count > 1;

    private enum NewPollType
    {
        WeightedChoice,
        SingleChoice,
        MultipleChoice,
    }

    public MeetingPolls() : base(new SortHelper("PollId", SortDirection.Ascending))
    {
        secondTimer = new System.Timers.Timer(1000);
        secondTimer.Elapsed += CheckActivePollsTimer;
    }

    public void Dispose()
    {
        secondTimer.Dispose();
    }

    protected override async Task OnInitializedAsync()
    {
        await NotificationHandler.Register(this);
        await base.OnInitializedAsync();
    }

    public Task Handle(MeetingPollListUpdated notification, CancellationToken cancellationToken)
    {
        return HandleItemNotification(notification);
    }

    public void GetWantedListenedGroups(IUserGroupData currentUserGroups, ISet<string> groups)
    {
        groups.Add(NotificationGroups.MeetingPollListUpdatedPrefix + MeetingId);
    }

    public override async ValueTask DisposeAsync()
    {
        await base.DisposeAsync();
        await NotificationHandler.Unregister(this);
    }

    protected override Task<List<MeetingPollDTO>?> StartQuery(Dictionary<string, string?> requestParams)
    {
        return Http.GetFromJsonAsync<List<MeetingPollDTO>>(
            QueryHelpers.AddQueryString($"api/v1/Meetings/{MeetingId}/polls", requestParams));
    }

    protected override Task OnDataReceived()
    {
        secondTimer.Start();
        return base.OnDataReceived();
    }

    private void SetStatusMessage(string message, SiteNoticeType noticeType)
    {
        statusMessage = message;
        statusMessageType = noticeType;
        StateHasChanged();
    }

    private void HideNewForm()
    {
        showNewForm = false;
    }

    private void ShowNewForm(NewPollType newPollType)
    {
        showNewForm = true;
        createMessage = null;

        newAutoCloseInMinutes = 5;
        newPollDTOData = new MeetingPollDTO
        {
            MeetingId = MeetingId,
            // In association general meetings normal votes have the chairman as the tiebreak
            // This can be manually still edited as the poll type doesn't necessarily tell what is voted on, nor
            // if this is a general meeting or perhaps a board meeting
            TiebreakType = VotingTiebreakType.Chairman,
        };

        newPollData = new PollData
        {
            Choices = new Dictionary<int, PollData.PollChoice>
            {
                { 1, new PollData.PollChoice(1, "Choice 1") },
                { 2, new PollData.PollChoice(2, "Choice 2") },
            },
        };

        switch (newPollType)
        {
            case NewPollType.WeightedChoice:
                newPollData.WeightedChoices = new PollData.WeightedChoicesList();

                // In elections, which are usually where the weighted choice is used, random chance is the tiebreak
                newPollDTOData.TiebreakType = VotingTiebreakType.Random;

                break;
            case NewPollType.SingleChoice:
                newPollData.SingleChoiceOption = new PollData.SingleChoice
                {
                    CanSelectNone = false,
                };
                break;
            case NewPollType.MultipleChoice:
                newPollData.MultipleChoiceOption = new PollData.MultipleChoice
                {
                    MinimumSelections = 1,
                    MaximumSelections = 2,
                };
                break;
        }
    }

    private void AddNewChoice()
    {
        int maxId = newPollData.Choices.Values.Max(v => v.Id);

        ++maxId;

        newPollData.Choices.Add(maxId, new PollData.PollChoice(maxId, string.Empty));

        StateHasChanged();
    }

    private void RemoveChoice(int choiceId)
    {
        newPollData.Choices.Remove(choiceId);
    }

    private async void CreateNew()
    {
        processingNewForm = true;
        createMessage = null;
        createMessageType = SiteNoticeType.Danger;
        await InvokeAsync(StateHasChanged);

        HttpResponseMessage result;

        newPollDTOData.ParsedData = newPollData;

        if (newAutoCloseInMinutes != null)
            newPollDTOData.AutoCloseAt = DateTime.UtcNow + TimeSpan.FromMinutes(newAutoCloseInMinutes.Value);

        try
        {
            result = await Http.PostAsJsonAsync($"api/v1/Meetings/{MeetingId}/polls", newPollDTOData);
        }
        catch (HttpRequestException e)
        {
            createMessage = $"Network request failed: {e.Message}";
            processingNewForm = false;
            await InvokeAsync(StateHasChanged);
            return;
        }

        processingNewForm = false;

        if (!result.IsSuccessStatusCode)
        {
            var content = await result.Content.ReadAsStringAsync();

            createMessage = $"Error, server responded with: {content}, {result.StatusCode}";
        }
        else
        {
            createMessage = "New poll created";
            createMessageType = SiteNoticeType.Info;

            showNewForm = false;
        }

        await InvokeAsync(StateHasChanged);
    }

    private async Task SendVotes(MeetingPollDTO item)
    {
        SetProcessingStatus(item, true);
        // TODO: add own message holder here
        createMessage = null;
        createMessageType = SiteNoticeType.Danger;
        await InvokeAsync(StateHasChanged);

        HttpResponseMessage result;

        try
        {
            result = await Http.PostAsJsonAsync($"api/v1/Meetings/{MeetingId}/polls/{item.PollId}/vote",
                new PollVoteData
            {
                SelectedOptions = GetStatus(item).PollChoices!.Item1.AsEnumerable()
                    .Where(t => t.Value.ChoiceNumber != null)
                    .OrderBy(t => t.Value.ChoiceNumber)
                    .ThenBy(t => t.Key)
                    .Select(t => t.Key).ToList(),
            });
        }
        catch (HttpRequestException e)
        {
            createMessage = $"Network request failed: {e.Message}";
            SetProcessingStatus(item, false);
            await InvokeAsync(StateHasChanged);
            return;
        }

        SetProcessingStatus(item, false);

        if (!result.IsSuccessStatusCode)
        {
            var content = await result.Content.ReadAsStringAsync();

            createMessage = $"Error, server responded with: {content}, {result.StatusCode}";
        }
        else
        {
            createMessage = "Votes sent";
            createMessageType = SiteNoticeType.Info;

            GetStatus(item).AlreadyVoted = true;
        }

        await InvokeAsync(StateHasChanged);
    }

    private void ClearVotes(MeetingPollDTO item)
    {
        foreach (var vote in GetStatus(item).PollChoices!.Item1.Values)
        {
            vote.ChoiceNumber = null;
        }
    }

    private async void RecomputePollResults(MeetingPollDTO item)
    {
        SetProcessingStatus(item, true);
        // TODO: use same message holder as sending votes when that gets its own message
        createMessage = null;
        createMessageType = SiteNoticeType.Danger;
        await InvokeAsync(StateHasChanged);

        HttpResponseMessage result;

        try
        {
            result = await Http.PostAsJsonAsync($"api/v1/Meetings/{MeetingId}/polls/{item.PollId}/recompute",
                new StringContent(string.Empty));
        }
        catch (HttpRequestException e)
        {
            createMessage = $"Network request failed: {e.Message}";
            SetProcessingStatus(item, false);
            await InvokeAsync(StateHasChanged);
            return;
        }

        SetProcessingStatus(item, false);

        if (!result.IsSuccessStatusCode)
        {
            var content = await result.Content.ReadAsStringAsync();

            createMessage = $"Error, server responded with: {content}, {result.StatusCode}";
        }
        else
        {
            createMessage = "Recompute queued";
            createMessageType = SiteNoticeType.Info;
        }

        await InvokeAsync(StateHasChanged);
    }

    private async void ClosePoll(MeetingPollDTO item)
    {
        // TODO: see the comment in RecomputePollResults
        SetProcessingStatus(item, true);
        createMessage = null;
        createMessageType = SiteNoticeType.Danger;
        await InvokeAsync(StateHasChanged);

        HttpResponseMessage result;

        try
        {
            result = await Http.PostAsJsonAsync($"api/v1/Meetings/{MeetingId}/polls/{item.PollId}/close",
                new StringContent(string.Empty));
        }
        catch (HttpRequestException e)
        {
            createMessage = $"Network request failed: {e.Message}";
            SetProcessingStatus(item, false);
            await InvokeAsync(StateHasChanged);
            return;
        }

        SetProcessingStatus(item, false);

        if (!result.IsSuccessStatusCode)
        {
            var content = await result.Content.ReadAsStringAsync();

            createMessage = $"Error, server responded with: {content}, {result.StatusCode}";
        }
        else
        {
            createMessage = "Poll closed";
            createMessageType = SiteNoticeType.Info;
        }

        await InvokeAsync(StateHasChanged);
    }

    private Tuple<Dictionary<int, VoteData>, PollData> GetOrSetupPollData(MeetingPollDTO item)
    {
        var status = GetStatus(item);

        if (status.PollChoices == null)
        {
            var data = new Tuple<Dictionary<int, VoteData>, PollData>(new Dictionary<int, VoteData>(),
                item.ParsedData);
            foreach (var choice in data.Item2.Choices)
            {
                data.Item1[choice.Key] = new VoteData();
            }

            status.PollChoices = data;
        }

        return status.PollChoices;
    }

    private void UpdatePollChoiceRank(PollData.PollChoice choice, ChangeEventArgs e,
        MeetingPollDTO poll, Dictionary<int, VoteData> voteData)
    {
        var value = e.Value?.ToString();

        int? targetValue;

        if (string.IsNullOrEmpty(value))
        {
            targetValue = null;
        }
        else
        {
            targetValue = int.Parse(value);

            if (targetValue < 1)
                throw new Exception("new order number can't be less than 1");
        }

        // Don't do anything if the value didn't change
        if (targetValue == voteData[choice.Id].ChoiceNumber)
            return;

        if (targetValue == null)
        {
            voteData[choice.Id].ChoiceNumber = null;
        }
        else
        {
            // Increment values that would become duplicates
            foreach (var entry in voteData)
            {
                if (entry.Key == choice.Id)
                    continue;

                var otherVote = entry.Value;

                // Makes the logic less clear
                // ReSharper disable once UseNullPropagationWhenPossible
                if (otherVote.ChoiceNumber == null)
                    continue;

                if (otherVote.ChoiceNumber >= targetValue)
                {
                    otherVote.ChoiceNumber = otherVote.ChoiceNumber.Value + 1;
                }
            }

            voteData[choice.Id].ChoiceNumber = targetValue;
        }

        PreventGapsInSelectedWeightedChoices(poll, voteData);
    }

    private void PreventGapsInSelectedWeightedChoices(MeetingPollDTO poll, Dictionary<int, VoteData> voteData)
    {
        // Make sure the numbers have no gaps by redoing them
        int nextValue = 0;

        foreach (var entry in voteData.Where(t => t.Value.ChoiceNumber != null).OrderBy(t => t.Value.ChoiceNumber!))
        {
            entry.Value.ChoiceNumber = ++nextValue;
        }

        StateHasChanged();

        if (voteData.Values.Where(v => v.ChoiceNumber != null).GroupBy(v => v.ChoiceNumber).Any(g => g.Count() > 1))
        {
            Console.Error.WriteLine("Vote adjusting caused duplicate choice numbers");

            statusMessage = "Error in processing vote preference numbers";
            createMessageType = SiteNoticeType.Danger;
        }
    }

    /// <summary>
    ///   We don't want to always show a ton of numbers to pick from, so we show just the numbers in use, plus one
    /// </summary>
    private IEnumerable<int> GetPossibleWeightedChoiceNumbers(Dictionary<int, VoteData> voteData)
    {
        return Enumerable.Range(1, 1 + voteData.Count(e => e.Value.ChoiceNumber != null));
    }

    private void SingleChoiceButtonChanged(PollData.PollChoice choice, ChangeEventArgs e,
        Dictionary<int, VoteData> voteData)
    {
        bool selected = (string?)e.Value == "on";

        if (!selected)
            return;

        // Unset all options except the one selected
        foreach (var entry in voteData)
        {
            if (entry.Key == choice.Id)
            {
                entry.Value.ChoiceNumber = selected ? 1 : null;
            }
            else
            {
                entry.Value.ChoiceNumber = null;
            }
        }
    }

    private void MultipleChoiceButtonChanged(PollData.PollChoice choice, ChangeEventArgs e,
        Dictionary<int, VoteData> voteData)
    {
        bool selected = (bool?)e.Value ?? false;

        // Set the changed vote to the wanted state

        // TODO: set the numbers sequentially so that the first selected option is the lowest number so that tiebreaker
        // votes pick the winning option more naturally
        voteData[choice.Id].ChoiceNumber = selected ? 1 : null;
    }

    /// <summary>
    ///   Gets status for a poll. This is a helper method as id vs pollId confusion caused a problem so this is here
    ///   to reduce the chance of that kind of problem.
    /// </summary>
    private PollResourceStatus GetStatus(MeetingPollDTO poll)
    {
        return clientSideResourceStatus.GetStatus(poll.Id);
    }

    private bool IsRunningPollAction(MeetingPollDTO poll)
    {
        if (!clientSideResourceStatus.HasStatus(poll.Id))
            return false;

        return GetStatus(poll).Processing;
    }

    private class VoteData
    {
        public int? ChoiceNumber;
    }

    private bool AlreadyVotedIn(MeetingPollDTO poll)
    {
        return GetStatus(poll).AlreadyVoted;
    }

    private void SetProcessingStatus(MeetingPollDTO poll, bool processingPoll)
    {
        GetStatus(poll).Processing = processingPoll;
    }

    private int GetNextRenderCount(MeetingPollDTO poll)
    {
        return ++GetStatus(poll).RenderCount;
    }

    private PollResultData GetParsedResultsWithCache(MeetingPollDTO poll)
    {
        var status = GetStatus(poll);

        if (status.RawData == poll.PollResults)
        {
            return status.ParsedData ?? throw new Exception("Poll results to read doesn't exist yet");
        }

        try
        {
            status.ParsedData = poll.ParsedResults ?? throw new Exception("Parsed results is null");
        }
        catch (Exception e)
        {
            createMessage = $"Failed to parse results of poll {poll.Title}, it will show incorrect results!";
            createMessageType = SiteNoticeType.Danger;

            Console.Error.WriteLine($"Error parsing poll results for poll ({poll.MeetingId}-{poll.PollId}): {e}");
            status.ParsedData = new PollResultData
            {
                Results = new List<PollResultData.ChoiceVotes> { new(1, 0) },
            };
        }

        status.RawData = poll.PollResults;
        return status.ParsedData;
    }

    private string CountdownTimerBadgeClass(MeetingPollDTO poll)
    {
        var remaining = poll.AutoCloseAt - DateTime.UtcNow;

        if (AlreadyVotedIn(poll))
        {
            return "bg-success";
        }

        if (remaining > TimeSpan.FromMinutes(5))
        {
            return "bg-secondary";
        }

        if (remaining > TimeSpan.FromMinutes(1))
        {
            return "bg-warning";
        }

        return "bg-danger";
    }

    private void CheckActivePollsTimer(object? sender, ElapsedEventArgs e)
    {
        // Detect if any polls crossed the one minute remaining threshold, and update our state in that case
        if (Data == null || Data.Count < 1)
            return;

        bool changed = false;
        var now = DateTime.UtcNow;

        foreach (var poll in Data)
        {
            if (poll.ClosedAt == null && poll.AutoCloseAt != null)
            {
                var state = GetStatus(poll);

                if (state.BelowOneMinute)
                    continue;

                var remaining = poll.AutoCloseAt.Value - now;

                if (remaining < TimeSpan.FromMinutes(1))
                {
                    state.BelowOneMinute = true;
                    changed = true;
                }

                if (state.BelowFiveMinutes)
                    continue;

                if (remaining < TimeSpan.FromMinutes(5))
                {
                    state.BelowFiveMinutes = true;
                    changed = true;
                }
            }
        }

        if (changed)
            InvokeAsync(StateHasChanged);
    }

    private string WeightedChoicePollElementId(MeetingPollDTO poll, int option, int renderCount)
    {
        return $"poll{poll.PollId}_Choice{option}_RCount_{renderCount}";
    }

    private class PollResourceStatus : DeletedResourceStatus
    {
        public string? RawData;
        public PollResultData? ParsedData;

        public bool AlreadyVoted;

        public Tuple<Dictionary<int, VoteData>, PollData>? PollChoices;

        public bool BelowOneMinute;
        public bool BelowFiveMinutes;

        /// <summary>
        ///   Used to workaround a blazor bug with selects getting stuck with old values to make unique keys
        /// </summary>
        public int RenderCount;
    }
}
