@page "/cla"
@inject HttpClient Http
@inject NotificationHandler NotificationHandler
@inject NavigationManager NavigationManager
@inherits SingleResourcePage<CLADTO, CLAUpdated, long>
@using RevolutionaryWebApp.Shared.Models
@using RevolutionaryWebApp.Client.Services
@using RevolutionaryWebApp.Shared.Notifications
@using System.Net
@using System.Text.Json
@using RevolutionaryWebApp.Client.Utilities
@using RevolutionaryWebApp.Shared
@using RevolutionaryWebApp.Shared.Models.Enums
@implements IAsyncDisposable
<h3>Thrive CLA</h3>

<p>
    A Contributor License Agreement (CLA) is an agreement between a contributor (that's potentially you) and
    Revolutionary Games Studio ry (a legal entity supporting Thrive development). Signing the CLA is required before
    your contributions can be accepted as the CLA grants us the necessary permissions to use your work in Thrive.
    You can read more about the reasoning on our
    <a href="https://wiki.revolutionarygamesstudio.com/wiki/Contributor_License_Agreement">wiki</a>.
</p>

<p>
    If you do not own the copyright to all parts of your work, before submitting such work you must ensure that all
    copyright holders of the work have signed the CLA agreement.
</p>

<SingleResourceDisplayer Error="@Error" Loading="@Loading" HasData="@dataFetched">
    @if (Data != null)
    {
        <h3>Current CLA Agreement</h3>

        <div><MarkdownRenderer MarkdownText="@Data.RawMarkdown" AllMarkdownFeatures="@true"/></div>

        <br />

        @if (!Data.Active)
        {
            <p>This CLA is not active.</p>
        }
        else
        {
            <p>
                Your signature, name, email, username etc. information you provide when signing will not be made public.
                Thrive developers will be able to check if a specific email address has signed, but they won't be
                able to see a full list of people who have signed. Access to the full list of people who have signed
                is restricted and will not be published.
            </p>
            <form>
                <div class="row">
                    <div class="form-check">
                        <input class="form-check-input" type="checkbox" id="beforeSignCheckbox" @bind="checkBoxChecked">
                        <label class="form-check-label" for="beforeSignCheckbox">
                            I agree to the agreement above and that in addition to the information I provide in the
                            signing process cookies will be used to track the signing process and my IP address
                            will be stored.
                        </label>
                    </div>
                </div>

                <StatusMessageShower Message="@statusMessage" Type="@statusMessageType" />
                <Button class="my-1" Enabled="@CanStartSign" OnPressed="@StartSigning" Spinner="@processing">
                    Start Signing
                </Button>
            </form>
        }
    }
    else
    {
        <p>There is no currently active CLA available to sign.</p>
    }
</SingleResourceDisplayer>

<AccessLimited RequiredAccess="GroupType.Developer" AutoRedirectIfNotLoggedIn="@false">
    @if (Data != null)
    {
        <br class="mt-3" />
        <CLASignatureChecker CLAId="@Data.Id" />
    }
</AccessLimited>

<DevCenterTitle>CLA</DevCenterTitle>

@code {
    private string? statusMessage;
    private SiteNoticeType statusMessageType;

    private bool dataFetched;

    private bool processing;
    private bool checkBoxChecked;

    private bool CanStartSign => checkBoxChecked && !processing;

    protected override async Task<CLADTO?> StartQuery()
    {
        dataFetched = false;

        try
        {
            var data = await Http.GetFromJsonAsync<CLADTO>("api/v1/CLA/active");
            dataFetched = true;
            return data;
        }
        catch (HttpRequestException e)
        {
            if (e.StatusCode == HttpStatusCode.NotFound)
            {
                // No active CLA
                dataFetched = true;
                return null;
            }

            throw;
        }
    }

    public override void GetWantedListenedGroups(IUserGroupData currentUserGroups, ISet<string> groups)
    {
        if(Data != null)
            groups.Add(NotificationGroups.CLAUpdatedPrefix + Data.Id);
    }

    public async ValueTask DisposeAsync()
    {
        await NotificationHandler.Unregister(this);
    }

    protected override Task OnFirstDataReceived()
    {
        return NotificationHandler.Register(this);
    }

    private async Task StartSigning()
    {
        processing = true;
        statusMessage = null;
        statusMessageType = SiteNoticeType.Danger;
        await InvokeAsync(StateHasChanged);

        HttpResponseMessage result;

        try
        {
            result = await Http.PostAsync($"api/v1/CLA/startSigning?id={Data!.Id}", new StringContent(string.Empty));
        }
        catch (HttpRequestException e)
        {
            statusMessage = $"Network request failed: {e.Message}";
            processing = false;
            await InvokeAsync(StateHasChanged);
            return;
        }

        processing = false;

        var content = await result.Content.ReadAsStringAsync();

        if (!result.IsSuccessStatusCode)
        {
            statusMessage = $"Error, server responded with: {content}, {result.StatusCode}";
        }
        else
        {
            try
            {
                var data = JsonSerializer.Deserialize<SigningStartResponse>(content,
                    HttpClientHelpers.GetOptionsWithSerializers());

                if (data == null)
                    throw new Exception("Failed to parse server response to JSON");

                statusMessage = "CLA signing started, you should be redirected to the right page to"+
                    " continue the process";
                statusMessageType = SiteNoticeType.Info;

                checkBoxChecked = false;

                if (string.IsNullOrEmpty(data.NextPath))
                    throw new Exception("server didn't provide next path");

                // Swap to the sign in progress page
                NavigationManager.NavigateTo(data.NextPath, data.SessionStarted);
            }
            catch (Exception e)
            {
                statusMessage = $"Error when parsing / handling server response: {e}";
            }
        }

        await InvokeAsync(StateHasChanged);
    }
}

