@page "/reports/{Id:long}"
@inject HttpClient Http
@inject NotificationHandler NotificationHandler
@inject NavigationManager NavigationManager
@inject CurrentUserInfo CurrentUserInfo
@inherits SingleResourcePage<CrashReportDTO, CrashReportUpdated, long>
@using RevolutionaryWebApp.Shared.Models
@using RevolutionaryWebApp.Client.Services
@using RevolutionaryWebApp.Shared
@using RevolutionaryWebApp.Shared.Models.Enums
@using RevolutionaryWebApp.Shared.Notifications
@implements IAsyncDisposable

<SingleResourceDisplayer Error="@Error" Loading="@Loading" HasData="@(Data != null)">
    @if (Data != null)
    {
        <h3>
            Crash Report @Data.Id
            @if (Data.State == ReportState.Closed)
            {
                <span class="badge badge-success ml-2">Closed</span>
            } else if (Data.State == ReportState.Duplicate)
            {
                <span class="badge badge-warning ml-2">Duplicate</span>
            }

            @if (!Data.Public)
            {
                <span class="badge badge-secondary ml-2">Private</span>
            }
        </h3>

        <ul>
            <li><strong>Crash Happened At</strong>: @Data.HappenedAt.ToLocalTime().ToString("G")</li>
            <li><strong>Crash Reason</strong>: @Data.ExitCodeOrSignal</li>
            <li><strong>Version</strong>: @Data.Version</li>
            <li><strong>Store Version</strong>: @Data.Store</li>
            <li><strong>Platform</strong>: @Data.Platform</li>
            <li><strong>State</strong>: @Data.State</li>

            @if (Data.DuplicateOfId.HasValue)
            {
                <li><strong>Duplicate Of</strong>: <NavLink href="@($"/reports/{Data.DuplicateOfId.Value}")">
                    Report @Data.DuplicateOfId.Value
                </NavLink></li>
            }

            @if (CurrentUserInfo.IsDeveloper)
            {
                <li><strong>Anonymized reporter IP</strong>: @Data.AnonymizedReporterIp</li>
            }

            <li><strong>Created At</strong>: @Data.CreatedAt.ToLocalTime().ToString("G")</li>
            <li><strong>Updated At</strong>: @Data.UpdatedAt.ToLocalTime().ToString("G")</li>
        </ul>

        <StatusMessageShower Type="@topStatusType" Message="@topStatus" />

        <AdminResourceDeleteButtons UsesSoftDelete="@false" Name="@($"Crash Report {Data.Id}")" Id="@Data.Id"
                                    DeleteURLBase="api/v1/CrashReport"
                                    DeletePromptTitle="Delete this Crash Report?" />

        <div class="row">
            @* TODO: replace max width with something that works better, for now it fixes things to look better
            on really wide monitors *@
            <div class="@ViewColumnClass()" style="@MinimumWidthLeftSide();">
                <h4>Duplicates</h4>

                @if (fetchingDuplicates)
                {
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                }
                else if (duplicates != null)
                {
                    @if (duplicates.Count < 1)
                    {
                        <span>Nothing is a duplicate of this report.</span>
                    }
                    else
                    {
                        <ul>
                            @foreach (var duplicate in duplicates.Take(showAllDuplicates ?
                                AppInfo.MaximumDuplicateReports : SmallDuplicateAmount))
                            {
                                <li><NavLink href="@($"/reports/{duplicate}")">Report @duplicate</NavLink></li>
                            }
                        </ul>

                        @if (duplicates.Count >= AppInfo.MaximumDuplicateReports)
                        {
                            <p>
                                This report has so many duplicates that not all can be shown.
                                Only @AppInfo.MaximumDuplicateReports are shown.
                            </p>
                        }

                        @if (duplicates.Count > SmallDuplicateAmount)
                        {
                            @if (showAllDuplicates)
                            {
                                <Button ButtonStyle="secondary"
                                        OnPressed="@(() => SetDuplicatesFullShowing(false))">
                                    Show Only The First Duplicates
                                </Button>
                            }
                            else
                            {
                                <Button ButtonStyle="secondary"
                                        OnPressed="@(() => SetDuplicatesFullShowing(true))">
                                    Show All @duplicates.Count Duplicates
                                </Button>
                            }
                        }
                    }
                }

                @if (CurrentUserInfo.IsDeveloper)
                {
                    <h4 class="mt-3">Reports from same reporter</h4>

                    @if (fetchingSameReporterInfo)
                    {
                        <div class="spinner-border text-primary" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                    }
                    else if (bySameReporter != null)
                    {
                        @if (bySameReporter.Count < 1)
                        {
                            <span>No other reports by the same reporter.</span>
                        }
                        else
                        {
                            <ul>
                                @foreach (var sameReporter in bySameReporter.Take(showAllOthersFromSameReporter ?
                                    AppInfo.MaximumSameReporterReports : SmallDuplicateAmount))
                                {
                                    <li><NavLink href="@($"/reports/{sameReporter}")">Report @sameReporter</NavLink></li>
                                }
                            </ul>

                            @if (bySameReporter.Count >= AppInfo.MaximumSameReporterReports)
                            {
                                <p>
                                    This reporter has made so many reports that not all can be shown.
                                    Only @AppInfo.MaximumSameReporterReports are shown.
                                </p>
                            }

                            @if (bySameReporter.Count > SmallDuplicateAmount)
                            {
                                @if (showAllOthersFromSameReporter)
                                {
                                    <Button ButtonStyle="secondary"
                                            OnPressed="@(() => SetSameReporterFullShowing(false))">
                                        Show Only Few Reports From the Same Person
                                    </Button>
                                }
                                else
                                {
                                    <Button ButtonStyle="secondary"
                                            OnPressed="@(() => SetSameReporterFullShowing(true))">
                                        Show All @bySameReporter.Count Reports by the Same Person
                                    </Button>
                                }
                            }
                        }
                    }
                }

                <h3>Description</h3>

                <MarkdownRenderer MarkdownText="@Data.Description" AllMarkdownFeatures="@false"/>

                <AccessLimited AutoRedirectIfNotLoggedIn="false" RequiredAccess="GroupType.RestrictedUser">
                    <AuthorizedContent>
                        @if (Data.DescriptionLastEdited.HasValue)
                        {
                            <p>Description last edited at
                                @Data.DescriptionLastEdited.Value.ToLocalTime().ToString("G") by
                                <UsernameDisplayer UserId="@Data.DescriptionLastEditedById" /></p>
                        }
                    </AuthorizedContent>
                    <AccessMissingContent>
                        @if (Data.DescriptionLastEdited.HasValue)
                        {
                            <p>
                                Description last edited at
                                @Data.DescriptionLastEdited.Value.ToLocalTime().ToString("G")
                            </p>
                        }
                    </AccessMissingContent>
                </AccessLimited>

                <AccessLimited AutoRedirectIfNotLoggedIn="false" RequiredAccess="GroupType.Developer">
                    <TextEditor Identifier="@($"report-desc-{Id}")" Placeholder="New description..."
                                FieldLabel="Description" CurrentlySavedText="@Data.Description"
                                GetSaveRequest="@GetDescriptionSaveRequest" />
                </AccessLimited>

                <br />
                <Button OnPressed="@ToggleMultiColumn" ButtonStyle="secondary" Small="@true" class="mt-2">
                    Toggle Multiple Columns
                </Button>

                <h3>Callstack</h3>

                <pre>@Data.CondensedCallstack</pre>

                <h4>Full Stack Details</h4>
                <pre>@Data.PrimaryCallstack</pre>

                <AccessLimited AutoRedirectIfNotLoggedIn="false" RequiredAccess="GroupType.Developer">
                    <AuthorizedContent>
                        <h3>Logs</h3>

                        @if (fetchingLogs)
                        {
                            <div class="spinner-border text-primary" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                        }
                        else
                        {
                            <pre>@logs</pre>
                        }

                        <p>Note: logs and crash dump won't auto refresh on data change.</p>

                    </AuthorizedContent>
                    <AccessMissingContent>
                        <h3>Logs</h3>

                        <p>
                            Only Thrive developers can view logs.
                            <NavLink href="@NavigationManager.GetLinkToLogin("Only developers can view logs")">
                                Login
                            </NavLink>
                        </p>

                    </AccessMissingContent>
                </AccessLimited>

                <StatusMessageShower Type="@emailStatusType" Message="@emailStatus" />

                <AccessLimited AutoRedirectIfNotLoggedIn="false" RequiredAccess="GroupType.Admin">

                    @if (showReporterEmail)
                    {
                        <Button ButtonStyle="secondary" OnPressed="@(() => showReporterEmail = false)">
                            Hide Reporter Email
                        </Button>

                        <p>@(reporterEmail)</p>
                    }
                    else
                    {
                        <Button ButtonStyle="secondary" Enabled="@(!fetchingEmail)" class="mr-2"
                                Spinner="@fetchingEmail" OnPressed="@(async () => await FetchReporterEmail())">
                            Show Reporter Email
                        </Button>
                    }

                    @* If the email showing is changed to be developer only, this will still need to be admin only *@
                    <Button ButtonStyle="danger" Enabled="@(!deletingEmail && !fetchingEmail)"
                            Spinner="@deletingEmail" OnPressed="@(async () => await DeleteReporterEmail())">
                        Delete Reporter Email
                    </Button>

                </AccessLimited>
            </div>

            <div class="@($"{ViewColumnClass()} overflow-auto")">
                <AccessLimited AutoRedirectIfNotLoggedIn="false" RequiredAccess="GroupType.Developer">
                    <h3>Crash dump</h3>
                    @if (fetchingCrashDump)
                    {
                        <div class="spinner-border text-primary" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                    }
                    else
                    {
                        <pre>@crashDump</pre>
                    }

                    <StatusMessageShower Type="@bottomStatusType" Message="@bottomStatus" />

                    @if (Data.CanReProcess)
                    {
                        <Button ButtonStyle="secondary" Spinner="@reprocessingFile"
                                Enabled="@(!reprocessingFile)" OnPressed="@RequestReProcessing">
                            Reprocess Dump File
                        </Button>
                    }
                    else
                    {
                        <p>Crash dump for this report has been deleted.</p>
                    }
                </AccessLimited>
            </div>
        </div>

        @* TODO: implement commenting at some point
        <h3>Comments</h3>
        *@

        @* TODO: implement notification registering
        <h3>Notifications</h3>
        *@

        <DevCenterTitle>Report @Data.Id</DevCenterTitle>
    }
</SingleResourceDisplayer>

@code {

    private const int SmallDuplicateAmount = 5;
    private bool multiColumnView = true;

    private SiteNoticeType topStatusType = SiteNoticeType.Info;
    private string? topStatus;

    private SiteNoticeType bottomStatusType = SiteNoticeType.Info;
    private string? bottomStatus;

    private SiteNoticeType emailStatusType = SiteNoticeType.Info;
    private string? emailStatus;

    private bool reprocessingFile;

    private bool fetchingDuplicates;
    private List<long>? duplicates;
    private bool showAllDuplicates;

    private bool fetchingSameReporterInfo;
    private List<long>? bySameReporter;
    private bool showAllOthersFromSameReporter;

    private bool fetchingLogs;
    private string? logs;

    private bool fetchingCrashDump;
    private string? crashDump;

    private bool showReporterEmail;
    private bool fetchingEmail;
    private string reporterEmail = string.Empty;
    private bool deletingEmail;

    protected override Task<CrashReportDTO?> StartQuery()
    {
        return Http.GetFromJsonAsync<CrashReportDTO>($"api/v1/CrashReport/{Id}");
    }

    public override void GetWantedListenedGroups(IUserGroupData currentUserGroups, ISet<string> groups)
    {
        groups.Add(NotificationGroups.CrashReportUpdatedPrefix + Id);
    }

    public async ValueTask DisposeAsync()
    {
        await NotificationHandler.Unregister(this);
    }

    protected override async Task OnFirstDataReceived()
    {
        await NotificationHandler.Register(this);

        var tasks = new List<Task> { FetchDuplicates() };

        showReporterEmail = false;
        fetchingEmail = false;

        if (CurrentUserInfo.IsDeveloper)
        {
            tasks.Add(FetchReportsBySameReporter());
            tasks.Add(FetchLogs());
            tasks.Add(FetchCrashDump());
        }

        await Task.WhenAll(tasks);
    }

    private async Task FetchDuplicates()
    {
        duplicates = null;
        fetchingDuplicates = true;
        topStatus = null;
        await InvokeAsync(StateHasChanged);

        try
        {
            duplicates = await Http.GetFromJsonAsync<List<long>>($"api/v1/CrashReport/{Id}/duplicates");
        }
        catch (Exception e)
        {
            topStatus = $"Fetching duplicates failed: {e.Message}";
            topStatusType = SiteNoticeType.Danger;
        }
        finally
        {
            fetchingDuplicates = false;
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task FetchReportsBySameReporter()
    {
        bySameReporter = null;
        fetchingSameReporterInfo = true;
        await InvokeAsync(StateHasChanged);

        try
        {
            bySameReporter = await Http.GetFromJsonAsync<List<long>>($"api/v1/CrashReport/{Id}/bySameReporter");
        }
        catch (Exception e)
        {
            topStatus = $"Fetching reports by same reporter failed: {e.Message}";
            topStatusType = SiteNoticeType.Danger;
        }
        finally
        {
            fetchingSameReporterInfo = false;
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task FetchLogs()
    {
        logs = null;
        fetchingLogs = true;
        topStatus = null;
        await InvokeAsync(StateHasChanged);

        try
        {
            logs = await Http.GetStringAsync($"api/v1/CrashReport/{Id}/logs");
        }
        catch (Exception e)
        {
            topStatus = $"Fetching logs failed: {e.Message}";
            topStatusType = SiteNoticeType.Danger;
        }
        finally
        {
            fetchingLogs = false;
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task FetchCrashDump()
    {
        crashDump = null;
        fetchingCrashDump = true;
        topStatus = null;
        await InvokeAsync(StateHasChanged);

        try
        {
            crashDump = await Http.GetStringAsync($"api/v1/CrashReport/{Id}/decodedDump");
        }
        catch (Exception e)
        {
            topStatus = $"Fetching crash dump failed: {e.Message}";
            topStatusType = SiteNoticeType.Danger;
        }
        finally
        {
            fetchingCrashDump = false;
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task RequestReProcessing()
    {
        reprocessingFile = true;
        bottomStatus = null;
        bottomStatusType = SiteNoticeType.Danger;
        await InvokeAsync(StateHasChanged);

        HttpResponseMessage result;

        try
        {
            result = await Http.PostAsync($"api/v1/CrashReport/{Id}/reprocess", new StringContent(string.Empty));
        }
        catch (HttpRequestException e)
        {
            bottomStatus = $"Network request failed: {e.Message}";
            reprocessingFile = false;
            await InvokeAsync(StateHasChanged);
            return;
        }

        reprocessingFile = false;

        if (!result.IsSuccessStatusCode)
        {
            var content = await result.Content.ReadAsStringAsync();

            bottomStatus = $"Error, server responded with: {content}, {result.StatusCode}";
        }
        else
        {
            bottomStatus = "Report reprocessing queued";
            bottomStatusType = SiteNoticeType.Primary;
        }

        await InvokeAsync(StateHasChanged);
    }

    private Task SetDuplicatesFullShowing(bool showAll)
    {
        showAllDuplicates = showAll;
        return InvokeAsync(StateHasChanged);
    }

    private Task SetSameReporterFullShowing(bool showAll)
    {
        showAllOthersFromSameReporter = showAll;
        return InvokeAsync(StateHasChanged);
    }

    private Tuple<string, object> GetDescriptionSaveRequest(string newDescription)
    {
        var result = (CrashReportDTO)Data!.Clone();
        result.Description = newDescription;

        return new Tuple<string, object>($"api/v1/CrashReport/{Id}", result);
    }

    private void ToggleMultiColumn()
    {
        multiColumnView = !multiColumnView;
    }

    private string ViewColumnClass()
    {
        if (multiColumnView)
            return "col-12 col-xl";

        return "col-12 col-xl-12";
    }

    private string MinimumWidthLeftSide()
    {
        if (multiColumnView)
            return "max-width: 900px;";

        return string.Empty;
    }

    private async Task FetchReporterEmail()
    {
        fetchingEmail = true;
        emailStatus = null;
        emailStatusType = SiteNoticeType.Danger;
        await InvokeAsync(StateHasChanged);

        try
        {
            reporterEmail = await Http.GetStringAsync($"api/v1/CrashReport/{Id}/reporterEmail");
        }
        catch (HttpRequestException e)
        {
            reporterEmail = "error";
            bottomStatus = $"Network request failed: {e.Message}";
        }

        fetchingEmail = false;
        showReporterEmail = true;
        await InvokeAsync(StateHasChanged);
    }

    private async Task DeleteReporterEmail()
    {
        deletingEmail = true;
        emailStatus = null;
        emailStatusType = SiteNoticeType.Danger;
        await InvokeAsync(StateHasChanged);

        HttpResponseMessage result;

        try
        {
            result = await Http.DeleteAsync($"api/v1/CrashReport/{Id}/reporterEmail");
        }
        catch (HttpRequestException e)
        {
            emailStatus = $"Network request failed: {e.Message}";
            deletingEmail = false;
            await InvokeAsync(StateHasChanged);
            return;
        }

        deletingEmail = false;

        if (!result.IsSuccessStatusCode)
        {
            var content = await result.Content.ReadAsStringAsync();

            emailStatus = $"Error, server responded with: {content}, {result.StatusCode}";
        }
        else
        {
            emailStatus = "Reporter email cleared";
            showReporterEmail = false;
            emailStatusType = SiteNoticeType.Primary;
        }

        await InvokeAsync(StateHasChanged);
    }
}
