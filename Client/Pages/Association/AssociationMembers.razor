@page "/association/members"
@inject HttpClient Http
@inject NavigationManager NavManager
@inject ComponentUrlHelper URLHelper
@inject NotificationHandler NotificationHandler
@using RevolutionaryWebApp.Shared
@using RevolutionaryWebApp.Shared.Notifications
@using System.Threading
@using RevolutionaryWebApp.Client.Services
@using RevolutionaryWebApp.Shared.Models
@using RevolutionaryWebApp.Shared.Models.Enums
@implements RevolutionaryWebApp.Client.Services.INotificationHandler<AssociationMemberListUpdated>
@inherits PaginatedPage<RevolutionaryWebApp.Shared.Models.AssociationMemberInfo>

<AccessLimited RequiredAccess="GroupType.Admin" RedirectOnInsufficientPermission="@true">
    <h3>Association Members</h3>

    @if (!string.IsNullOrEmpty(Error))
    {
        <div class="alert alert-danger" role="alert">
            @Error
        </div>
    }
    else
    {
        <PaginatedTable ShowPaginator="@(Data != null)" CurrentPage="@Data?.CurrentPage" PageCount="@Data?.PageCount"
                        OnPageChanged="async e => await ChangePage(e)"
                        OnSortChanged="async column => await ChangeSort(column)"
                        GetSortClass="@SortClass"
                        ShowContentSpinner="@VisibleFetchInProgress"
                        Columns="@columns"
                        ShowNoContent="@NoItemsFound">
            @if (Data != null)
            {
                @foreach (var item in Data.Results)
                {
                    <tr @key="item.Id">
                        <th scope="row"><NavLink href="@($"association/members/{item.Id}")">@item.Email</NavLink></th>
                        <td>@item.JoinDate.ToString("d")</td>
                        <td>
                            @if(item.UserId != null)
                            {
                                <UsernameDisplayer UserId="@item.UserId" ShowNavLink="@true" />
                            }
                            else
                            {
                                <span>No account</span>
                            }
                        </td>
                        <td>@item.BoardMember</td>
                    </tr>
                }
            }
        </PaginatedTable>
    }

    <div>
        Total members:
        @if (totalMembers == null)
        {
            <div class="text-center">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
        }
        else
        {
            <span>@totalMembers</span>
        }
    </div>

    <hr />

    @if (!showNewForm)
    {
        <StatusMessageShower Message="@createMessage" Type="@createMessageType" />
    }

    <Button class="mb-3 mr-1" ButtonStyle="success" OnPressed="@ToggleCreateNew" Enabled="@(!processingNewForm)">
        New
    </Button>

    @if (showNewForm)
    {
        <EditForm EditContext="@editContext" OnValidSubmit="@CreateNew">
            <DataAnnotationsValidator />

            <div class="form-row">
                <div class="form-group col-md-6">
                    <label for="newFirstNames">First Name(s)</label>
                    <CustomInputText class="form-control" id="newFirstNames"
                                     @bind-Value="newData!.FirstNames" placeholder="First names"
                                     DisplayName="First Name(s)" />
                </div>
                <div class="form-group col-md-6">
                    <label for="newLastNames">Last Name</label>
                    <CustomInputText class="form-control" id="newLastNames"
                                     @bind-Value="newData!.LastName" placeholder="Last name"/>
                </div>
            </div>

            <div class="form-row">
                <div class="form-group">
                    <label for="newEmail">Email (can't be changed later)</label>
                    <CustomInputText class="form-control" id="newEmail"
                                     @bind-Value="newData!.Email" placeholder="Email"/>
                </div>
            </div>

            <div class="form-row">
                <div class="form-group col-md-8">
                    <label for="newCity">City of Residence (and state code if USA)</label>
                    <CustomInputText class="form-control" id="newCity"
                                     @bind-Value="newData!.CityOfResidence" placeholder="City of Residence"
                                     DisplayName="City of Residence" />
                </div>
                <div class="form-group col-md-4">
                    <label for="newCountry">Country</label>
                    <CustomInputText class="form-control" id="newCountry"
                                     @bind-Value="newData!.CountryOfResidence" placeholder="Country"
                                     DisplayName="Country" />
                </div>
            </div>

            <div class="form-row">
                <div class="form-group">
                    <label for="newJoinDate">Join Date</label>
                    <InputDate class="form-control" id="newJoinDate" @bind-Value="newData!.JoinDate"/>
                </div>
            </div>

            <div class="form-row">
                <div class="form-group col-md-3">
                    <div class="form-check">
                        <InputCheckbox class="form-check-input" type="checkbox" id="newIsBoardMember"
                                       @bind-Value="newData!.BoardMember" />
                        <label class="form-check-label" for="newIsBoardMember">
                            Association Board Member
                        </label>
                    </div>
                </div>
                <div class="form-group col-md-3">
                    <div class="form-check">
                        <InputCheckbox class="form-check-input" type="checkbox" id="newIsPresident"
                                       @bind-Value="newData!.CurrentPresident" />
                        <label class="form-check-label" for="newIsPresident">
                            Current Association President
                        </label>
                    </div>
                </div>
                <div class="form-group col-md-3">
                    <div class="form-check">
                        <InputCheckbox class="form-check-input" type="checkbox" id="newHasBeenBoardMember"
                                       @bind-Value="newData!.HasBeenBoardMember" />
                        <label class="form-check-label" for="newHasBeenBoardMember">
                            Has Been a Board Member
                        </label>
                    </div>
                </div>
                <div class="form-group col-md-3">
                    <div class="form-check">
                        <InputCheckbox class="form-check-input" type="checkbox" id="newThriveDeveloper"
                                       @bind-Value="newData!.IsThriveDeveloper" />
                        <label class="form-check-label" for="newThriveDeveloper">
                            Is a Thrive Developer
                        </label>
                    </div>
                </div>
            </div>

            <ValidationSummary />

            <StatusMessageShower Message="@createMessage" Type="@createMessageType" />
            <Button class="my-1 mr-1" Enabled="@(!processingNewForm)" type="submit" Spinner="@processingNewForm">
                Create
            </Button>
            <Button ButtonStyle="secondary" OnPressed="@ToggleCreateNew">
                Cancel
            </Button>
        </EditForm>
    }

    <DevCenterTitle>Association Members</DevCenterTitle>
</AccessLimited>

@code {
private readonly List<TableColumn> columns = new()
    {
        new TableColumn("Email", true),
        new TableColumn("Join Date", true, "JoinDate"),
        new TableColumn("DevCenter Account", false),
        new TableColumn("Board Member?", false),
    };

    private string? createMessage;
    private SiteNoticeType createMessageType;

    private string? totalMembers;

    private bool showNewForm;
    private bool processingNewForm;

    private EditContext editContext = null!;

    private AssociationMemberDTO? newData;

    public AssociationMembers() : base(new SortHelper("JoinDate", SortDirection.Descending))
    {
    }

    protected override async Task OnInitializedAsync()
    {
        await NotificationHandler.Register(this);
        await base.OnInitializedAsync();
        await FetchTotalCount();
    }

    public override Task SetParametersAsync(ParameterView parameters)
    {
        this.SetParametersFromQueryString(NavManager);

        return base.SetParametersAsync(parameters);
    }

    public Task Handle(AssociationMemberListUpdated notification, CancellationToken cancellationToken)
    {
        return HandleItemNotification(notification);
    }

    public void GetWantedListenedGroups(IUserGroupData currentUserGroups, ISet<string> groups)
    {
        groups.Add(NotificationGroups.AssociationMemberListUpdated);
    }

    public override async ValueTask DisposeAsync()
    {
        await base.DisposeAsync();
        await NotificationHandler.Unregister(this);
    }

    protected override Task<PagedResult<AssociationMemberInfo>?> StartQuery(Dictionary<string, string?> requestParams)
    {
        return Http.GetFromJsonAsync<PagedResult<AssociationMemberInfo>>(
            QueryHelpers.AddQueryString("api/v1/AssociationMember", requestParams));
    }

    protected override async Task OnQuerySent(Dictionary<string, string?> requestParams)
    {
        await URLHelper.UpdateUrlHistoryIfChanged(requestParams);
    }

    private void ToggleCreateNew()
    {
        if (showNewForm)
        {
            showNewForm = false;
        }
        else
        {
            showNewForm = true;
            createMessage = null;

            newData = new AssociationMemberDTO
            {
                JoinDate = DateTime.Now,
            };

            editContext = new EditContext(newData);
        }

        StateHasChanged();
    }

    private async void CreateNew()
    {
        createMessageType = SiteNoticeType.Danger;
        processingNewForm = true;
        createMessage = null;
        await InvokeAsync(StateHasChanged);

        HttpResponseMessage result;

        try
        {
            result = await Http.PostAsJsonAsync("api/v1/AssociationMember", newData!);
        }
        catch (HttpRequestException e)
        {
            createMessage = $"Network request failed: {e.Message}";
            processingNewForm = false;
            await InvokeAsync(StateHasChanged);
            return;
        }

        processingNewForm = false;

        if (!result.IsSuccessStatusCode)
        {
            var content = await result.Content.ReadAsStringAsync();

            createMessage = $"Error, server responded with: {content}, {result.StatusCode}";
        }
        else
        {
            createMessage = "New Association Member created";
            createMessageType = SiteNoticeType.Info;

            // Stop showing the form
            showNewForm = false;
        }

        await InvokeAsync(StateHasChanged);
    }

    private async Task FetchTotalCount()
    {
        try
        {
            var count = await Http.GetFromJsonAsync<long>("api/v1/AssociationMember/total");
            totalMembers = count.ToString();
        }
        catch (HttpRequestException e)
        {
            totalMembers = $"Network request failed: {e.Message}";
        }

        await InvokeAsync(StateHasChanged);
    }
}
