@page "/lfs/{Id:long}/{*FileBrowserPath}"
@inject HttpClient Http
@inject NotificationHandler NotificationHandler
@inject NavigationManager NavigationManager
@inherits SingleResourcePage<LFSProjectDTO, LFSProjectUpdated, long>
@using RevolutionaryWebApp.Shared.Models
@using RevolutionaryWebApp.Shared
@using RevolutionaryWebApp.Client.Services
@using RevolutionaryWebApp.Shared.Notifications
@using SharedBase.Utilities
@using RevolutionaryWebApp.Shared.Models.Enums
@implements IAsyncDisposable

<SingleResourceDisplayer Error="@Error" Loading="@Loading" HasData="@(Data != null)">
    @if (Data != null)
    {
        <h3>Git LFS Project @Data.Name</h3>

        <ul>
            <li><strong>Public</strong>: @Data.Public</li>
            <li><strong>Git LFS URL</strong>: TODO: reimplement this</li>
            <li><strong>Repository URL</strong>: <a href="@Data.RepoUrl">@Data.RepoUrl</a></li>
            <li><strong>Git LFS URL</strong>: @ComputeLfsURL()</li>
            <li><strong>Clone URL</strong>: @Data.CloneUrl</li>
            <li><strong>File Tree Branch</strong>: @Data.BranchToBuildFileTreeFor</li>
            <li><strong>Created At</strong>: @Data.CreatedAt.ToLocalTime().ToString("G")</li>
            <li><strong>Settings Updated At</strong>: @Data.UpdatedAt.ToLocalTime().ToString("G")</li>

            <AccessLimited RequiredAccess="GroupType.Admin" AutoRedirectIfNotLoggedIn="@false">
                <li><strong>Deleted</strong>: @Data.Deleted</li>
            </AccessLimited>
        </ul>

        <AccessLimited AutoRedirectIfNotLoggedIn="false" RequiredAccess="GroupType.Admin">

            <LFSProjectEditor Data="@Data" />

            <div class="mt-2"></div>
        </AccessLimited>

        <AdminResourceDeleteButtons Deleted="@Data.Deleted" Name="@Data.Name" Id="@Data.Id"
                                    DeleteURLBase="api/v1/LFSProject"
                                    DeletePromptTitle="Delete this LFS Project?" />

        <p>
            Visit your profile to find your LFS access token, which you need to use in place of your password when
            Git asks to authenticate for Git LFS access.
        </p>

        <h3>Files</h3>

        @if (Data.FileTreeUpdated.HasValue)
        {
            <p>
                File tree generated at: <RecentTimeShortener Time="@Data.FileTreeUpdated.Value" /> from commit:
                @Data.FileTreeCommit for branch @Data.BranchToBuildFileTreeFor
            </p>
        }
        else
        {
            <p>
                File tree not generated yet. It will be made from branch @Data.BranchToBuildFileTreeFor
            </p>
        }

        <LFSProjectFileBrowser BasePath="@($"lfs/{Data.Id}/")" RootFolderName="@Data.Name" ProjectId="@Data.Id"
                               ProjectRepoURL="@Data.RepoUrl" FileBrowserPath="@FileBrowserPath"
                               ProjectBranch="@Data.BranchToBuildFileTreeFor"/>

        <AccessLimited AutoRedirectIfNotLoggedIn="false" RequiredAccess="GroupType.Developer">
            <br />
            <StatusMessageShower Message="@statusMessage" Type="@statusMessageType" OnClosed="@HideMessage" />

            <Button ButtonStyle="warning" Enabled="@(!processing)" Spinner="@processing" OnPressed="@RequestRefresh">
                Refresh
            </Button>
            <AccessLimited AutoRedirectIfNotLoggedIn="false" RequiredAccess="GroupType.Admin">
                <Button class="mx-1" ButtonStyle="danger" Enabled="@(!processing && !rebuildPressed)"
                        Spinner="@processing" OnPressed="@RequestRebuild">
                    Rebuild
                </Button>
            </AccessLimited>
        </AccessLimited>

        <hr />
        <h3>Statistics</h3>
        <table class="table table-bordered">
            @if (Data.TotalSizeUpdated.HasValue)
            {
                <caption>Statistics updated: <RecentTimeShortener Time="@Data.TotalSizeUpdated.Value" /></caption>
            }
            else
            {
                <caption>Statistics have not been updated yet</caption>
            }
            <tbody>
            <tr>
                <th scope="row">Total size</th>
                <td>@Data.TotalObjectSize.BytesToMiB()</td>
            </tr>
            <tr>
                <th scope="row">Object count</th>
                <td>@Data.TotalObjectCount</td>
            </tr>
            </tbody>
        </table>

        <GitLfsRawObjects Id="@Id" />

        <DevCenterTitle>LFS Project @Data.Name</DevCenterTitle>
    }
</SingleResourceDisplayer>

@code {

    private bool processing;
    private string? statusMessage;
    private SiteNoticeType statusMessageType = SiteNoticeType.Danger;

    private bool rebuildPressed;

    [Parameter]
    public string? FileBrowserPath { get; set; }

    protected override Task<LFSProjectDTO?> StartQuery()
    {
        return Http.GetFromJsonAsync<LFSProjectDTO>($"api/v1/LFSProject/{Id}");
    }

    public override void GetWantedListenedGroups(IUserGroupData currentUserGroups, ISet<string> groups)
    {
        groups.Add(NotificationGroups.LFSItemUpdatedPrefix + Id);
    }

    public async ValueTask DisposeAsync()
    {
        await NotificationHandler.Unregister(this);
    }

    protected override Task OnFirstDataReceived()
    {
        return NotificationHandler.Register(this);
    }

    private string ComputeLfsURL()
    {
        return new Uri(new Uri(NavigationManager.BaseUri), Data!.LfsUrlSuffix).ToString();
    }

    private void HideMessage()
    {
        statusMessage = null;
    }

    private async Task RequestRefresh()
    {
        processing = true;
        statusMessage = null;
        statusMessageType = SiteNoticeType.Danger;
        await InvokeAsync(StateHasChanged);

        HttpResponseMessage result;

        try
        {
            result = await Http.PostAsync($"api/v1/LFSProject/{Id}/refreshFileTree", new StringContent(string.Empty));
        }
        catch (HttpRequestException e)
        {
            statusMessage = $"Network request failed: {e.Message}";
            processing = false;
            await InvokeAsync(StateHasChanged);
            return;
        }

        processing = false;

        if (!result.IsSuccessStatusCode)
        {
            var content = await result.Content.ReadAsStringAsync();

            statusMessage = $"Error, server responded with: {content}, {result.StatusCode}";
        }
        else
        {
            statusMessage = "Refresh request succeeded. File data should refresh within a few minutes.";
            statusMessageType = SiteNoticeType.Info;
        }

        await InvokeAsync(StateHasChanged);
    }

    private async Task RequestRebuild()
    {
        processing = true;
        statusMessage = null;
        statusMessageType = SiteNoticeType.Danger;
        await InvokeAsync(StateHasChanged);

        HttpResponseMessage result;

        try
        {
            result = await Http.PostAsync($"api/v1/LFSProject/{Id}/rebuildFileTree", new StringContent(string.Empty));
        }
        catch (HttpRequestException e)
        {
            statusMessage = $"Network request failed: {e.Message}";
            processing = false;
            await InvokeAsync(StateHasChanged);
            return;
        }

        processing = false;

        if (!result.IsSuccessStatusCode)
        {
            var content = await result.Content.ReadAsStringAsync();

            statusMessage = $"Error, server responded with: {content}, {result.StatusCode}";
        }
        else
        {
            statusMessage = "Rebuild request succeeded. File data should disappear and then reappear " +
                "within a few minutes.";
            statusMessageType = SiteNoticeType.Primary;

            rebuildPressed = true;
        }

        await InvokeAsync(StateHasChanged);
    }
}
