@page "/builds/{Id:long}"
@inject HttpClient Http
@inject NotificationHandler NotificationHandler
@inject NavigationManager NavigationManager
@inject CurrentUserInfo CurrentUserInfo
@inherits SingleResourcePage<DevBuildDTO, DevBuildUpdated, long>
@using RevolutionaryWebApp.Shared.Models
@using RevolutionaryWebApp.Client.Services
@using RevolutionaryWebApp.Shared
@using RevolutionaryWebApp.Shared.Models.Enums
@using RevolutionaryWebApp.Shared.Notifications
@implements IAsyncDisposable

@if (Data == null)
{
    <h3>DevBuild (@Id)</h3>
}

<AccessLimited RequiredAccess="GroupType.User">
    <SingleResourceDisplayer Error="@Error" Loading="@Loading" HasData="@(Data != null)">
        @if (Data != null)
        {
            <h3>DevBuild (@Id) @Data.BuildHash for @Data.Platform</h3>

            <h4>Properties</h4>

            <ul>
                <li><strong>Hash</strong>: @Data.BuildHash</li>
                <li><strong>Platform</strong>: @Data.Platform</li>
                <li><strong>Build of the Day (BOTD)</strong>: @Data.BuildOfTheDay</li>
                <li><strong>Branch (reported by uploader)</strong>: @Data.Branch</li>
                <li><strong>Verified</strong>: @Data.Verified <strong>by</strong>: ?</li>
                <li><strong>Anonymous</strong>: @Data.Anonymous</li>
                <li><strong>Important</strong>: @Data.Important</li>
                <li><strong>Keep</strong>: @Data.Keep</li>
                <li><strong>Downloads</strong>: @Data.Downloads</li>
                <li><strong>Score</strong>: @Data.Score</li>
                <li><strong>Related PR (not implemented yet)</strong>: </li>
                <li><strong>Created At</strong>: @Data.CreatedAt.ToLocalTime().ToString("G")</li>
                <li><strong>Updated At</strong>: @Data.UpdatedAt.ToLocalTime().ToString("G")</li>
            </ul>

            <h4>Description</h4>
            <pre>@Data.Description</pre>

            <AccessLimited RequiredAccess="GroupType.Developer">
                <DevBuildEditor Data="@Data" />

                <br />
            </AccessLimited>

            <h4 class="mt-2">Sibling Builds</h4>
            <DevBuildSiblingList Id="@Id" />

            <AccessLimited RequiredAccess="GroupType.Developer">

                <h4 class="mt-3">Actions</h4>

                <StatusMessageShower Message="@statusMessage" Type="@statusMessageType"
                                     OnClosed="@HideStatusMessage" />

                @if(!Data.BuildOfTheDay)
                {
                    <Button Enabled="@CanMakeBOTD" ButtonStyle="primary" class="mb-2" Spinner="@processing"
                            OnPressed="@MakeBOTD">
                        Make Build of the Day
                    </Button>
                } else if (CurrentUserInfo.IsAdmin)
                {
                    <Button Enabled="@(!processing)" ButtonStyle="warning" class="mb-2" Spinner="@processing"
                            OnPressed="@RemoveBOTDStatus">
                        Remove BOTD Status (from ALL builds)
                    </Button>
                }
                else
                {
                    <p>Already BOTD</p>
                }

                <br />

                <DevBuildVerifyControls Data="@Data" />

                <hr />

                @if (Data.BuildOfTheDay || Data.Important)
                {
                    @* TODO: allow admin to remove important status *@
                    <p>This build is kept as the BOTD or as an important build</p>
                }
                else
                {
                    @if (Data.Keep)
                    {
                        <Button Enabled="@(!processing)" ButtonStyle="warning"
                                OnPressed="@RemoveKeptStatus">
                            Remove Kept Status
                        </Button>
                    }
                    else
                    {
                        <Button Enabled="@(!processing)" ButtonStyle="primary" OnPressed="@AddKeptStatus">
                            Mark as Kept
                        </Button>
                    }
                }

                <AccessLimited RequiredAccess="GroupType.Admin">
                    <br />
                    @* TODO: implement the build delete button *@
                    <Button Enabled="@false" ButtonStyle="danger" class="mt-3">Delete</Button>
                </AccessLimited>

            </AccessLimited>

            <DevCenterTitle>DevBuild @Data.Id</DevCenterTitle>
        }
    </SingleResourceDisplayer>
</AccessLimited>

@code {
    private bool processing;
    private string? statusMessage;
    private SiteNoticeType statusMessageType = SiteNoticeType.Danger;

    private bool CanMakeBOTD => !processing && Data is {BuildOfTheDay: false } &&
        !string.IsNullOrEmpty(Data.Description) && (Data.Verified || !Data.Anonymous);

    protected override Task<DevBuildDTO?> StartQuery()
    {
        return Http.GetFromJsonAsync<DevBuildDTO>($"api/v1/DevBuilds/{Id}");
    }

    public override void GetWantedListenedGroups(IUserGroupData currentUserGroups, ISet<string> groups)
    {
        groups.Add(NotificationGroups.DevBuildUpdatedPrefix + Id);
    }

    public async ValueTask DisposeAsync()
    {
        await NotificationHandler.Unregister(this);
    }

    protected override Task OnFirstDataReceived()
    {
        return NotificationHandler.Register(this);
    }

    private void HideStatusMessage()
    {
        statusMessage = null;
    }

    private async Task MakeBOTD()
    {
        processing = true;
        statusMessage = null;
        statusMessageType = SiteNoticeType.Danger;
        await InvokeAsync(StateHasChanged);

        HttpResponseMessage result;

        try
        {
            result = await Http.PostAsJsonAsync("api/v1/DevBuilds/botd", Id);
        }
        catch (HttpRequestException e)
        {
            statusMessage = $"Network request failed: {e.Message}";
            processing = false;
            await InvokeAsync(StateHasChanged);
            return;
        }

        processing = false;

        if (!result.IsSuccessStatusCode)
        {
            var content = await result.Content.ReadAsStringAsync();

            statusMessage = $"Error, server responded with: {content}, {result.StatusCode}";
        }
        else
        {
            statusMessage = "BOTD status set";
            statusMessageType = SiteNoticeType.Primary;
        }

        await InvokeAsync(StateHasChanged);
    }

    private async Task RemoveBOTDStatus()
    {
        processing = true;
        statusMessage = null;
        statusMessageType = SiteNoticeType.Danger;
        await InvokeAsync(StateHasChanged);

        HttpResponseMessage result;

        try
        {
            result = await Http.DeleteAsync("api/v1/DevBuilds/botd");
        }
        catch (HttpRequestException e)
        {
            statusMessage = $"Network request failed: {e.Message}";
            processing = false;
            await InvokeAsync(StateHasChanged);
            return;
        }

        processing = false;

        if (!result.IsSuccessStatusCode)
        {
            var content = await result.Content.ReadAsStringAsync();

            statusMessage = $"Error, server responded with: {content}, {result.StatusCode}";
        }
        else
        {
            statusMessage = "All BOTD builds cleared";
            statusMessageType = SiteNoticeType.Primary;
        }

        await InvokeAsync(StateHasChanged);
    }

    private async Task AddKeptStatus()
    {
        processing = true;
        statusMessage = null;
        statusMessageType = SiteNoticeType.Danger;
        await InvokeAsync(StateHasChanged);

        HttpResponseMessage result;

        try
        {
            result = await Http.PostAsJsonAsync("api/v1/DevBuilds/kept", Id);
        }
        catch (HttpRequestException e)
        {
            statusMessage = $"Network request failed: {e.Message}";
            processing = false;
            await InvokeAsync(StateHasChanged);
            return;
        }

        processing = false;

        if (!result.IsSuccessStatusCode)
        {
            var content = await result.Content.ReadAsStringAsync();

            statusMessage = $"Error, server responded with: {content}, {result.StatusCode}";
        }
        else
        {
            statusMessage = "Keep status set. This build will not be automatically deleted.";
            statusMessageType = SiteNoticeType.Primary;
        }

        await InvokeAsync(StateHasChanged);
    }

    private async Task RemoveKeptStatus()
    {
        processing = true;
        statusMessage = null;
        statusMessageType = SiteNoticeType.Danger;
        await InvokeAsync(StateHasChanged);

        HttpResponseMessage result;

        try
        {
            result = await Http.DeleteAsync($"api/v1/DevBuilds/kept/{Id}");
        }
        catch (HttpRequestException e)
        {
            statusMessage = $"Network request failed: {e.Message}";
            processing = false;
            await InvokeAsync(StateHasChanged);
            return;
        }

        processing = false;

        if (!result.IsSuccessStatusCode)
        {
            var content = await result.Content.ReadAsStringAsync();

            statusMessage = $"Error, server responded with: {content}, {result.StatusCode}";
        }
        else
        {
            statusMessage = $"Kept status unset. This will be automatically deleted after " +
                $"{Math.Round(AppInfo.UnimportantDevBuildKeepDuration.TotalDays)} days.";
            statusMessageType = SiteNoticeType.Warning;
        }

        await InvokeAsync(StateHasChanged);
    }
}
