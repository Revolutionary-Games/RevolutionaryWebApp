@page "/pages/{Id:long}"
@inject HttpClient Http
@inject NotificationHandler NotificationHandler
@inherits RevolutionaryWebApp.Client.Shared.CMS.EditablePageView
@using RevolutionaryWebApp.Client.Services
@using RevolutionaryWebApp.Shared.Models.Enums
@using RevolutionaryWebApp.Shared.Models.Pages
@implements IAsyncDisposable

<AccessLimited RequiredAccess="GroupType.SitePageEditor" OrHasOverride="GroupType.Admin">
    <SingleResourceDisplayer Error="@Error" Loading="@Loading" HasData="@(Data != null)">
        @if (Data != null)
        {
            <PageTitleAndDetails Data="@Data" TypeName="Page"/>

            <ResourceDeleteButtons Deleted="@Data.Deleted" Name="@Data.Title" Id="@Data.Id"
                                   DeleteURLBase="api/v1/Pages"
                                   DeletePromptTitle="Delete this page?" OnDeleted="@OnDeleted"
                                   OnRestored="@OnRestored"/>

            <EditConflictNoticeShower Show="@versionConflict" OnClosed="@SuppressEditWarning"/>

            @if (Data.Visibility != PageVisibility.HiddenDraft)
            {
                <AccessLimited RequiredAccess="GroupType.SiteLayoutPublisher" OrHasOverride="GroupType.Admin">
                    <AccessMissingContent>
                        <StatusMessageShower Message="You may not have permission to edit this non-draft page"/>
                    </AccessMissingContent>
                </AccessLimited>
            }

            <PagePropertiesEditor Data="@Data"/>

            <PageEditorWithPreview Data="@Data"/>

            <DevCenterTitle>Edit Page @Id</DevCenterTitle>
        }
    </SingleResourceDisplayer>


</AccessLimited>

@code {

    protected override PageType EditedPageType => PageType.NormalPage;

    protected override Task<VersionedPageDTO?> StartQuery()
    {
        return Http.GetFromJsonAsync<VersionedPageDTO>($"api/v1/Pages/{Id}");
    }

    protected override Task OnFirstDataReceived()
    {
        return NotificationHandler.Register(this);
    }

    public async ValueTask DisposeAsync()
    {
        await NotificationHandler.Unregister(this);
    }

    protected override bool OnUpdateNotificationReceived(VersionedPageDTO newData)
    {
        if (newData.Deleted)
        {
            OnDeleted();
            return false;
        }

        return base.OnUpdateNotificationReceived(newData);
    }

    private async void OnDeleted()
    {
        if (Data != null)
        {
            Data.Deleted = true;
        }

        await InvokeAsync(StateHasChanged);
    }

    private async void OnRestored()
    {
        if (Data != null)
        {
            Data.Deleted = false;
        }

        await InvokeAsync(StateHasChanged);
    }

}
