@page "/pages"
@inject HttpClient Http
@inject NavigationManager NavManager
@inject ComponentUrlHelper URLHelper
@inject NotificationHandler NotificationHandler
@using RevolutionaryWebApp.Shared.Models.Enums
@using RevolutionaryWebApp.Shared.Notifications
@using RevolutionaryWebApp.Shared
@using RevolutionaryWebApp.Shared.Models
@using RevolutionaryWebApp.Client.Services
@using System.Threading
@using RevolutionaryWebApp.Shared.Models.Pages
@using SharedBase.Utilities
@implements RevolutionaryWebApp.Client.Services.INotificationHandler<PageListUpdated>
@inherits PaginatedPage<RevolutionaryWebApp.Shared.Models.Pages.VersionedPageInfo>
<AccessLimited RequiredAccess="GroupType.SitePageEditor" OrHasOverride="GroupType.Admin">
    <h3>Pages</h3>

    <p>
        Pages are main website pages that don't appear in the news feed of new posts. These are pages like the main
        page and various info pages.
    </p>

    @if (!string.IsNullOrEmpty(Error))
    {
        <div class="alert alert-danger" role="alert">
            @Error
        </div>
    }
    else
    {
        <PaginatedTable ShowPaginator="@(Data != null)" CurrentPage="@Data?.CurrentPage" PageCount="@Data?.PageCount"
                        OnPageChanged="async e => await ChangePage(e)"
                        OnSortChanged="async column => await ChangeSort(column)"
                        GetSortClass="@SortClass"
                        ShowContentSpinner="@VisibleFetchInProgress"
                        Columns="@columns" UseNonFixedColumns="@true"
                        ShowNoContent="@NoItemsFound">
            @if (Data != null)
            {
                @foreach (var item in Data.Results)
                {
                    <tr @key="item.Id">
                        <th scope="row"><NavLink href="@($"pages/{item.Id}")">@item.Title.Truncate(70)</NavLink></th>
                        @if (!string.IsNullOrEmpty(item.Permalink))
                        {
                            // TODO: this needs to fetch the live site base URL from somewhere
                            <td><a href="@($"/{item.Permalink}")" target="_blank">@item.Permalink.Truncate()</a></td>
                        }
                        else if(item.Visibility != PageVisibility.HiddenDraft)
                        {
                            <td>MISSING</td>
                        }
                        else
                        {
                            <td></td>
                        }

                        <td>
                            @switch (item.Visibility)
                            {
                                case PageVisibility.HiddenDraft:
                                    <span class="badge bg-secondary">draft</span>
                                    break;
                                case PageVisibility.Public:
                                    break;
                                case PageVisibility.VisibleToDevelopers:
                                    <span class="badge bg-warning">developer-only</span>
                                    break;
                                default:
                                    <span>@item.Visibility.ToString()</span>
                                    break;
                            }
                        </td>

                        <td><RecentTimeShortener Time="@item.UpdatedAt"/></td>
                        <td><UsernameDisplayer UserId="@item.LastEditorId"/></td>
                        <td><RecentTimeShortener Time="@item.CreatedAt"/></td>
                        <td><UsernameDisplayer UserId="@item.CreatorId"/></td>

                        <td>
                            @if (item.PublishedAt != null)
                            {
                                <RecentTimeShortener Time="@item.PublishedAt.Value"/>
                            }
                        </td>
                    </tr>
                }
            }
        </PaginatedTable>
    }

    <AccessLimited RequiredAccess="GroupType.Admin" AutoRedirectIfNotLoggedIn="@false">
        <hr />

        @if (!showNewForm)
        {
            <StatusMessageShower Message="@createMessage" Type="@createMessageType" />
        }

        <Button class="mb-3 me-1" ButtonStyle="success" OnPressed="@ToggleCreateNew" Enabled="@(!processingNewForm)">
            New
        </Button>

        @if (showNewForm)
        {
            <form>
                <div class="row">
                    <div class="mb-3 col-md-12">
                        <label class="form-label" for="newPageTitle">Page Title</label>
                        <input type="text" class="form-control" id="newPageTitle" @bind="newTitle"
                               @bind:event="oninput">
                    </div>
                </div>

                @* TODO: templates *@
                <div class="row">
                    <div class="mb-3 col-md-12">
                        <label class="form-label me-1" for="newPageTemplate">Template</label>
                        <select class="form-select" id="newPageTemplate" @bind="newTemplate">
                            <option value="@null">None</option>
                        </select>
                    </div>
                </div>

                <StatusMessageShower Message="@createMessage" Type="@createMessageType" />
                <Button class="my-1" Enabled="@CanCreateNew" OnPressed="@CreateNew" Spinner="@processingNewForm">
                    Create
                </Button>
            </form>
        }

        <DeletedResourceViewer ButtonClass="mb-3" FetchListEndpoint="api/v1/Pages?deleted=true"
                               RestoreEndpoint="api/v1/Pages/{0}/restore" />

    </AccessLimited>

    <PageTitle>Site Pages</PageTitle>
</AccessLimited>

@code {

    private readonly List<TableColumn> columns = new()
    {
        new TableColumn("Title", true),
        new TableColumn("Live Link", false),
        new TableColumn("State", false),
        new TableColumn("Updated At", true, "UpdatedAt"),
        new TableColumn("Edited By", false),
        new TableColumn("Created At", true, "CreatedAt"),
        new TableColumn("Published At", false, "PublishedAt"),
        new TableColumn("CreatedBy", false),
    };

    // TODO: template parameter setting
    // private readonly Dictionary<string, string> templateParameters = new();

    // private List<VersionedPageTemplateInfo>? loadedTemplates;

    private string? createMessage;
    private SiteNoticeType createMessageType;

    private bool showNewForm;
    private bool processingNewForm;
    private long? newTemplate;
    private string? newTitle;

    private bool CanCreateNew => !processingNewForm && !string.IsNullOrEmpty(newTitle);

    public Pages() : base(new SortHelper("UpdatedAt", SortDirection.Descending))
    {
    }

    protected override async Task OnInitializedAsync()
    {
        await NotificationHandler.Register(this);
        await base.OnInitializedAsync();
    }

    public override Task SetParametersAsync(ParameterView parameters)
    {
        this.SetParametersFromQueryString(NavManager);

        return base.SetParametersAsync(parameters);
    }

    public Task Handle(PageListUpdated notification, CancellationToken cancellationToken)
    {
        return HandleItemNotification(notification);
    }

    public void GetWantedListenedGroups(IUserGroupData currentUserGroups, ISet<string> groups)
    {
        groups.Add(NotificationGroups.CIProjectListUpdated);

        if (currentUserGroups.HasGroup(GroupType.Developer))
            groups.Add(NotificationGroups.PrivateCIProjectUpdated);
    }

    public override async ValueTask DisposeAsync()
    {
        await base.DisposeAsync();
        await NotificationHandler.Unregister(this);
    }

    protected override Task<PagedResult<VersionedPageInfo>?> StartQuery(Dictionary<string, string?> requestParams)
    {
        return Http.GetFromJsonAsync<PagedResult<VersionedPageInfo>>(
            QueryHelpers.AddQueryString("api/v1/Pages", requestParams));
    }

    protected override async Task OnQuerySent(Dictionary<string, string?> requestParams)
    {
        await URLHelper.UpdateUrlHistoryIfChanged(requestParams);
    }

    private void ToggleCreateNew()
    {
        if (showNewForm)
        {
            showNewForm = false;
        }
        else
        {
            showNewForm = true;
            createMessage = null;

            // Reset form status
            newTitle = null;
            newTemplate = null;

            // templateParameters.Clear();
        }

        StateHasChanged();
    }

    private async void CreateNew()
    {
        createMessageType = SiteNoticeType.Danger;

        if (newTitle == null)
        {
            createMessage = "Missing title";
            await InvokeAsync(StateHasChanged);
            return;
        }

        processingNewForm = true;
        createMessage = null;
        await InvokeAsync(StateHasChanged);

        HttpResponseMessage result;

        try
        {
            result = await Http.PostAsJsonAsync("api/v1/Pages", new VersionedPageDTO
            {
                Title = newTitle,
                Visibility = PageVisibility.HiddenDraft,
                LatestContent = "(new)",
                LastEditComment = "Initial page version",
                VersionNumber = 1,
            });
        }
        catch (HttpRequestException e)
        {
            createMessage = $"Network request failed: {e.Message}";
            processingNewForm = false;
            await InvokeAsync(StateHasChanged);
            return;
        }

        processingNewForm = false;

        var content = await result.Content.ReadAsStringAsync();

        if (!result.IsSuccessStatusCode)
        {
            createMessage = $"Error, server responded with: {content}, {result.StatusCode}";

            await InvokeAsync(StateHasChanged);
        }
        else
        {
            createMessage = "New page created. Will switch to editing it in 5 seconds";
            showNewForm = false;

            long newPageId;

            try
            {
                newPageId = long.Parse(content);
            }
            catch (Exception e)
            {
                createMessage = "New page created, but could not detect the ID of the new page: " + e.Message;
                await InvokeAsync(StateHasChanged);
                return;
            }

            createMessageType = SiteNoticeType.Success;

            await InvokeAsync(StateHasChanged);

            await Task.Delay(TimeSpan.FromSeconds(5));
            NavManager.NavigateTo($"/pages/{newPageId}");
        }
    }

}
