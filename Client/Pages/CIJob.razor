@page "/ci/{ProjectId:long}/build/{BuildId:long}/jobs/{Id:long}"
@inject HttpClient Http
@inject NotificationHandler NotificationHandler
@inherits SingleResourcePage<CIJobDTO, CIJobUpdated, long>
@using RevolutionaryWebApp.Shared.Models
@using RevolutionaryWebApp.Client.Services
@using RevolutionaryWebApp.Client.Utilities
@using RevolutionaryWebApp.Shared
@using RevolutionaryWebApp.Shared.Models.Enums
@using RevolutionaryWebApp.Shared.Notifications
@using SharedBase.Utilities
@implements IAsyncDisposable

<SingleResourceDisplayer Error="@Error" Loading="@Loading" HasData="@(Data != null)">
    @if (Data != null)
    {
        <h3>
            CI Job @Data.JobName for Build #@Data.CiBuildId in @Data.ProjectName
            @if (Data.State == CIJobState.Finished)
            {
                @if (Data.Succeeded)
                {
                    <span class="badge badge-success ml-2">Success</span>
                }
                else
                {
                    <span class="badge badge-danger ml-2">Failed</span>
                }
            }
        </h3>
        <ul>
            <li><strong>State</strong>: @Data.State</li>
            <li>
                <strong>Succeeded</strong>:
                @(Data.State == CIJobState.Finished ? Data.Succeeded.ToString() : "pending")
            </li>
            <li><strong>Started At</strong>: <RecentTimeShortener Time="@Data.CreatedAt" /></li>
            <li>
                <strong>Time Waiting For Server</strong>: @(Data.TimeWaitingForServer?.ToShortForm() ?? "still waiting")
            </li>
            <li><strong>Ran On Server</strong>: @(Data.RanOnServer ?? "not started yet")</li>
            <li>
                <strong>Total Duration</strong>: <DurationDisplayer Start="@Data.CreatedAt" End="@Data.FinishedAt" />
            </li>
        </ul>

        <NavLink href="@($"/ci/{Data.CiProjectId}/build/{Data.CiBuildId}")" Match="NavLinkMatch.All">
            Part of Build #@Data.CiBuildId
        </NavLink>

        <NavLink href="@($"/ci/{Data.CiProjectId}")" Match="NavLinkMatch.All">
            for @Data.ProjectName
        </NavLink>

        <AccessLimited RequiredAccess="GroupType.Developer" AutoRedirectIfNotLoggedIn="@false">
            <br />
            <StatusMessageShower Message="@statusMessage" Type="@statusMessageType" />

            <Button Enabled="@(Data.State != CIJobState.Finished)" ButtonStyle="secondary" Spinner="@processing"
                    OnPressed="@CancelJob">
                Cancel
            </Button>
            <br />
        </AccessLimited>

        <br />

        <h4>Output</h4>

        @if (Data.OutputPurged)
        {
            <p>This job is so old that the output has been cleared</p>
        }
        else
        {
            <CIJobOutput ProjectId="@Data.CiProjectId" BuildId="@Data.CiBuildId" JobId="@Data.CiJobId"/>
        }

        <br />

        <h4>Artifacts</h4>

        <p>Artifact support has not been implemented. It might get done in the future if there is a need.</p>


        @* TODO: would be pretty cool to change the favicon based on the job status *@
        @if (Data.State == CIJobState.Finished)
        {
            @if (Data.Succeeded)
            {
                <DevCenterTitle>Succeeded @NameSuffix</DevCenterTitle>
            }
            else
            {
                <DevCenterTitle>FAILED @NameSuffix</DevCenterTitle>
            }
        }
        else
        {
            <DevCenterTitle>Running @NameSuffix</DevCenterTitle>
        }
    }
</SingleResourceDisplayer>

@code {
    private bool processing;
    private string? statusMessage;
    private SiteNoticeType statusMessageType = SiteNoticeType.Danger;

    [Parameter]
    public long ProjectId { get; set; }

    [Parameter]
    public long BuildId { get; set; }

    private string NameSuffix => Data != null ? $"Job {Data.CiBuildId}-{Data.CiJobId} for {Data.ProjectName}" :
        "Loading Job Info";

    protected override Task<CIJobDTO?> StartQuery()
    {
        return Http.GetFromJsonAsync<CIJobDTO>($"api/v1/CIProject/{ProjectId}/builds/{BuildId}/jobs/{Id}",
            HttpClientHelpers.GetOptionsWithSerializers());
    }

    public override void GetWantedListenedGroups(IUserGroupData currentUserGroups, ISet<string> groups)
    {
        if (Data != null)
            groups.Add(NotificationGroups.CIProjectsBuildsJobUpdatedPrefix + Data.NotificationsId);
    }

    public async ValueTask DisposeAsync()
    {
        await NotificationHandler.Unregister(this);
    }

    protected override Task OnFirstDataReceived()
    {
        return NotificationHandler.Register(this);
    }

    private async void CancelJob()
    {
        processing = true;
        statusMessage = null;
        statusMessageType = SiteNoticeType.Danger;
        await InvokeAsync(StateHasChanged);

        HttpResponseMessage result;

        try
        {
            result = await Http.PostAsync($"api/v1/CIBuildManagement/{ProjectId}/{BuildId}/jobs/{Id}/cancel",
                new StringContent(string.Empty));
        }
        catch (HttpRequestException e)
        {
            statusMessage = $"Network request failed: {e.Message}";
            processing = false;
            await InvokeAsync(StateHasChanged);
            return;
        }

        processing = false;

        if (!result.IsSuccessStatusCode)
        {
            var content = await result.Content.ReadAsStringAsync();

            statusMessage = $"Error, server responded with: {content}, {result.StatusCode}";
        }
        else
        {
            statusMessage = "Build canceled";
            statusMessageType = SiteNoticeType.Primary;
        }

        await InvokeAsync(StateHasChanged);
    }
}
