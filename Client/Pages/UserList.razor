@page "/users"
@inject HttpClient Http
@inject NavigationManager NavManager
@inject IJSRuntime JS
@inject ComponentUrlHelper URLHelper
@inject NotificationHandler NotificationHandler
@using RevolutionaryWebApp.Shared
@using RevolutionaryWebApp.Shared.Notifications
@using System.Threading
@using RevolutionaryWebApp.Client.Services
@using RevolutionaryWebApp.Shared.Models
@using RevolutionaryWebApp.Shared.Models.Enums
@implements RevolutionaryWebApp.Client.Services.INotificationHandler<UserListUpdated>
@inherits PaginatedPage<RevolutionaryWebApp.Shared.Models.UserInfo>

<h3>Users</h3>

<AccessLimited RequiredAccess="GroupType.Admin" RedirectOnInsufficientPermission="@true">
    @if (!string.IsNullOrEmpty(Error))
    {
        <div class="alert alert-danger" role="alert">
            @Error
        </div>
    }
    else
    {
        <PaginatedTable ShowPaginator="@(Data != null)" CurrentPage="@Data?.CurrentPage" PageCount="@Data?.PageCount"
                        OnPageChanged="async e => await ChangePage(e)"
                        OnSortChanged="async column => await ChangeSort(column)"
                        GetSortClass="@SortClass"
                        ShowContentSpinner="@VisibleFetchInProgress"
                        Columns="@columns"
                        ShowNoContent="@NoItemsFound">
            @if (Data != null)
            {
                @foreach (var item in Data.Results)
                {
                    <tr @key="item.Id">
                        <th scope="row"><NavLink class="nav-link" href="@($"users/{item.Id}")">
                            @item.Name
                        </NavLink></th>
                        <td>@item.Suspended</td>
                        <td>@item.SsoSource</td>
                        @* TODO: add back some basic group showing? *@
                        @*<td>@item.Developer</td>
                        <td>@item.Admin</td>*@
                        <td>@item.CreatedAt.ToLocalTime().ToString("G")</td>
                    </tr>
                }
            }
        </PaginatedTable>
    }

    <DevCenterTitle>Users</DevCenterTitle>
</AccessLimited>

@code {
    private readonly List<TableColumn> columns = new()
    {
        new TableColumn("Name", true, "UserName"),
        new TableColumn("Suspended", true),
        new TableColumn("SSO", true, "SsoSource"),

        // new TableColumn("Developer", false),
        // new TableColumn("Admin", false),
        new TableColumn("Created At", true, "CreatedAt"),
    };

    public UserList() : base(new SortHelper("CreatedAt", SortDirection.Descending))
    {
    }

    protected override async Task OnInitializedAsync()
    {
        await NotificationHandler.Register(this);
        await base.OnInitializedAsync();
    }

    public override Task SetParametersAsync(ParameterView parameters)
    {
        this.SetParametersFromQueryString(NavManager);

        return base.SetParametersAsync(parameters);
    }

    public Task Handle(UserListUpdated notification, CancellationToken cancellationToken)
    {
        return HandleItemNotification(notification);
    }

    public void GetWantedListenedGroups(IUserGroupData currentUserGroups, ISet<string> groups)
    {
        if (!currentUserGroups.HasGroup(GroupType.Admin))
            return;

        groups.Add(NotificationGroups.UserListUpdated);
    }

    public override async ValueTask DisposeAsync()
    {
        await base.DisposeAsync();
        await NotificationHandler.Unregister(this);
    }

    protected override Task<PagedResult<UserInfo>?> StartQuery(Dictionary<string, string?> requestParams)
    {
        return Http.GetFromJsonAsync<PagedResult<UserInfo>>(
            QueryHelpers.AddQueryString("api/v1/UserManagement", requestParams));
    }

    protected override async Task OnQuerySent(Dictionary<string, string?> requestParams)
    {
        await URLHelper.UpdateUrlHistoryIfChanged(requestParams);
    }

}
