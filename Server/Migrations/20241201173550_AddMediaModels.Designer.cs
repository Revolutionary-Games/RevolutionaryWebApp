// <auto-generated />
using System;
using System.Net;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using RevolutionaryWebApp.Server.Models;

#nullable disable

namespace RevolutionaryWebApp.Server.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241201173550_AddMediaModels")]
    partial class AddMediaModels
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("en_GB.UTF-8")
                .HasAnnotation("Npgsql:DatabaseTemplate", "template0")
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.HasSequence("dehydrated_objects_hilo")
                .IncrementsBy(10);

            modelBuilder.HasSequence("lfs_objects_hilo")
                .IncrementsBy(10);

            modelBuilder.HasSequence("project_git_files_hilo")
                .IncrementsBy(10);

            modelBuilder.HasSequence("storage_files_hilo")
                .IncrementsBy(10);

            modelBuilder.HasSequence("storage_item_versions_hilo")
                .IncrementsBy(10);

            modelBuilder.HasSequence("storage_items_hilo")
                .IncrementsBy(10);

            modelBuilder.Entity("CombinedFeedFeed", b =>
                {
                    b.Property<long>("CombinedFromFeedsId")
                        .HasColumnType("bigint")
                        .HasColumnName("combined_from_feeds_id");

                    b.Property<long>("CombinedIntoId")
                        .HasColumnType("bigint")
                        .HasColumnName("combined_into_id");

                    b.HasKey("CombinedFromFeedsId", "CombinedIntoId")
                        .HasName("pk_combined_feed_feed");

                    b.HasIndex("CombinedIntoId")
                        .HasDatabaseName("ix_combined_feed_feed_combined_into_id");

                    b.ToTable("combined_feed_feed", (string)null);
                });

            modelBuilder.Entity("DehydratedObjectDevBuild", b =>
                {
                    b.Property<long>("DehydratedObjectsId")
                        .HasColumnType("bigint")
                        .HasColumnName("dehydrated_objects_id");

                    b.Property<long>("DevBuildsId")
                        .HasColumnType("bigint")
                        .HasColumnName("dev_builds_id");

                    b.HasKey("DehydratedObjectsId", "DevBuildsId")
                        .HasName("pk_dehydrated_objects_dev_builds");

                    b.HasIndex("DevBuildsId")
                        .HasDatabaseName("ix_dehydrated_objects_dev_builds_dev_builds_id");

                    b.ToTable("dehydrated_objects_dev_builds", (string)null);
                });

            modelBuilder.Entity("GithubAutoCommentGithubPullRequest", b =>
                {
                    b.Property<long>("AutoCommentsId")
                        .HasColumnType("bigint")
                        .HasColumnName("auto_comments_id");

                    b.Property<long>("PostedOnPullRequestsId")
                        .HasColumnType("bigint")
                        .HasColumnName("posted_on_pull_requests_id");

                    b.HasKey("AutoCommentsId", "PostedOnPullRequestsId")
                        .HasName("pk_github_auto_comment_github_pull_request");

                    b.HasIndex("PostedOnPullRequestsId")
                        .HasDatabaseName("ix_github_auto_comment_github_pull_request_posted_on_pull_requ");

                    b.ToTable("github_auto_comment_github_pull_request", (string)null);
                });

            modelBuilder.Entity("RevolutionaryWebApp.Server.Models.AccessKey", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("HashedKeyCode")
                        .HasColumnType("text")
                        .HasColumnName("hashed_key_code");

                    b.Property<string>("KeyCode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("key_code");

                    b.Property<int>("KeyType")
                        .HasColumnType("integer")
                        .HasColumnName("key_type");

                    b.Property<DateTime?>("LastUsed")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_used");

                    b.Property<IPAddress>("LastUsedFrom")
                        .HasColumnType("inet")
                        .HasColumnName("last_used_from");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_access_keys");

                    b.HasIndex("HashedKeyCode")
                        .IsUnique()
                        .HasDatabaseName("ix_access_keys_hashed_key_code");

                    b.ToTable("access_keys", (string)null);
                });

            modelBuilder.Entity("RevolutionaryWebApp.Server.Models.ActionLogEntry", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Extended")
                        .HasMaxLength(1048576)
                        .HasColumnType("character varying(1048576)")
                        .HasColumnName("extended");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("message");

                    b.Property<long?>("PerformedById")
                        .HasColumnType("bigint")
                        .HasColumnName("performed_by_id");

                    b.HasKey("Id")
                        .HasName("pk_action_log_entries");

                    b.HasIndex("PerformedById")
                        .HasDatabaseName("ix_action_log_entries_performed_by_id");

                    b.ToTable("action_log_entries", (string)null);
                });

            modelBuilder.Entity("RevolutionaryWebApp.Server.Models.AdminAction", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Extended")
                        .HasMaxLength(1048576)
                        .HasColumnType("character varying(1048576)")
                        .HasColumnName("extended");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("message");

                    b.Property<long?>("PerformedById")
                        .HasColumnType("bigint")
                        .HasColumnName("performed_by_id");

                    b.Property<long?>("TargetUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("target_user_id");

                    b.HasKey("Id")
                        .HasName("pk_admin_actions");

                    b.HasIndex("PerformedById")
                        .HasDatabaseName("ix_admin_actions_performed_by_id");

                    b.HasIndex("TargetUserId")
                        .HasDatabaseName("ix_admin_actions_target_user_id");

                    b.ToTable("admin_actions", (string)null);
                });

            modelBuilder.Entity("RevolutionaryWebApp.Server.Models.AssociationMember", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool>("BoardMember")
                        .HasColumnType("boolean")
                        .HasColumnName("board_member");

                    b.Property<string>("CityOfResidence")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("city_of_residence");

                    b.Property<string>("CountryOfResidence")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("country_of_residence");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<bool>("CurrentPresident")
                        .HasColumnType("boolean")
                        .HasColumnName("current_president");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("FirstNames")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("first_names");

                    b.Property<bool>("HasBeenBoardMember")
                        .HasColumnType("boolean")
                        .HasColumnName("has_been_board_member");

                    b.Property<bool>("IsThriveDeveloper")
                        .HasColumnType("boolean")
                        .HasColumnName("is_thrive_developer");

                    b.Property<DateOnly>("JoinDate")
                        .HasColumnType("date")
                        .HasColumnName("join_date");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("last_name");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_association_members");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("ix_association_members_email");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasDatabaseName("ix_association_members_user_id");

                    b.ToTable("association_members", (string)null);
                });

            modelBuilder.Entity("RevolutionaryWebApp.Server.Models.Backup", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<long>("Size")
                        .HasColumnType("bigint")
                        .HasColumnName("size");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<bool>("Uploaded")
                        .HasColumnType("boolean")
                        .HasColumnName("uploaded");

                    b.HasKey("Id")
                        .HasName("pk_backups");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_backups_name");

                    b.ToTable("backups", (string)null);
                });

            modelBuilder.Entity("RevolutionaryWebApp.Server.Models.CiBuild", b =>
                {
                    b.Property<long>("CiProjectId")
                        .HasColumnType("bigint")
                        .HasColumnName("ci_project_id");

                    b.Property<long>("CiBuildId")
                        .HasColumnType("bigint")
                        .HasColumnName("ci_build_id");

                    b.Property<string>("Branch")
                        .HasColumnType("text")
                        .HasColumnName("branch");

                    b.Property<string>("CommitHash")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("commit_hash");

                    b.Property<string>("CommitMessage")
                        .HasColumnType("text")
                        .HasColumnName("commit_message");

                    b.Property<string>("Commits")
                        .HasColumnType("text")
                        .HasColumnName("commits");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("timezone('utc', now())");

                    b.Property<DateTime?>("FinishedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("finished_at");

                    b.Property<bool>("IsSafe")
                        .HasColumnType("boolean")
                        .HasColumnName("is_safe");

                    b.Property<string>("PreviousCommit")
                        .HasColumnType("text")
                        .HasColumnName("previous_commit");

                    b.Property<string>("RemoteRef")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("remote_ref");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("CiProjectId", "CiBuildId")
                        .HasName("pk_ci_builds");

                    b.ToTable("ci_builds", (string)null);
                });

            modelBuilder.Entity("RevolutionaryWebApp.Server.Models.CiJob", b =>
                {
                    b.Property<long>("CiProjectId")
                        .HasColumnType("bigint")
                        .HasColumnName("ci_project_id");

                    b.Property<long>("CiBuildId")
                        .HasColumnType("bigint")
                        .HasColumnName("ci_build_id");

                    b.Property<long>("CiJobId")
                        .HasColumnType("bigint")
                        .HasColumnName("ci_job_id");

                    b.Property<Guid?>("BuildOutputConnectKey")
                        .HasColumnType("uuid")
                        .HasColumnName("build_output_connect_key");

                    b.Property<string>("CacheSettingsJson")
                        .HasColumnType("text")
                        .HasColumnName("cache_settings_json");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("timezone('utc', now())");

                    b.Property<DateTime?>("FinishedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("finished_at");

                    b.Property<string>("HashedBuildOutputConnectKey")
                        .HasColumnType("text")
                        .HasColumnName("hashed_build_output_connect_key");

                    b.Property<string>("Image")
                        .HasColumnType("text")
                        .HasColumnName("image");

                    b.Property<string>("JobName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("job_name");

                    b.Property<bool>("OutputPurged")
                        .HasColumnType("boolean")
                        .HasColumnName("output_purged");

                    b.Property<string>("RanOnServer")
                        .HasColumnType("text")
                        .HasColumnName("ran_on_server");

                    b.Property<long>("RunningOnServerId")
                        .HasColumnType("bigint")
                        .HasColumnName("running_on_server_id");

                    b.Property<bool?>("RunningOnServerIsExternal")
                        .HasColumnType("boolean")
                        .HasColumnName("running_on_server_is_external");

                    b.Property<int>("State")
                        .HasColumnType("integer")
                        .HasColumnName("state");

                    b.Property<bool>("Succeeded")
                        .HasColumnType("boolean")
                        .HasColumnName("succeeded");

                    b.Property<TimeSpan?>("TimeWaitingForServer")
                        .HasColumnType("interval")
                        .HasColumnName("time_waiting_for_server");

                    b.HasKey("CiProjectId", "CiBuildId", "CiJobId")
                        .HasName("pk_ci_jobs");

                    b.HasIndex("HashedBuildOutputConnectKey")
                        .IsUnique()
                        .HasDatabaseName("ix_ci_jobs_hashed_build_output_connect_key");

                    b.ToTable("ci_jobs", (string)null);
                });

            modelBuilder.Entity("RevolutionaryWebApp.Server.Models.CiJobArtifact", b =>
                {
                    b.Property<long>("CiProjectId")
                        .HasColumnType("bigint")
                        .HasColumnName("ci_project_id");

                    b.Property<long>("CiBuildId")
                        .HasColumnType("bigint")
                        .HasColumnName("ci_build_id");

                    b.Property<long>("CiJobId")
                        .HasColumnType("bigint")
                        .HasColumnName("ci_job_id");

                    b.Property<long>("CiJobArtifactId")
                        .HasColumnType("bigint")
                        .HasColumnName("ci_job_artifact_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<long>("StorageItemId")
                        .HasColumnType("bigint")
                        .HasColumnName("storage_item_id");

                    b.HasKey("CiProjectId", "CiBuildId", "CiJobId", "CiJobArtifactId")
                        .HasName("pk_ci_job_artifacts");

                    b.HasIndex("StorageItemId")
                        .HasDatabaseName("ix_ci_job_artifacts_storage_item_id");

                    b.ToTable("ci_job_artifacts", (string)null);
                });

            modelBuilder.Entity("RevolutionaryWebApp.Server.Models.CiJobOutputSection", b =>
                {
                    b.Property<long>("CiProjectId")
                        .HasColumnType("bigint")
                        .HasColumnName("ci_project_id");

                    b.Property<long>("CiBuildId")
                        .HasColumnType("bigint")
                        .HasColumnName("ci_build_id");

                    b.Property<long>("CiJobId")
                        .HasColumnType("bigint")
                        .HasColumnName("ci_job_id");

                    b.Property<long>("CiJobOutputSectionId")
                        .HasColumnType("bigint")
                        .HasColumnName("ci_job_output_section_id");

                    b.Property<DateTime?>("FinishedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("finished_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Output")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("output");

                    b.Property<long>("OutputLength")
                        .HasColumnType("bigint")
                        .HasColumnName("output_length");

                    b.Property<DateTime>("StartedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("started_at")
                        .HasDefaultValueSql("timezone('utc', now())");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.HasKey("CiProjectId", "CiBuildId", "CiJobId", "CiJobOutputSectionId")
                        .HasName("pk_ci_job_output_sections");

                    b.ToTable("ci_job_output_sections", (string)null);
                });

            modelBuilder.Entity("RevolutionaryWebApp.Server.Models.CiProject", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("DefaultBranch")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("default_branch");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean")
                        .HasColumnName("deleted");

                    b.Property<bool>("Enabled")
                        .HasColumnType("boolean")
                        .HasColumnName("enabled");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("ProjectType")
                        .HasColumnType("integer")
                        .HasColumnName("project_type");

                    b.Property<bool>("Public")
                        .HasColumnType("boolean")
                        .HasColumnName("public");

                    b.Property<string>("RepositoryCloneUrl")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("repository_clone_url");

                    b.Property<string>("RepositoryFullName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("repository_full_name");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_ci_projects");

                    b.ToTable("ci_projects", (string)null);
                });

            modelBuilder.Entity("RevolutionaryWebApp.Server.Models.CiSecret", b =>
                {
                    b.Property<long>("CiProjectId")
                        .HasColumnType("bigint")
                        .HasColumnName("ci_project_id");

                    b.Property<long>("CiSecretId")
                        .HasColumnType("bigint")
                        .HasColumnName("ci_secret_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("SecretContent")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("secret_content");

                    b.Property<string>("SecretName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("secret_name");

                    b.Property<int>("UsedForBuildTypes")
                        .HasColumnType("integer")
                        .HasColumnName("used_for_build_types");

                    b.HasKey("CiProjectId", "CiSecretId")
                        .HasName("pk_ci_secrets");

                    b.HasIndex("CiProjectId", "SecretName", "UsedForBuildTypes")
                        .IsUnique()
                        .HasDatabaseName("ix_ci_secrets_ci_project_id_secret_name_used_for_build_types");

                    b.ToTable("ci_secrets", (string)null);
                });

            modelBuilder.Entity("RevolutionaryWebApp.Server.Models.Cla", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("active");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("RawMarkdown")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("raw_markdown");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id")
                        .HasName("pk_clas");

                    b.HasIndex("Active")
                        .HasDatabaseName("ix_clas_active");

                    b.ToTable("clas", (string)null);
                });

            modelBuilder.Entity("RevolutionaryWebApp.Server.Models.ClaSignature", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("ClaId")
                        .HasColumnType("bigint")
                        .HasColumnName("cla_id");

                    b.Property<string>("ClaInvalidationStoragePath")
                        .HasColumnType("text")
                        .HasColumnName("cla_invalidation_storage_path");

                    b.Property<string>("ClaSignatureStoragePath")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("cla_signature_storage_path");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("DeveloperUsername")
                        .HasColumnType("text")
                        .HasColumnName("developer_username");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("GithubAccount")
                        .HasColumnType("text")
                        .HasColumnName("github_account");

                    b.Property<string>("GithubEmail")
                        .HasColumnType("text")
                        .HasColumnName("github_email");

                    b.Property<long?>("GithubUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("github_user_id");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.Property<DateTime?>("ValidUntil")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("valid_until");

                    b.HasKey("Id")
                        .HasName("pk_cla_signatures");

                    b.HasIndex("ClaInvalidationStoragePath")
                        .IsUnique()
                        .HasDatabaseName("ix_cla_signatures_cla_invalidation_storage_path");

                    b.HasIndex("ClaSignatureStoragePath")
                        .IsUnique()
                        .HasDatabaseName("ix_cla_signatures_cla_signature_storage_path");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_cla_signatures_user_id");

                    b.HasIndex("ClaId", "Email")
                        .HasDatabaseName("ix_cla_signatures_cla_id_email");

                    b.HasIndex("ClaId", "GithubAccount")
                        .HasDatabaseName("ix_cla_signatures_cla_id_github_account");

                    b.ToTable("cla_signatures", (string)null);
                });

            modelBuilder.Entity("RevolutionaryWebApp.Server.Models.CombinedFeed", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<TimeSpan>("CacheTime")
                        .HasColumnType("interval")
                        .HasColumnName("cache_time");

                    b.Property<DateTime?>("ContentUpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("content_updated_at");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("HtmlFeedItemEntryTemplate")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("html_feed_item_entry_template");

                    b.Property<string>("LatestContent")
                        .HasColumnType("text")
                        .HasColumnName("latest_content");

                    b.Property<int>("MaxItems")
                        .HasColumnType("integer")
                        .HasColumnName("max_items");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id")
                        .HasName("pk_combined_feeds");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_combined_feeds_name");

                    b.ToTable("combined_feeds", (string)null);
                });

            modelBuilder.Entity("RevolutionaryWebApp.Server.Models.ControlledServer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("AWSInstanceType")
                        .HasColumnType("text")
                        .HasColumnName("aws_instance_type");

                    b.Property<bool>("CleanUpQueued")
                        .HasColumnType("boolean")
                        .HasColumnName("clean_up_queued");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<long>("CreatedVolumeSize")
                        .HasColumnType("bigint")
                        .HasColumnName("created_volume_size");

                    b.Property<string>("CreatedWithImage")
                        .HasColumnType("text")
                        .HasColumnName("created_with_image");

                    b.Property<string>("InstanceId")
                        .HasColumnType("text")
                        .HasColumnName("instance_id");

                    b.Property<DateTime>("LastMaintenance")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_maintenance");

                    b.Property<bool>("ProvisionedFully")
                        .HasColumnType("boolean")
                        .HasColumnName("provisioned_fully");

                    b.Property<IPAddress>("PublicAddress")
                        .HasColumnType("inet")
                        .HasColumnName("public_address");

                    b.Property<int>("ReservationType")
                        .HasColumnType("integer")
                        .HasColumnName("reservation_type");

                    b.Property<long?>("ReservedFor")
                        .HasColumnType("bigint")
                        .HasColumnName("reserved_for");

                    b.Property<DateTime?>("RunningSince")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("running_since");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<DateTime>("StatusLastChecked")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("status_last_checked");

                    b.Property<double>("TotalRuntime")
                        .HasColumnType("double precision")
                        .HasColumnName("total_runtime");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<int>("UsedDiskSpace")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(-1)
                        .HasColumnName("used_disk_space");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.Property<bool>("WantsMaintenance")
                        .HasColumnType("boolean")
                        .HasColumnName("wants_maintenance");

                    b.HasKey("Id")
                        .HasName("pk_controlled_servers");

                    b.ToTable("controlled_servers", (string)null);
                });

            modelBuilder.Entity("RevolutionaryWebApp.Server.Models.CrashReport", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("CondensedCallstack")
                        .HasColumnType("text")
                        .HasColumnName("condensed_callstack");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<uint>("DbVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.Property<Guid>("DeleteKey")
                        .HasColumnType("uuid")
                        .HasColumnName("delete_key");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<DateTime?>("DescriptionLastEdited")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("description_last_edited");

                    b.Property<long?>("DescriptionLastEditedById")
                        .HasColumnType("bigint")
                        .HasColumnName("description_last_edited_by_id");

                    b.Property<string>("DumpLocalFileName")
                        .HasColumnType("text")
                        .HasColumnName("dump_local_file_name");

                    b.Property<long?>("DuplicateOfId")
                        .HasColumnType("bigint")
                        .HasColumnName("duplicate_of_id");

                    b.Property<string>("ExitCodeOrSignal")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("exit_code_or_signal");

                    b.Property<DateTime>("HappenedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("happened_at");

                    b.Property<string>("HashedDeleteKey")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("hashed_delete_key");

                    b.Property<string>("Logs")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("logs");

                    b.Property<int>("Platform")
                        .HasColumnType("integer")
                        .HasColumnName("platform");

                    b.Property<string>("PrimaryCallstack")
                        .HasColumnType("text")
                        .HasColumnName("primary_callstack");

                    b.Property<bool>("Public")
                        .HasColumnType("boolean")
                        .HasColumnName("public");

                    b.Property<string>("ReporterEmail")
                        .HasColumnType("text")
                        .HasColumnName("reporter_email");

                    b.Property<int>("State")
                        .HasColumnType("integer")
                        .HasColumnName("state");

                    b.Property<string>("Store")
                        .HasColumnType("text")
                        .HasColumnName("store");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<IPAddress>("UploadedFrom")
                        .IsRequired()
                        .HasColumnType("inet")
                        .HasColumnName("uploaded_from");

                    b.Property<string>("Version")
                        .HasColumnType("text")
                        .HasColumnName("version");

                    b.Property<string>("WholeCrashDump")
                        .HasColumnType("text")
                        .HasColumnName("whole_crash_dump");

                    b.HasKey("Id")
                        .HasName("pk_crash_reports");

                    b.HasIndex("CondensedCallstack")
                        .HasDatabaseName("ix_crash_reports_condensed_callstack");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("ix_crash_reports_created_at");

                    b.HasIndex("Description")
                        .HasDatabaseName("ix_crash_reports_description");

                    b.HasIndex("DescriptionLastEditedById")
                        .HasDatabaseName("ix_crash_reports_description_last_edited_by_id");

                    b.HasIndex("DuplicateOfId")
                        .HasDatabaseName("ix_crash_reports_duplicate_of_id");

                    b.HasIndex("HappenedAt")
                        .HasDatabaseName("ix_crash_reports_happened_at");

                    b.HasIndex("HashedDeleteKey")
                        .IsUnique()
                        .HasDatabaseName("ix_crash_reports_hashed_delete_key");

                    b.HasIndex("ReporterEmail")
                        .HasDatabaseName("ix_crash_reports_reporter_email");

                    b.HasIndex("UpdatedAt")
                        .HasDatabaseName("ix_crash_reports_updated_at");

                    b.HasIndex("UploadedFrom")
                        .HasDatabaseName("ix_crash_reports_uploaded_from");

                    b.ToTable("crash_reports", (string)null);
                });

            modelBuilder.Entity("RevolutionaryWebApp.Server.Models.DebugSymbol", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("active");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("RelativePath")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("relative_path");

                    b.Property<long>("Size")
                        .HasColumnType("bigint")
                        .HasColumnName("size");

                    b.Property<long>("StoredInItemId")
                        .HasColumnType("bigint")
                        .HasColumnName("stored_in_item_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<bool>("Uploaded")
                        .HasColumnType("boolean")
                        .HasColumnName("uploaded");

                    b.HasKey("Id")
                        .HasName("pk_debug_symbols");

                    b.HasIndex("CreatedById")
                        .HasDatabaseName("ix_debug_symbols_created_by_id");

                    b.HasIndex("RelativePath")
                        .IsUnique()
                        .HasDatabaseName("ix_debug_symbols_relative_path");

                    b.HasIndex("StoredInItemId")
                        .HasDatabaseName("ix_debug_symbols_stored_in_item_id");

                    b.ToTable("debug_symbols", (string)null);
                });

            modelBuilder.Entity("RevolutionaryWebApp.Server.Models.DehydratedObject", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseHiLo(b.Property<long>("Id"), "dehydrated_objects_hilo");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Sha3")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("sha3");

                    b.Property<long>("StorageItemId")
                        .HasColumnType("bigint")
                        .HasColumnName("storage_item_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_dehydrated_objects");

                    b.HasIndex("Sha3")
                        .IsUnique()
                        .HasDatabaseName("ix_dehydrated_objects_sha3");

                    b.HasIndex("StorageItemId")
                        .HasDatabaseName("ix_dehydrated_objects_storage_item_id");

                    b.ToTable("dehydrated_objects", (string)null);
                });

            modelBuilder.Entity("RevolutionaryWebApp.Server.Models.DeletedResourceStats", b =>
                {
                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.Property<long>("ItemCount")
                        .HasColumnType("bigint")
                        .HasColumnName("item_count");

                    b.Property<long>("ItemsExtraAttribute")
                        .HasColumnType("bigint")
                        .HasColumnName("items_extra_attribute");

                    b.HasKey("Type")
                        .HasName("pk_deleted_resource_stats");

                    b.ToTable("deleted_resource_stats", (string)null);
                });

            modelBuilder.Entity("RevolutionaryWebApp.Server.Models.DevBuild", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool>("Anonymous")
                        .HasColumnType("boolean")
                        .HasColumnName("anonymous");

                    b.Property<string>("Branch")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("branch");

                    b.Property<string>("BuildHash")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("build_hash");

                    b.Property<bool>("BuildOfTheDay")
                        .HasColumnType("boolean")
                        .HasColumnName("build_of_the_day");

                    b.Property<string>("BuildZipHash")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("build_zip_hash");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int>("Downloads")
                        .HasColumnType("integer")
                        .HasColumnName("downloads");

                    b.Property<bool>("Important")
                        .HasColumnType("boolean")
                        .HasColumnName("important");

                    b.Property<bool>("Keep")
                        .HasColumnType("boolean")
                        .HasColumnName("keep");

                    b.Property<string>("Platform")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("platform");

                    b.Property<bool>("PrFetched")
                        .HasColumnType("boolean")
                        .HasColumnName("pr_fetched");

                    b.Property<string>("PrUrl")
                        .HasColumnType("text")
                        .HasColumnName("pr_url");

                    b.Property<int>("Score")
                        .HasColumnType("integer")
                        .HasColumnName("score");

                    b.Property<long>("StorageItemId")
                        .HasColumnType("bigint")
                        .HasColumnName("storage_item_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<bool>("Verified")
                        .HasColumnType("boolean")
                        .HasColumnName("verified");

                    b.Property<long?>("VerifiedById")
                        .HasColumnType("bigint")
                        .HasColumnName("verified_by_id");

                    b.HasKey("Id")
                        .HasName("pk_dev_builds");

                    b.HasIndex("Anonymous")
                        .HasDatabaseName("ix_dev_builds_anonymous");

                    b.HasIndex("Branch")
                        .HasDatabaseName("ix_dev_builds_branch");

                    b.HasIndex("Platform")
                        .HasDatabaseName("ix_dev_builds_platform");

                    b.HasIndex("StorageItemId")
                        .HasDatabaseName("ix_dev_builds_storage_item_id");

                    b.HasIndex("VerifiedById")
                        .HasDatabaseName("ix_dev_builds_verified_by_id");

                    b.HasIndex("BuildHash", "Platform")
                        .IsUnique()
                        .HasDatabaseName("ix_dev_builds_build_hash_platform");

                    b.ToTable("dev_builds", (string)null);
                });

            modelBuilder.Entity("RevolutionaryWebApp.Server.Models.ExecutedMaintenanceOperation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("ExtendedDescription")
                        .HasColumnType("text")
                        .HasColumnName("extended_description");

                    b.Property<bool>("Failed")
                        .HasColumnType("boolean")
                        .HasColumnName("failed");

                    b.Property<DateTime?>("FinishedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("finished_at");

                    b.Property<string>("OperationType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("operation_type");

                    b.Property<long?>("PerformedById")
                        .HasColumnType("bigint")
                        .HasColumnName("performed_by_id");

                    b.HasKey("Id")
                        .HasName("pk_executed_maintenance_operations");

                    b.HasIndex("OperationType")
                        .HasDatabaseName("ix_executed_maintenance_operations_operation_type");

                    b.HasIndex("PerformedById")
                        .HasDatabaseName("ix_executed_maintenance_operations_performed_by_id");

                    b.ToTable("executed_maintenance_operations", (string)null);
                });

            modelBuilder.Entity("RevolutionaryWebApp.Server.Models.ExternalServer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool>("CleanUpQueued")
                        .HasColumnType("boolean")
                        .HasColumnName("clean_up_queued");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime>("LastMaintenance")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_maintenance");

                    b.Property<int>("Priority")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("priority");

                    b.Property<bool>("ProvisionedFully")
                        .HasColumnType("boolean")
                        .HasColumnName("provisioned_fully");

                    b.Property<string>("PublicAddress")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("public_address");

                    b.Property<int>("ReservationType")
                        .HasColumnType("integer")
                        .HasColumnName("reservation_type");

                    b.Property<long?>("ReservedFor")
                        .HasColumnType("bigint")
                        .HasColumnName("reserved_for");

                    b.Property<DateTime?>("RunningSince")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("running_since");

                    b.Property<string>("SSHKeyFileName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("ssh_key_file_name");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<DateTime>("StatusLastChecked")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("status_last_checked");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<int>("UsedDiskSpace")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(-1)
                        .HasColumnName("used_disk_space");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.Property<bool>("WantsMaintenance")
                        .HasColumnType("boolean")
                        .HasColumnName("wants_maintenance");

                    b.HasKey("Id")
                        .HasName("pk_external_servers");

                    b.HasIndex("PublicAddress")
                        .IsUnique()
                        .HasDatabaseName("ix_external_servers_public_address");

                    b.ToTable("external_servers", (string)null);
                });

            modelBuilder.Entity("RevolutionaryWebApp.Server.Models.Feed", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<TimeSpan?>("CacheTime")
                        .HasColumnType("interval")
                        .HasColumnName("cache_time");

                    b.Property<DateTime?>("ContentUpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("content_updated_at");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean")
                        .HasColumnName("deleted");

                    b.Property<string>("HtmlFeedItemEntryTemplate")
                        .HasColumnType("text")
                        .HasColumnName("html_feed_item_entry_template");

                    b.Property<string>("HtmlFeedVersionSuffix")
                        .HasColumnType("text")
                        .HasColumnName("html_feed_version_suffix");

                    b.Property<string>("HtmlLatestContent")
                        .HasColumnType("text")
                        .HasColumnName("html_latest_content");

                    b.Property<string>("LatestContent")
                        .HasColumnType("text")
                        .HasColumnName("latest_content");

                    b.Property<int>("LatestContentHash")
                        .HasColumnType("integer")
                        .HasColumnName("latest_content_hash");

                    b.Property<int>("MaxItemLength")
                        .HasColumnType("integer")
                        .HasColumnName("max_item_length");

                    b.Property<int>("MaxItems")
                        .HasColumnType("integer")
                        .HasColumnName("max_items");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<TimeSpan>("PollInterval")
                        .HasColumnType("interval")
                        .HasColumnName("poll_interval");

                    b.Property<string>("PreprocessingActionsRaw")
                        .HasColumnType("text")
                        .HasColumnName("preprocessing_actions_raw");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("url");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id")
                        .HasName("pk_feeds");

                    b.HasIndex("ContentUpdatedAt")
                        .HasDatabaseName("ix_feeds_content_updated_at");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_feeds_name");

                    b.ToTable("feeds", (string)null);
                });

            modelBuilder.Entity("RevolutionaryWebApp.Server.Models.FeedDiscordWebhook", b =>
                {
                    b.Property<long>("FeedId")
                        .HasColumnType("bigint")
                        .HasColumnName("feed_id");

                    b.Property<string>("WebhookUrl")
                        .HasColumnType("text")
                        .HasColumnName("webhook_url");

                    b.Property<string>("CustomItemFormat")
                        .HasColumnType("text")
                        .HasColumnName("custom_item_format");

                    b.HasKey("FeedId", "WebhookUrl")
                        .HasName("pk_feed_discord_webhooks");

                    b.HasIndex("FeedId", "WebhookUrl")
                        .IsUnique()
                        .HasDatabaseName("ix_feed_discord_webhooks_feed_id_webhook_url");

                    b.ToTable("feed_discord_webhooks", (string)null);
                });

            modelBuilder.Entity("RevolutionaryWebApp.Server.Models.GithubAutoComment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("CommentText")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("comment_text");

                    b.Property<int>("Condition")
                        .HasColumnType("integer")
                        .HasColumnName("condition");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<bool>("Enabled")
                        .HasColumnType("boolean")
                        .HasColumnName("enabled");

                    b.Property<string>("Repository")
                        .HasColumnType("text")
                        .HasColumnName("repository");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_github_auto_comments");

                    b.HasIndex("Condition")
                        .HasDatabaseName("ix_github_auto_comments_condition");

                    b.ToTable("github_auto_comments", (string)null);
                });

            modelBuilder.Entity("RevolutionaryWebApp.Server.Models.GithubPullRequest", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("AuthorUsername")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("author_username");

                    b.Property<bool?>("ClaSigned")
                        .HasColumnType("boolean")
                        .HasColumnName("cla_signed");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<long>("GithubId")
                        .HasColumnType("bigint")
                        .HasColumnName("github_id");

                    b.Property<string>("LatestCommit")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("latest_commit");

                    b.Property<bool>("Open")
                        .HasColumnType("boolean")
                        .HasColumnName("open");

                    b.Property<string>("Repository")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("repository");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_github_pull_requests");

                    b.HasIndex("Repository", "GithubId")
                        .IsUnique()
                        .HasDatabaseName("ix_github_pull_requests_repository_github_id");

                    b.ToTable("github_pull_requests", (string)null);
                });

            modelBuilder.Entity("RevolutionaryWebApp.Server.Models.GithubWebhook", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("HashedSecret")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("hashed_secret");

                    b.Property<DateTime?>("LastUsed")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_used");

                    b.Property<string>("Secret")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("secret");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_github_webhooks");

                    b.ToTable("github_webhooks", (string)null);
                });

            modelBuilder.Entity("RevolutionaryWebApp.Server.Models.GlobalDiscordBotCommand", b =>
                {
                    b.Property<string>("RegisteredKey")
                        .HasColumnType("text")
                        .HasColumnName("registered_key");

                    b.HasKey("RegisteredKey")
                        .HasName("pk_global_discord_bot_commands");

                    b.ToTable("global_discord_bot_commands", (string)null);
                });

            modelBuilder.Entity("RevolutionaryWebApp.Server.Models.InProgressClaSignature", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("ClaId")
                        .HasColumnType("bigint")
                        .HasColumnName("cla_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("DeveloperUsername")
                        .HasColumnType("text")
                        .HasColumnName("developer_username");

                    b.Property<string>("Email")
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<bool>("EmailVerified")
                        .HasColumnType("boolean")
                        .HasColumnName("email_verified");

                    b.Property<string>("GithubAccount")
                        .HasColumnType("text")
                        .HasColumnName("github_account");

                    b.Property<string>("GithubEmail")
                        .HasColumnType("text")
                        .HasColumnName("github_email");

                    b.Property<bool>("GithubSkipped")
                        .HasColumnType("boolean")
                        .HasColumnName("github_skipped");

                    b.Property<long?>("GithubUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("github_user_id");

                    b.Property<string>("GuardianName")
                        .HasColumnType("text")
                        .HasColumnName("guardian_name");

                    b.Property<string>("GuardianSignature")
                        .HasColumnType("text")
                        .HasColumnName("guardian_signature");

                    b.Property<Guid>("SessionId")
                        .HasColumnType("uuid")
                        .HasColumnName("session_id");

                    b.Property<bool?>("SignerIsMinor")
                        .HasColumnType("boolean")
                        .HasColumnName("signer_is_minor");

                    b.Property<string>("SignerName")
                        .HasColumnType("text")
                        .HasColumnName("signer_name");

                    b.Property<string>("SignerSignature")
                        .HasColumnType("text")
                        .HasColumnName("signer_signature");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_in_progress_cla_signatures");

                    b.HasIndex("ClaId")
                        .HasDatabaseName("ix_in_progress_cla_signatures_cla_id");

                    b.HasIndex("SessionId")
                        .IsUnique()
                        .HasDatabaseName("ix_in_progress_cla_signatures_session_id");

                    b.ToTable("in_progress_cla_signatures", (string)null);
                });

            modelBuilder.Entity("RevolutionaryWebApp.Server.Models.InProgressMultipartUpload", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<bool>("Finished")
                        .HasColumnType("boolean")
                        .HasColumnName("finished");

                    b.Property<int>("NextChunkIndex")
                        .HasColumnType("integer")
                        .HasColumnName("next_chunk_index");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("path");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UploadId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("upload_id");

                    b.HasKey("Id")
                        .HasName("pk_in_progress_multipart_uploads");

                    b.HasIndex("UploadId")
                        .HasDatabaseName("ix_in_progress_multipart_uploads_upload_id");

                    b.ToTable("in_progress_multipart_uploads", (string)null);
                });

            modelBuilder.Entity("RevolutionaryWebApp.Server.Models.LauncherDownloadMirror", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("BannerImageUrl")
                        .HasColumnType("text")
                        .HasColumnName("banner_image_url");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("ExtraDescription")
                        .HasColumnType("text")
                        .HasColumnName("extra_description");

                    b.Property<string>("InfoLink")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("info_link");

                    b.Property<string>("InternalName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("internal_name");

                    b.Property<string>("ReadableName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("readable_name");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_launcher_download_mirrors");

                    b.HasIndex("InternalName")
                        .IsUnique()
                        .HasDatabaseName("ix_launcher_download_mirrors_internal_name");

                    b.ToTable("launcher_download_mirrors", (string)null);
                });

            modelBuilder.Entity("RevolutionaryWebApp.Server.Models.LauncherLauncherVersion", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<bool>("Latest")
                        .HasColumnType("boolean")
                        .HasColumnName("latest");

                    b.Property<DateTime?>("SetLatestAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("set_latest_at");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("version");

                    b.HasKey("Id")
                        .HasName("pk_launcher_launcher_versions");

                    b.HasIndex("Latest")
                        .IsUnique()
                        .HasDatabaseName("ix_launcher_launcher_versions_latest")
                        .HasFilter("(latest IS TRUE)");

                    b.HasIndex("Version")
                        .IsUnique()
                        .HasDatabaseName("ix_launcher_launcher_versions_version");

                    b.ToTable("launcher_launcher_versions", (string)null);
                });

            modelBuilder.Entity("RevolutionaryWebApp.Server.Models.LauncherLink", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("CachedUserGroupsRaw")
                        .HasColumnType("text")
                        .HasColumnName("cached_user_groups_raw");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("HashedLinkCode")
                        .HasColumnType("text")
                        .HasColumnName("hashed_link_code");

                    b.Property<DateTime?>("LastConnection")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_connection");

                    b.Property<string>("LastIp")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("last_ip");

                    b.Property<string>("LinkCode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("link_code");

                    b.Property<int>("TotalApiCalls")
                        .HasColumnType("integer")
                        .HasColumnName("total_api_calls");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_launcher_links");

                    b.HasIndex("HashedLinkCode")
                        .IsUnique()
                        .HasDatabaseName("ix_launcher_links_hashed_link_code");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_launcher_links_user_id");

                    b.ToTable("launcher_links", (string)null);
                });

            modelBuilder.Entity("RevolutionaryWebApp.Server.Models.LauncherThriveVersion", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<bool>("Enabled")
                        .HasColumnType("boolean")
                        .HasColumnName("enabled");

                    b.Property<bool>("Latest")
                        .HasColumnType("boolean")
                        .HasColumnName("latest");

                    b.Property<string>("ReleaseNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("release_number");

                    b.Property<bool>("Stable")
                        .HasColumnType("boolean")
                        .HasColumnName("stable");

                    b.Property<bool>("SupportsFailedStartupDetection")
                        .HasColumnType("boolean")
                        .HasColumnName("supports_failed_startup_detection");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_launcher_thrive_versions");

                    b.HasIndex("ReleaseNumber")
                        .IsUnique()
                        .HasDatabaseName("ix_launcher_thrive_versions_release_number");

                    b.HasIndex("Stable", "Latest")
                        .IsUnique()
                        .HasDatabaseName("ix_launcher_thrive_versions_stable_latest")
                        .HasFilter("(latest IS TRUE)");

                    b.ToTable("launcher_thrive_versions", (string)null);
                });

            modelBuilder.Entity("RevolutionaryWebApp.Server.Models.LauncherThriveVersionDownload", b =>
                {
                    b.Property<long>("VersionId")
                        .HasColumnType("bigint")
                        .HasColumnName("version_id");

                    b.Property<int>("Platform")
                        .HasColumnType("integer")
                        .HasColumnName("platform");

                    b.Property<long>("MirrorId")
                        .HasColumnType("bigint")
                        .HasColumnName("mirror_id");

                    b.Property<string>("DownloadUrl")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("download_url");

                    b.HasKey("VersionId", "Platform", "MirrorId")
                        .HasName("pk_launcher_thrive_version_downloads");

                    b.HasIndex("MirrorId")
                        .HasDatabaseName("ix_launcher_thrive_version_downloads_mirror_id");

                    b.ToTable("launcher_thrive_version_downloads", (string)null);
                });

            modelBuilder.Entity("RevolutionaryWebApp.Server.Models.LauncherThriveVersionPlatform", b =>
                {
                    b.Property<long>("VersionId")
                        .HasColumnType("bigint")
                        .HasColumnName("version_id");

                    b.Property<int>("Platform")
                        .HasColumnType("integer")
                        .HasColumnName("platform");

                    b.Property<string>("FileSha3")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("file_sha3");

                    b.Property<string>("LocalFileName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("local_file_name");

                    b.HasKey("VersionId", "Platform")
                        .HasName("pk_launcher_thrive_version_platforms");

                    b.ToTable("launcher_thrive_version_platforms", (string)null);
                });

            modelBuilder.Entity("RevolutionaryWebApp.Server.Models.LauncherVersionAutoUpdateChannel", b =>
                {
                    b.Property<long>("VersionId")
                        .HasColumnType("bigint")
                        .HasColumnName("version_id");

                    b.Property<int>("Channel")
                        .HasColumnType("integer")
                        .HasColumnName("channel");

                    b.Property<string>("FileSha3")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("file_sha3");

                    b.HasKey("VersionId", "Channel")
                        .HasName("pk_launcher_version_auto_update_channels");

                    b.ToTable("launcher_version_auto_update_channels", (string)null);
                });

            modelBuilder.Entity("RevolutionaryWebApp.Server.Models.LauncherVersionDownload", b =>
                {
                    b.Property<long>("VersionId")
                        .HasColumnType("bigint")
                        .HasColumnName("version_id");

                    b.Property<int>("Channel")
                        .HasColumnType("integer")
                        .HasColumnName("channel");

                    b.Property<long>("MirrorId")
                        .HasColumnType("bigint")
                        .HasColumnName("mirror_id");

                    b.Property<string>("DownloadUrl")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("download_url");

                    b.HasKey("VersionId", "Channel", "MirrorId")
                        .HasName("pk_launcher_version_downloads");

                    b.HasIndex("MirrorId")
                        .HasDatabaseName("ix_launcher_version_downloads_mirror_id");

                    b.ToTable("launcher_version_downloads", (string)null);
                });

            modelBuilder.Entity("RevolutionaryWebApp.Server.Models.LfsObject", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseHiLo(b.Property<long>("Id"), "lfs_objects_hilo");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("LfsOid")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("lfs_oid");

                    b.Property<long>("LfsProjectId")
                        .HasColumnType("bigint")
                        .HasColumnName("lfs_project_id");

                    b.Property<long>("Size")
                        .HasColumnType("bigint")
                        .HasColumnName("size");

                    b.Property<string>("StoragePath")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("storage_path");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_lfs_objects");

                    b.HasIndex("LfsProjectId", "LfsOid")
                        .IsUnique()
                        .HasDatabaseName("ix_lfs_objects_lfs_project_id_lfs_oid");

                    b.ToTable("lfs_objects", (string)null);
                });

            modelBuilder.Entity("RevolutionaryWebApp.Server.Models.LfsProject", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("BranchToBuildFileTreeFor")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("master")
                        .HasColumnName("branch_to_build_file_tree_for");

                    b.Property<string>("CloneUrl")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("clone_url");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean")
                        .HasColumnName("deleted");

                    b.Property<string>("FileTreeCommit")
                        .HasColumnType("text")
                        .HasColumnName("file_tree_commit");

                    b.Property<DateTime?>("FileTreeUpdated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("file_tree_updated");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<bool>("Public")
                        .HasColumnType("boolean")
                        .HasColumnName("public");

                    b.Property<string>("RepoUrl")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("repo_url");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("slug");

                    b.Property<int?>("TotalObjectCount")
                        .HasColumnType("integer")
                        .HasColumnName("total_object_count");

                    b.Property<long?>("TotalObjectSize")
                        .HasColumnType("bigint")
                        .HasColumnName("total_object_size");

                    b.Property<DateTime?>("TotalSizeUpdated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("total_size_updated");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_lfs_projects");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_lfs_projects_name");

                    b.HasIndex("Slug")
                        .IsUnique()
                        .HasDatabaseName("ix_lfs_projects_slug");

                    b.ToTable("lfs_projects", (string)null);
                });

            modelBuilder.Entity("RevolutionaryWebApp.Server.Models.LogEntry", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Extended")
                        .HasMaxLength(1048576)
                        .HasColumnType("character varying(1048576)")
                        .HasColumnName("extended");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("message");

                    b.Property<long?>("TargetUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("target_user_id");

                    b.HasKey("Id")
                        .HasName("pk_log_entries");

                    b.HasIndex("TargetUserId")
                        .HasDatabaseName("ix_log_entries_target_user_id");

                    b.ToTable("log_entries", (string)null);
                });

            modelBuilder.Entity("RevolutionaryWebApp.Server.Models.Meeting", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("ChairmanId")
                        .HasColumnType("bigint")
                        .HasColumnName("chairman_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<DateTime?>("EndedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ended_at");

                    b.Property<TimeSpan?>("ExpectedDuration")
                        .HasColumnType("interval")
                        .HasColumnName("expected_duration");

                    b.Property<int>("JoinAccess")
                        .HasColumnType("integer")
                        .HasColumnName("join_access");

                    b.Property<TimeSpan>("JoinGracePeriod")
                        .HasColumnType("interval")
                        .HasColumnName("join_grace_period");

                    b.Property<string>("Minutes")
                        .HasColumnType("text")
                        .HasColumnName("minutes");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<long?>("OwnerId")
                        .HasColumnType("bigint")
                        .HasColumnName("owner_id");

                    b.Property<int>("ReadAccess")
                        .HasColumnType("integer")
                        .HasColumnName("read_access");

                    b.Property<bool>("ReadOnly")
                        .HasColumnType("boolean")
                        .HasColumnName("read_only");

                    b.Property<long?>("SecretaryId")
                        .HasColumnType("bigint")
                        .HasColumnName("secretary_id");

                    b.Property<DateTime>("StartsAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("starts_at");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id")
                        .HasName("pk_meetings");

                    b.HasIndex("ChairmanId")
                        .HasDatabaseName("ix_meetings_chairman_id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_meetings_name");

                    b.HasIndex("OwnerId")
                        .HasDatabaseName("ix_meetings_owner_id");

                    b.HasIndex("ReadAccess")
                        .HasDatabaseName("ix_meetings_read_access");

                    b.HasIndex("SecretaryId")
                        .HasDatabaseName("ix_meetings_secretary_id");

                    b.ToTable("meetings", (string)null);
                });

            modelBuilder.Entity("RevolutionaryWebApp.Server.Models.MeetingMember", b =>
                {
                    b.Property<long>("MeetingId")
                        .HasColumnType("bigint")
                        .HasColumnName("meeting_id");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.Property<bool>("CanReviewMinutes")
                        .HasColumnType("boolean")
                        .HasColumnName("can_review_minutes");

                    b.Property<DateTime>("JoinedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("joined_at");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("MeetingId", "UserId")
                        .HasName("pk_meeting_members");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_meeting_members_user_id");

                    b.ToTable("meeting_members", (string)null);
                });

            modelBuilder.Entity("RevolutionaryWebApp.Server.Models.MeetingPoll", b =>
                {
                    b.Property<long>("MeetingId")
                        .HasColumnType("bigint")
                        .HasColumnName("meeting_id");

                    b.Property<long>("PollId")
                        .HasColumnType("bigint")
                        .HasColumnName("poll_id");

                    b.Property<DateTime?>("AutoCloseAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("auto_close_at");

                    b.Property<DateTime?>("ClosedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("closed_at");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<long?>("ManuallyClosedById")
                        .HasColumnType("bigint")
                        .HasColumnName("manually_closed_by_id");

                    b.Property<string>("PollData")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("poll_data");

                    b.Property<string>("PollResults")
                        .HasColumnType("text")
                        .HasColumnName("poll_results");

                    b.Property<DateTime?>("PollResultsCreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("poll_results_created_at");

                    b.Property<int>("TiebreakType")
                        .HasColumnType("integer")
                        .HasColumnName("tiebreak_type");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("MeetingId", "PollId")
                        .HasName("pk_meeting_polls");

                    b.HasIndex("ManuallyClosedById")
                        .HasDatabaseName("ix_meeting_polls_manually_closed_by_id");

                    b.HasIndex("MeetingId", "Title")
                        .IsUnique()
                        .HasDatabaseName("ix_meeting_polls_meeting_id_title");

                    b.ToTable("meeting_polls", (string)null);
                });

            modelBuilder.Entity("RevolutionaryWebApp.Server.Models.MeetingPollVote", b =>
                {
                    b.Property<Guid>("VoteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("vote_id");

                    b.Property<bool>("IsTiebreaker")
                        .HasColumnType("boolean")
                        .HasColumnName("is_tiebreaker");

                    b.Property<long>("MeetingId")
                        .HasColumnType("bigint")
                        .HasColumnName("meeting_id");

                    b.Property<long>("PollId")
                        .HasColumnType("bigint")
                        .HasColumnName("poll_id");

                    b.Property<string>("VoteContent")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("vote_content");

                    b.Property<float>("VotingPower")
                        .HasColumnType("real")
                        .HasColumnName("voting_power");

                    b.HasKey("VoteId")
                        .HasName("pk_meeting_poll_votes");

                    b.HasIndex("MeetingId", "PollId")
                        .HasDatabaseName("ix_meeting_poll_votes_meeting_id_poll_id");

                    b.ToTable("meeting_poll_votes", (string)null);
                });

            modelBuilder.Entity("RevolutionaryWebApp.Server.Models.MeetingPollVotingRecord", b =>
                {
                    b.Property<long>("MeetingId")
                        .HasColumnType("bigint")
                        .HasColumnName("meeting_id");

                    b.Property<long>("PollId")
                        .HasColumnType("bigint")
                        .HasColumnName("poll_id");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("MeetingId", "PollId", "UserId")
                        .HasName("pk_meeting_poll_voting_records");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_meeting_poll_voting_records_user_id");

                    b.ToTable("meeting_poll_voting_records", (string)null);
                });

            modelBuilder.Entity("RevolutionaryWebApp.Server.Models.Pages.MediaFile", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean")
                        .HasColumnName("deleted");

                    b.Property<long>("FolderId")
                        .HasColumnType("bigint")
                        .HasColumnName("folder_id");

                    b.Property<Guid>("GlobalId")
                        .HasColumnType("uuid")
                        .HasColumnName("global_id");

                    b.Property<long?>("LastModifiedById")
                        .HasColumnType("bigint")
                        .HasColumnName("last_modified_by_id");

                    b.Property<int>("MetadataVisibility")
                        .HasColumnType("integer")
                        .HasColumnName("metadata_visibility");

                    b.Property<int>("ModifyAccess")
                        .HasColumnType("integer")
                        .HasColumnName("modify_access");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<long>("OriginalFileSize")
                        .HasColumnType("bigint")
                        .HasColumnName("original_file_size");

                    b.Property<bool>("Processed")
                        .HasColumnType("boolean")
                        .HasColumnName("processed");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<long?>("UploadedById")
                        .HasColumnType("bigint")
                        .HasColumnName("uploaded_by_id");

                    b.HasKey("Id")
                        .HasName("pk_media_files");

                    b.HasIndex("FolderId")
                        .HasDatabaseName("ix_media_files_folder_id");

                    b.HasIndex("GlobalId")
                        .IsUnique()
                        .HasDatabaseName("ix_media_files_global_id");

                    b.HasIndex("LastModifiedById")
                        .HasDatabaseName("ix_media_files_last_modified_by_id");

                    b.HasIndex("UploadedById")
                        .HasDatabaseName("ix_media_files_uploaded_by_id");

                    b.HasIndex("Name", "FolderId")
                        .IsUnique()
                        .HasDatabaseName("ix_media_files_name_folder_id");

                    b.ToTable("media_files", (string)null);
                });

            modelBuilder.Entity("RevolutionaryWebApp.Server.Models.Pages.MediaFolder", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("ContentReadAccess")
                        .HasColumnType("integer")
                        .HasColumnName("content_read_access");

                    b.Property<int>("ContentWriteAccess")
                        .HasColumnType("integer")
                        .HasColumnName("content_write_access");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<bool>("DeleteIfEmpty")
                        .HasColumnType("boolean")
                        .HasColumnName("delete_if_empty");

                    b.Property<int>("FolderModifyAccess")
                        .HasColumnType("integer")
                        .HasColumnName("folder_modify_access");

                    b.Property<long?>("LastModifiedById")
                        .HasColumnType("bigint")
                        .HasColumnName("last_modified_by_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("character varying(80)")
                        .HasColumnName("name");

                    b.Property<long?>("OwnedById")
                        .HasColumnType("bigint")
                        .HasColumnName("owned_by_id");

                    b.Property<long?>("ParentFolderId")
                        .HasColumnType("bigint")
                        .HasColumnName("parent_folder_id");

                    b.Property<int>("SubFolderModifyAccess")
                        .HasColumnType("integer")
                        .HasColumnName("sub_folder_modify_access");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_media_folders");

                    b.HasIndex("LastModifiedById")
                        .HasDatabaseName("ix_media_folders_last_modified_by_id");

                    b.HasIndex("OwnedById")
                        .HasDatabaseName("ix_media_folders_owned_by_id");

                    b.HasIndex("ParentFolderId")
                        .HasDatabaseName("ix_media_folders_parent_folder_id");

                    b.HasIndex("Name", "ParentFolderId")
                        .IsUnique()
                        .HasDatabaseName("ix_media_folders_name_parent_folder_id");

                    b.ToTable("media_folders", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            ContentReadAccess = 3,
                            ContentWriteAccess = 7,
                            CreatedAt = new DateTime(2014, 8, 4, 19, 0, 0, 0, DateTimeKind.Utc),
                            DeleteIfEmpty = false,
                            FolderModifyAccess = 5,
                            Name = "Website Parts",
                            SubFolderModifyAccess = 4,
                            UpdatedAt = new DateTime(2014, 8, 4, 19, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 2L,
                            ContentReadAccess = 3,
                            ContentWriteAccess = 7,
                            CreatedAt = new DateTime(2014, 8, 4, 19, 0, 0, 0, DateTimeKind.Utc),
                            DeleteIfEmpty = false,
                            FolderModifyAccess = 5,
                            Name = "Website Pages",
                            SubFolderModifyAccess = 4,
                            UpdatedAt = new DateTime(2014, 8, 4, 19, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 3L,
                            ContentReadAccess = 3,
                            ContentWriteAccess = 7,
                            CreatedAt = new DateTime(2014, 8, 4, 19, 0, 0, 0, DateTimeKind.Utc),
                            DeleteIfEmpty = false,
                            FolderModifyAccess = 5,
                            Name = "Website Posts",
                            SubFolderModifyAccess = 4,
                            UpdatedAt = new DateTime(2014, 8, 4, 19, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 4L,
                            ContentReadAccess = 3,
                            ContentWriteAccess = 7,
                            CreatedAt = new DateTime(2014, 8, 4, 19, 0, 0, 0, DateTimeKind.Utc),
                            DeleteIfEmpty = false,
                            FolderModifyAccess = 5,
                            Name = "Wiki Media",
                            SubFolderModifyAccess = 4,
                            UpdatedAt = new DateTime(2014, 8, 4, 19, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 9L,
                            ContentReadAccess = 1,
                            ContentWriteAccess = 2,
                            CreatedAt = new DateTime(2014, 8, 4, 19, 0, 0, 0, DateTimeKind.Utc),
                            DeleteIfEmpty = false,
                            FolderModifyAccess = 5,
                            Name = "User Avatars",
                            SubFolderModifyAccess = 5,
                            UpdatedAt = new DateTime(2014, 8, 4, 19, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 10L,
                            ContentReadAccess = 1,
                            ContentWriteAccess = 2,
                            CreatedAt = new DateTime(2014, 8, 4, 19, 0, 0, 0, DateTimeKind.Utc),
                            DeleteIfEmpty = false,
                            FolderModifyAccess = 5,
                            Name = "User Uploads",
                            SubFolderModifyAccess = 5,
                            UpdatedAt = new DateTime(2014, 8, 4, 19, 0, 0, 0, DateTimeKind.Utc)
                        });
                });

            modelBuilder.Entity("RevolutionaryWebApp.Server.Models.Pages.PageEditSuggestion", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("AppliesToPageVersion")
                        .HasColumnType("integer")
                        .HasColumnName("applies_to_page_version");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("EditComment")
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)")
                        .HasColumnName("edit_comment");

                    b.Property<long>("PageId")
                        .HasColumnType("bigint")
                        .HasColumnName("page_id");

                    b.Property<int>("Score")
                        .HasColumnType("integer")
                        .HasColumnName("score");

                    b.Property<long>("SuggestedById")
                        .HasColumnType("bigint")
                        .HasColumnName("suggested_by_id");

                    b.Property<string>("SuggestedChangesDiff")
                        .IsRequired()
                        .HasMaxLength(2098176)
                        .HasColumnType("character varying(2098176)")
                        .HasColumnName("suggested_changes_diff");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("VotedDownBy")
                        .HasMaxLength(1048576)
                        .HasColumnType("character varying(1048576)")
                        .HasColumnName("voted_down_by");

                    b.Property<string>("VotedUpBy")
                        .HasMaxLength(1048576)
                        .HasColumnType("character varying(1048576)")
                        .HasColumnName("voted_up_by");

                    b.HasKey("Id")
                        .HasName("pk_page_edit_suggestions");

                    b.HasIndex("SuggestedById")
                        .HasDatabaseName("ix_page_edit_suggestions_suggested_by_id");

                    b.HasIndex("PageId", "SuggestedById")
                        .IsUnique()
                        .HasDatabaseName("ix_page_edit_suggestions_page_id_suggested_by_id");

                    b.ToTable("page_edit_suggestions", (string)null);
                });

            modelBuilder.Entity("RevolutionaryWebApp.Server.Models.Pages.PageVersion", b =>
                {
                    b.Property<long>("PageId")
                        .HasColumnType("bigint")
                        .HasColumnName("page_id");

                    b.Property<int>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean")
                        .HasColumnName("deleted");

                    b.Property<string>("EditComment")
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)")
                        .HasColumnName("edit_comment");

                    b.Property<long?>("EditedById")
                        .HasColumnType("bigint")
                        .HasColumnName("edited_by_id");

                    b.Property<string>("ReverseDiff")
                        .IsRequired()
                        .HasMaxLength(2129920)
                        .HasColumnType("character varying(2129920)")
                        .HasColumnName("reverse_diff");

                    b.HasKey("PageId", "Version")
                        .HasName("pk_page_versions");

                    b.HasIndex("EditedById")
                        .HasDatabaseName("ix_page_versions_edited_by_id");

                    b.HasIndex("PageId", "Version")
                        .IsUnique()
                        .IsDescending(false, true)
                        .HasDatabaseName("ix_page_versions_page_id_version");

                    b.ToTable("page_versions", (string)null);
                });

            modelBuilder.Entity("RevolutionaryWebApp.Server.Models.Pages.VersionedPage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<long?>("CreatorId")
                        .HasColumnType("bigint")
                        .HasColumnName("creator_id");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean")
                        .HasColumnName("deleted");

                    b.Property<string>("LastEditComment")
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)")
                        .HasColumnName("last_edit_comment");

                    b.Property<long?>("LastEditorId")
                        .HasColumnType("bigint")
                        .HasColumnName("last_editor_id");

                    b.Property<string>("LatestContent")
                        .IsRequired()
                        .HasMaxLength(2097152)
                        .HasColumnType("character varying(2097152)")
                        .HasColumnName("latest_content");

                    b.Property<string>("Permalink")
                        .HasMaxLength(80)
                        .HasColumnType("character varying(80)")
                        .HasColumnName("permalink");

                    b.Property<DateTime?>("PublishedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("published_at");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)")
                        .HasColumnName("title");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<int>("Visibility")
                        .HasColumnType("integer")
                        .HasColumnName("visibility");

                    b.HasKey("Id")
                        .HasName("pk_versioned_pages");

                    b.HasIndex("CreatorId")
                        .HasDatabaseName("ix_versioned_pages_creator_id");

                    b.HasIndex("LastEditorId")
                        .HasDatabaseName("ix_versioned_pages_last_editor_id");

                    b.HasIndex("Permalink")
                        .IsUnique()
                        .HasDatabaseName("ix_versioned_pages_permalink");

                    b.HasIndex("Title")
                        .IsUnique()
                        .HasDatabaseName("ix_versioned_pages_title");

                    b.ToTable("versioned_pages", (string)null);
                });

            modelBuilder.Entity("RevolutionaryWebApp.Server.Models.PatreonSettings", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("active");

                    b.Property<string>("CampaignId")
                        .HasColumnType("text")
                        .HasColumnName("campaign_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatorRefreshToken")
                        .HasColumnType("text")
                        .HasColumnName("creator_refresh_token");

                    b.Property<string>("CreatorToken")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("creator_token");

                    b.Property<string>("DevbuildsRewardId")
                        .HasColumnType("text")
                        .HasColumnName("devbuilds_reward_id");

                    b.Property<DateTime?>("LastRefreshed")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_refreshed");

                    b.Property<DateTime?>("LastWebhook")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_webhook");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("VipRewardId")
                        .HasColumnType("text")
                        .HasColumnName("vip_reward_id");

                    b.Property<string>("WebhookId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("webhook_id");

                    b.Property<string>("WebhookSecret")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("webhook_secret");

                    b.HasKey("Id")
                        .HasName("pk_patreon_settings");

                    b.HasIndex("WebhookId")
                        .IsUnique()
                        .HasDatabaseName("ix_patreon_settings_webhook_id");

                    b.ToTable("patreon_settings", (string)null);
                });

            modelBuilder.Entity("RevolutionaryWebApp.Server.Models.Patron", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("EmailAlias")
                        .HasColumnType("text")
                        .HasColumnName("email_alias");

                    b.Property<bool?>("HasForumAccount")
                        .HasColumnType("boolean")
                        .HasColumnName("has_forum_account");

                    b.Property<bool?>("Marked")
                        .HasColumnType("boolean")
                        .HasColumnName("marked");

                    b.Property<string>("PatreonRefreshToken")
                        .HasColumnType("text")
                        .HasColumnName("patreon_refresh_token");

                    b.Property<string>("PatreonToken")
                        .HasColumnType("text")
                        .HasColumnName("patreon_token");

                    b.Property<int>("PledgeAmountCents")
                        .HasColumnType("integer")
                        .HasColumnName("pledge_amount_cents");

                    b.Property<string>("RewardId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("reward_id");

                    b.Property<bool?>("Suspended")
                        .HasColumnType("boolean")
                        .HasColumnName("suspended");

                    b.Property<string>("SuspendedReason")
                        .HasColumnType("text")
                        .HasColumnName("suspended_reason");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("username");

                    b.HasKey("Id")
                        .HasName("pk_patrons");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("ix_patrons_email");

                    b.HasIndex("EmailAlias")
                        .IsUnique()
                        .HasDatabaseName("ix_patrons_email_alias");

                    b.ToTable("patrons", (string)null);
                });

            modelBuilder.Entity("RevolutionaryWebApp.Server.Models.PrecompiledObject", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean")
                        .HasColumnName("deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<bool>("Public")
                        .HasColumnType("boolean")
                        .HasColumnName("public");

                    b.Property<long>("TotalStorageSize")
                        .HasColumnType("bigint")
                        .HasColumnName("total_storage_size");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_precompiled_objects");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_precompiled_objects_name");

                    b.ToTable("precompiled_objects", (string)null);
                });

            modelBuilder.Entity("RevolutionaryWebApp.Server.Models.PrecompiledObjectVersion", b =>
                {
                    b.Property<long>("OwnedById")
                        .HasColumnType("bigint")
                        .HasColumnName("owned_by_id");

                    b.Property<string>("Version")
                        .HasColumnType("text")
                        .HasColumnName("version");

                    b.Property<int>("Platform")
                        .HasColumnType("integer")
                        .HasColumnName("platform");

                    b.Property<int>("Tags")
                        .HasColumnType("integer")
                        .HasColumnName("tags");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by_id");

                    b.Property<DateTime?>("LastDownload")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_download");

                    b.Property<long>("Size")
                        .HasColumnType("bigint")
                        .HasColumnName("size");

                    b.Property<long>("StoredInItemId")
                        .HasColumnType("bigint")
                        .HasColumnName("stored_in_item_id");

                    b.Property<bool>("Uploaded")
                        .HasColumnType("boolean")
                        .HasColumnName("uploaded");

                    b.HasKey("OwnedById", "Version", "Platform", "Tags")
                        .HasName("pk_precompiled_object_versions");

                    b.HasIndex("CreatedById")
                        .HasDatabaseName("ix_precompiled_object_versions_created_by_id");

                    b.HasIndex("StoredInItemId")
                        .HasDatabaseName("ix_precompiled_object_versions_stored_in_item_id");

                    b.ToTable("precompiled_object_versions", (string)null);
                });

            modelBuilder.Entity("RevolutionaryWebApp.Server.Models.ProjectGitFile", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseHiLo(b.Property<long>("Id"), "project_git_files_hilo");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("FType")
                        .HasColumnType("integer")
                        .HasColumnName("f_type");

                    b.Property<string>("LfsOid")
                        .HasColumnType("text")
                        .HasColumnName("lfs_oid");

                    b.Property<long>("LfsProjectId")
                        .HasColumnType("bigint")
                        .HasColumnName("lfs_project_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("path");

                    b.Property<int?>("Size")
                        .HasColumnType("integer")
                        .HasColumnName("size");

                    b.HasKey("Id")
                        .HasName("pk_project_git_files");

                    b.HasIndex("LfsProjectId", "Path", "Name")
                        .IsUnique()
                        .HasDatabaseName("ix_project_git_files_lfs_project_id_path_name");

                    b.ToTable("project_git_files", (string)null);
                });

            modelBuilder.Entity("RevolutionaryWebApp.Server.Models.RedeemableCode", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("timezone('utc', now())");

                    b.Property<string>("GrantedResource")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("granted_resource");

                    b.Property<string>("HashedId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("hashed_id");

                    b.Property<bool>("MultiUse")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("multi_use");

                    b.Property<int>("Uses")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("uses");

                    b.HasKey("Id")
                        .HasName("pk_redeemable_codes");

                    b.HasIndex("HashedId")
                        .IsUnique()
                        .HasDatabaseName("ix_redeemable_codes_hashed_id");

                    b.ToTable("redeemable_codes", (string)null);
                });

            modelBuilder.Entity("RevolutionaryWebApp.Server.Models.RepoForReleaseStats", b =>
                {
                    b.Property<string>("QualifiedName")
                        .HasColumnType("text")
                        .HasColumnName("qualified_name");

                    b.Property<string>("IgnoreDownloads")
                        .HasColumnType("text")
                        .HasColumnName("ignore_downloads");

                    b.Property<bool>("ShowInAll")
                        .HasColumnType("boolean")
                        .HasColumnName("show_in_all");

                    b.HasKey("QualifiedName")
                        .HasName("pk_repos_for_release_stats");

                    b.ToTable("repos_for_release_stats", (string)null);
                });

            modelBuilder.Entity("RevolutionaryWebApp.Server.Models.SeenFeedItem", b =>
                {
                    b.Property<long>("FeedId")
                        .HasColumnType("bigint")
                        .HasColumnName("feed_id");

                    b.Property<string>("ItemIdentifier")
                        .HasColumnType("text")
                        .HasColumnName("item_identifier");

                    b.Property<DateTime>("SeenAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("seen_at");

                    b.HasKey("FeedId", "ItemIdentifier")
                        .HasName("pk_seen_feed_items");

                    b.ToTable("seen_feed_items", (string)null);
                });

            modelBuilder.Entity("RevolutionaryWebApp.Server.Models.SentBulkEmail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("HtmlBody")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("html_body");

                    b.Property<string>("PlainBody")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("plain_body");

                    b.Property<int>("Recipients")
                        .HasColumnType("integer")
                        .HasColumnName("recipients");

                    b.Property<long?>("SentById")
                        .HasColumnType("bigint")
                        .HasColumnName("sent_by_id");

                    b.Property<string>("SystemSend")
                        .HasColumnType("text")
                        .HasColumnName("system_send");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("pk_sent_bulk_emails");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("ix_sent_bulk_emails_created_at");

                    b.HasIndex("SentById")
                        .HasDatabaseName("ix_sent_bulk_emails_sent_by_id");

                    b.ToTable("sent_bulk_emails", (string)null);
                });

            modelBuilder.Entity("RevolutionaryWebApp.Server.Models.Session", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("CachedUserGroupsRaw")
                        .HasColumnType("text")
                        .HasColumnName("cached_user_groups_raw");

                    b.Property<string>("HashedId")
                        .HasColumnType("text")
                        .HasColumnName("hashed_id");

                    b.Property<DateTime?>("LastLoggedIn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_logged_in");

                    b.Property<DateTime>("LastUsed")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_used");

                    b.Property<IPAddress>("LastUsedFrom")
                        .HasColumnType("inet")
                        .HasColumnName("last_used_from");

                    b.Property<string>("SsoNonce")
                        .HasColumnType("text")
                        .HasColumnName("sso_nonce");

                    b.Property<string>("SsoReturnUrl")
                        .HasColumnType("text")
                        .HasColumnName("sso_return_url");

                    b.Property<DateTime?>("SsoStartTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("sso_start_time");

                    b.Property<DateTime>("StartedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("started_at")
                        .HasDefaultValueSql("timezone('utc', now())");

                    b.Property<string>("StartedSsoLogin")
                        .HasColumnType("text")
                        .HasColumnName("started_sso_login");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_sessions");

                    b.HasIndex("HashedId")
                        .IsUnique()
                        .HasDatabaseName("ix_sessions_hashed_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_sessions_user_id");

                    b.ToTable("sessions", (string)null);
                });

            modelBuilder.Entity("RevolutionaryWebApp.Server.Models.StackwalkTask", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<bool>("DeleteDumpAfterRunning")
                        .HasColumnType("boolean")
                        .HasColumnName("delete_dump_after_running");

                    b.Property<string>("DumpFileName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("dump_file_name");

                    b.Property<string>("DumpTempCategory")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("dump_temp_category");

                    b.Property<DateTime?>("FinishedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("finished_at");

                    b.Property<string>("HashedId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("hashed_id");

                    b.Property<string>("Result")
                        .HasColumnType("text")
                        .HasColumnName("result");

                    b.Property<int>("StackwalkPlatform")
                        .HasColumnType("integer")
                        .HasColumnName("stackwalk_platform");

                    b.Property<bool>("Succeeded")
                        .HasColumnType("boolean")
                        .HasColumnName("succeeded");

                    b.HasKey("Id")
                        .HasName("pk_stackwalk_tasks");

                    b.HasIndex("HashedId")
                        .IsUnique()
                        .HasDatabaseName("ix_stackwalk_tasks_hashed_id");

                    b.ToTable("stackwalk_tasks", (string)null);
                });

            modelBuilder.Entity("RevolutionaryWebApp.Server.Models.StorageFile", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseHiLo(b.Property<long>("Id"), "storage_files_hilo");

                    b.Property<bool>("AllowParentless")
                        .HasColumnType("boolean")
                        .HasColumnName("allow_parentless");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<long?>("Size")
                        .HasColumnType("bigint")
                        .HasColumnName("size");

                    b.Property<string>("StoragePath")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("storage_path");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<DateTime?>("UploadExpires")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("upload_expires");

                    b.Property<bool>("Uploading")
                        .HasColumnType("boolean")
                        .HasColumnName("uploading");

                    b.HasKey("Id")
                        .HasName("pk_storage_files");

                    b.HasIndex("StoragePath")
                        .IsUnique()
                        .HasDatabaseName("ix_storage_files_storage_path");

                    b.HasIndex("Uploading")
                        .HasDatabaseName("ix_storage_files_uploading");

                    b.ToTable("storage_files", (string)null);
                });

            modelBuilder.Entity("RevolutionaryWebApp.Server.Models.StorageItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseHiLo(b.Property<long>("Id"), "storage_items_hilo");

                    b.Property<bool>("AllowParentless")
                        .HasColumnType("boolean")
                        .HasColumnName("allow_parentless");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean")
                        .HasColumnName("deleted");

                    b.Property<int>("Ftype")
                        .HasColumnType("integer")
                        .HasColumnName("ftype");

                    b.Property<bool>("Important")
                        .HasColumnType("boolean")
                        .HasColumnName("important");

                    b.Property<long?>("LastModifiedById")
                        .HasColumnType("bigint")
                        .HasColumnName("last_modified_by_id");

                    b.Property<bool>("ModificationLocked")
                        .HasColumnType("boolean")
                        .HasColumnName("modification_locked");

                    b.Property<string>("MovedFromLocation")
                        .HasColumnType("text")
                        .HasColumnName("moved_from_location");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<long?>("OwnerId")
                        .HasColumnType("bigint")
                        .HasColumnName("owner_id");

                    b.Property<long?>("ParentId")
                        .HasColumnType("bigint")
                        .HasColumnName("parent_id");

                    b.Property<int>("ReadAccess")
                        .HasColumnType("integer")
                        .HasColumnName("read_access");

                    b.Property<long?>("Size")
                        .HasColumnType("bigint")
                        .HasColumnName("size");

                    b.Property<bool>("Special")
                        .HasColumnType("boolean")
                        .HasColumnName("special");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<int>("WriteAccess")
                        .HasColumnType("integer")
                        .HasColumnName("write_access");

                    b.HasKey("Id")
                        .HasName("pk_storage_items");

                    b.HasIndex("AllowParentless")
                        .HasDatabaseName("ix_storage_items_allow_parentless");

                    b.HasIndex("LastModifiedById")
                        .HasDatabaseName("ix_storage_items_last_modified_by_id");

                    b.HasIndex("OwnerId")
                        .HasDatabaseName("ix_storage_items_owner_id");

                    b.HasIndex("ParentId")
                        .HasDatabaseName("ix_storage_items_parent_id");

                    b.HasIndex("Name", "ParentId")
                        .IsUnique()
                        .HasDatabaseName("ix_storage_items_name_parent_id");

                    b.HasIndex(new[] { "Name" }, "index_storage_items_on_name")
                        .IsUnique()
                        .HasDatabaseName("ix_storage_items_name")
                        .HasFilter("(parent_id IS NULL)");

                    b.ToTable("storage_items", (string)null);
                });

            modelBuilder.Entity("RevolutionaryWebApp.Server.Models.StorageItemDeleteInfo", b =>
                {
                    b.Property<long>("StorageItemId")
                        .HasColumnType("bigint")
                        .HasColumnName("storage_item_id");

                    b.Property<DateTime>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<long?>("DeletedById")
                        .HasColumnType("bigint")
                        .HasColumnName("deleted_by_id");

                    b.Property<long?>("OriginalFolderId")
                        .HasColumnType("bigint")
                        .HasColumnName("original_folder_id");

                    b.Property<bool>("OriginalFolderImportant")
                        .HasColumnType("boolean")
                        .HasColumnName("original_folder_important");

                    b.Property<bool>("OriginalFolderModificationLocked")
                        .HasColumnType("boolean")
                        .HasColumnName("original_folder_modification_locked");

                    b.Property<long?>("OriginalFolderOwnerId")
                        .HasColumnType("bigint")
                        .HasColumnName("original_folder_owner_id");

                    b.Property<string>("OriginalFolderPath")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("original_folder_path");

                    b.Property<int>("OriginalFolderReadAccess")
                        .HasColumnType("integer")
                        .HasColumnName("original_folder_read_access");

                    b.Property<int>("OriginalFolderWriteAccess")
                        .HasColumnType("integer")
                        .HasColumnName("original_folder_write_access");

                    b.Property<int>("OriginalReadAccess")
                        .HasColumnType("integer")
                        .HasColumnName("original_read_access");

                    b.Property<int>("OriginalWriteAccess")
                        .HasColumnType("integer")
                        .HasColumnName("original_write_access");

                    b.HasKey("StorageItemId")
                        .HasName("pk_storage_item_delete_infos");

                    b.HasIndex("DeletedById")
                        .HasDatabaseName("ix_storage_item_delete_infos_deleted_by_id");

                    b.HasIndex("OriginalFolderId")
                        .HasDatabaseName("ix_storage_item_delete_infos_original_folder_id");

                    b.HasIndex("OriginalFolderOwnerId")
                        .HasDatabaseName("ix_storage_item_delete_infos_original_folder_owner_id");

                    b.ToTable("storage_item_delete_infos", (string)null);
                });

            modelBuilder.Entity("RevolutionaryWebApp.Server.Models.StorageItemVersion", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseHiLo(b.Property<long>("Id"), "storage_item_versions_hilo");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean")
                        .HasColumnName("deleted");

                    b.Property<bool>("Keep")
                        .HasColumnType("boolean")
                        .HasColumnName("keep");

                    b.Property<bool>("Protected")
                        .HasColumnType("boolean")
                        .HasColumnName("protected");

                    b.Property<long>("StorageFileId")
                        .HasColumnType("bigint")
                        .HasColumnName("storage_file_id");

                    b.Property<long>("StorageItemId")
                        .HasColumnType("bigint")
                        .HasColumnName("storage_item_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<long?>("UploadedById")
                        .HasColumnType("bigint")
                        .HasColumnName("uploaded_by_id");

                    b.Property<bool>("Uploading")
                        .HasColumnType("boolean")
                        .HasColumnName("uploading");

                    b.Property<int>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.HasKey("Id")
                        .HasName("pk_storage_item_versions");

                    b.HasIndex("StorageFileId")
                        .HasDatabaseName("ix_storage_item_versions_storage_file_id");

                    b.HasIndex("UploadedById")
                        .HasDatabaseName("ix_storage_item_versions_uploaded_by_id");

                    b.HasIndex("StorageItemId", "Version")
                        .IsUnique()
                        .HasDatabaseName("ix_storage_item_versions_storage_item_id_version");

                    b.ToTable("storage_item_versions", (string)null);
                });

            modelBuilder.Entity("RevolutionaryWebApp.Server.Models.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("ApiToken")
                        .HasColumnType("text")
                        .HasColumnName("api_token");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("DisplayName")
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)")
                        .HasColumnName("display_name");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("HashedApiToken")
                        .HasColumnType("text")
                        .HasColumnName("hashed_api_token");

                    b.Property<string>("HashedLauncherLinkCode")
                        .HasColumnType("text")
                        .HasColumnName("hashed_launcher_link_code");

                    b.Property<string>("HashedLfsToken")
                        .HasColumnType("text")
                        .HasColumnName("hashed_lfs_token");

                    b.Property<DateTime?>("LauncherCodeExpires")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("launcher_code_expires");

                    b.Property<string>("LauncherLinkCode")
                        .HasColumnType("text")
                        .HasColumnName("launcher_link_code");

                    b.Property<string>("LfsToken")
                        .HasColumnType("text")
                        .HasColumnName("lfs_token");

                    b.Property<bool>("Local")
                        .HasColumnType("boolean")
                        .HasColumnName("local");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("text")
                        .HasColumnName("normalized_email");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.Property<string>("SsoSource")
                        .HasColumnType("text")
                        .HasColumnName("sso_source");

                    b.Property<bool>("Suspended")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("suspended");

                    b.Property<bool>("SuspendedManually")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("suspended_manually");

                    b.Property<string>("SuspendedReason")
                        .HasColumnType("text")
                        .HasColumnName("suspended_reason");

                    b.Property<int>("TotalLauncherLinks")
                        .HasColumnType("integer")
                        .HasColumnName("total_launcher_links");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("DisplayName")
                        .IsUnique()
                        .HasDatabaseName("ix_users_display_name");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("ix_users_email");

                    b.HasIndex("HashedApiToken")
                        .IsUnique()
                        .HasDatabaseName("ix_users_hashed_api_token");

                    b.HasIndex("HashedLauncherLinkCode")
                        .IsUnique()
                        .HasDatabaseName("ix_users_hashed_launcher_link_code");

                    b.HasIndex("HashedLfsToken")
                        .IsUnique()
                        .HasDatabaseName("ix_users_hashed_lfs_token");

                    b.HasIndex("NormalizedEmail")
                        .IsUnique()
                        .HasDatabaseName("ix_users_normalized_email");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("RevolutionaryWebApp.Server.Models.UserGroup", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_user_groups");

                    b.ToTable("user_groups", null, t =>
                        {
                            t.HasCheckConstraint("id_validity_check", "id > 0 AND id != 5 AND id != 10000 AND id != 2");
                        });

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "RestrictedUser"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Developer"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Admin"
                        },
                        new
                        {
                            Id = 6,
                            Name = "SitePageEditor"
                        },
                        new
                        {
                            Id = 7,
                            Name = "SiteLayoutEditor"
                        },
                        new
                        {
                            Id = 8,
                            Name = "PostPublisher"
                        },
                        new
                        {
                            Id = 9,
                            Name = "TemplateEditor"
                        },
                        new
                        {
                            Id = 10,
                            Name = "SitePagePublisher"
                        },
                        new
                        {
                            Id = 11,
                            Name = "WikiEditor"
                        },
                        new
                        {
                            Id = 12,
                            Name = "PostEditor"
                        });
                });

            modelBuilder.Entity("RevolutionaryWebApp.Server.Models.UserGroupExtraData", b =>
                {
                    b.Property<int>("GroupId")
                        .HasColumnType("integer")
                        .HasColumnName("group_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CustomDescription")
                        .HasColumnType("text")
                        .HasColumnName("custom_description");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("GroupId")
                        .HasName("pk_user_groups_extra_data");

                    b.ToTable("user_groups_extra_data", (string)null);

                    b.HasData(
                        new
                        {
                            GroupId = 1,
                            CreatedAt = new DateTime(2023, 4, 2, 16, 4, 31, 355, DateTimeKind.Utc).AddTicks(4672),
                            CustomDescription = "Inbuilt group, cannot be modified",
                            UpdatedAt = new DateTime(2023, 4, 2, 16, 4, 31, 355, DateTimeKind.Utc).AddTicks(4672)
                        },
                        new
                        {
                            GroupId = 3,
                            CreatedAt = new DateTime(2023, 4, 2, 16, 4, 31, 355, DateTimeKind.Utc).AddTicks(4672),
                            CustomDescription = "Inbuilt group, cannot be modified",
                            UpdatedAt = new DateTime(2023, 4, 2, 16, 4, 31, 355, DateTimeKind.Utc).AddTicks(4672)
                        },
                        new
                        {
                            GroupId = 4,
                            CreatedAt = new DateTime(2023, 4, 2, 16, 4, 31, 355, DateTimeKind.Utc).AddTicks(4672),
                            CustomDescription = "Inbuilt group, cannot be modified",
                            UpdatedAt = new DateTime(2023, 4, 2, 16, 4, 31, 355, DateTimeKind.Utc).AddTicks(4672)
                        },
                        new
                        {
                            GroupId = 6,
                            CreatedAt = new DateTime(2023, 4, 2, 16, 4, 31, 355, DateTimeKind.Utc).AddTicks(4672),
                            CustomDescription = "Inbuilt group, cannot be modified",
                            UpdatedAt = new DateTime(2023, 4, 2, 16, 4, 31, 355, DateTimeKind.Utc).AddTicks(4672)
                        },
                        new
                        {
                            GroupId = 7,
                            CreatedAt = new DateTime(2023, 4, 2, 16, 4, 31, 355, DateTimeKind.Utc).AddTicks(4672),
                            CustomDescription = "Inbuilt group, cannot be modified",
                            UpdatedAt = new DateTime(2023, 4, 2, 16, 4, 31, 355, DateTimeKind.Utc).AddTicks(4672)
                        },
                        new
                        {
                            GroupId = 8,
                            CreatedAt = new DateTime(2023, 4, 2, 16, 4, 31, 355, DateTimeKind.Utc).AddTicks(4672),
                            CustomDescription = "Inbuilt group, cannot be modified",
                            UpdatedAt = new DateTime(2023, 4, 2, 16, 4, 31, 355, DateTimeKind.Utc).AddTicks(4672)
                        },
                        new
                        {
                            GroupId = 9,
                            CreatedAt = new DateTime(2023, 4, 2, 16, 4, 31, 355, DateTimeKind.Utc).AddTicks(4672),
                            CustomDescription = "Inbuilt group, cannot be modified",
                            UpdatedAt = new DateTime(2023, 4, 2, 16, 4, 31, 355, DateTimeKind.Utc).AddTicks(4672)
                        },
                        new
                        {
                            GroupId = 10,
                            CreatedAt = new DateTime(2023, 4, 2, 16, 4, 31, 355, DateTimeKind.Utc).AddTicks(4672),
                            CustomDescription = "Inbuilt group, cannot be modified",
                            UpdatedAt = new DateTime(2023, 4, 2, 16, 4, 31, 355, DateTimeKind.Utc).AddTicks(4672)
                        },
                        new
                        {
                            GroupId = 11,
                            CreatedAt = new DateTime(2023, 4, 2, 16, 4, 31, 355, DateTimeKind.Utc).AddTicks(4672),
                            CustomDescription = "Inbuilt group, cannot be modified",
                            UpdatedAt = new DateTime(2023, 4, 2, 16, 4, 31, 355, DateTimeKind.Utc).AddTicks(4672)
                        },
                        new
                        {
                            GroupId = 12,
                            CreatedAt = new DateTime(2023, 4, 2, 16, 4, 31, 355, DateTimeKind.Utc).AddTicks(4672),
                            CustomDescription = "Inbuilt group, cannot be modified",
                            UpdatedAt = new DateTime(2023, 4, 2, 16, 4, 31, 355, DateTimeKind.Utc).AddTicks(4672)
                        });
                });

            modelBuilder.Entity("RevolutionaryWebApp.Server.Models.WatchedKeyword", b =>
                {
                    b.Property<string>("Keyword")
                        .HasColumnType("text")
                        .HasColumnName("keyword");

                    b.Property<DateTime>("LastSeen")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_seen");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<int>("TotalCount")
                        .HasColumnType("integer")
                        .HasColumnName("total_count");

                    b.HasKey("Keyword")
                        .HasName("pk_watched_keywords");

                    b.ToTable("watched_keywords", (string)null);
                });

            modelBuilder.Entity("UserUserGroup", b =>
                {
                    b.Property<int>("GroupsId")
                        .HasColumnType("integer")
                        .HasColumnName("groups_id");

                    b.Property<long>("MembersId")
                        .HasColumnType("bigint")
                        .HasColumnName("members_id");

                    b.HasKey("GroupsId", "MembersId")
                        .HasName("pk_user_user_group");

                    b.HasIndex("MembersId")
                        .HasDatabaseName("ix_user_user_group_members_id");

                    b.ToTable("user_user_group", (string)null);
                });

            modelBuilder.Entity("CombinedFeedFeed", b =>
                {
                    b.HasOne("RevolutionaryWebApp.Server.Models.Feed", null)
                        .WithMany()
                        .HasForeignKey("CombinedFromFeedsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_combined_feed_feed_feeds_combined_from_feeds_id");

                    b.HasOne("RevolutionaryWebApp.Server.Models.CombinedFeed", null)
                        .WithMany()
                        .HasForeignKey("CombinedIntoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_combined_feed_feed_combined_feeds_combined_into_id");
                });

            modelBuilder.Entity("DehydratedObjectDevBuild", b =>
                {
                    b.HasOne("RevolutionaryWebApp.Server.Models.DehydratedObject", null)
                        .WithMany()
                        .HasForeignKey("DehydratedObjectsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_dehydrated_objects_dev_builds_dehydrated_objects_dehydrated");

                    b.HasOne("RevolutionaryWebApp.Server.Models.DevBuild", null)
                        .WithMany()
                        .HasForeignKey("DevBuildsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_dehydrated_objects_dev_builds_dev_builds_dev_builds_id");
                });

            modelBuilder.Entity("GithubAutoCommentGithubPullRequest", b =>
                {
                    b.HasOne("RevolutionaryWebApp.Server.Models.GithubAutoComment", null)
                        .WithMany()
                        .HasForeignKey("AutoCommentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_github_auto_comment_github_pull_request_github_auto_comment");

                    b.HasOne("RevolutionaryWebApp.Server.Models.GithubPullRequest", null)
                        .WithMany()
                        .HasForeignKey("PostedOnPullRequestsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_github_auto_comment_github_pull_request_github_pull_request");
                });

            modelBuilder.Entity("RevolutionaryWebApp.Server.Models.ActionLogEntry", b =>
                {
                    b.HasOne("RevolutionaryWebApp.Server.Models.User", "PerformedBy")
                        .WithMany("PerformedActions")
                        .HasForeignKey("PerformedById")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_action_log_entries_users_performed_by_id");

                    b.Navigation("PerformedBy");
                });

            modelBuilder.Entity("RevolutionaryWebApp.Server.Models.AdminAction", b =>
                {
                    b.HasOne("RevolutionaryWebApp.Server.Models.User", "PerformedBy")
                        .WithMany("PerformedAdminActions")
                        .HasForeignKey("PerformedById")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_admin_actions_users_performed_by_id");

                    b.HasOne("RevolutionaryWebApp.Server.Models.User", "TargetUser")
                        .WithMany("TargetedByAdminActions")
                        .HasForeignKey("TargetUserId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_admin_actions_users_target_user_id");

                    b.Navigation("PerformedBy");

                    b.Navigation("TargetUser");
                });

            modelBuilder.Entity("RevolutionaryWebApp.Server.Models.AssociationMember", b =>
                {
                    b.HasOne("RevolutionaryWebApp.Server.Models.User", "User")
                        .WithOne("AssociationMember")
                        .HasForeignKey("RevolutionaryWebApp.Server.Models.AssociationMember", "UserId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_association_members_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("RevolutionaryWebApp.Server.Models.CiBuild", b =>
                {
                    b.HasOne("RevolutionaryWebApp.Server.Models.CiProject", "CiProject")
                        .WithMany("CiBuilds")
                        .HasForeignKey("CiProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_ci_builds_ci_projects_ci_project_id");

                    b.Navigation("CiProject");
                });

            modelBuilder.Entity("RevolutionaryWebApp.Server.Models.CiJob", b =>
                {
                    b.HasOne("RevolutionaryWebApp.Server.Models.CiBuild", "Build")
                        .WithMany("CiJobs")
                        .HasForeignKey("CiProjectId", "CiBuildId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_ci_jobs_ci_builds_ci_project_id_ci_build_id");

                    b.Navigation("Build");
                });

            modelBuilder.Entity("RevolutionaryWebApp.Server.Models.CiJobArtifact", b =>
                {
                    b.HasOne("RevolutionaryWebApp.Server.Models.StorageItem", "StorageItem")
                        .WithMany("CiJobArtifacts")
                        .HasForeignKey("StorageItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_ci_job_artifacts_storage_items_storage_item_id");

                    b.HasOne("RevolutionaryWebApp.Server.Models.CiJob", "Job")
                        .WithMany("CiJobArtifacts")
                        .HasForeignKey("CiProjectId", "CiBuildId", "CiJobId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_ci_job_artifacts_ci_jobs_ci_project_id_ci_build_id_ci_job_id");

                    b.Navigation("Job");

                    b.Navigation("StorageItem");
                });

            modelBuilder.Entity("RevolutionaryWebApp.Server.Models.CiJobOutputSection", b =>
                {
                    b.HasOne("RevolutionaryWebApp.Server.Models.CiJob", "Job")
                        .WithMany("CiJobOutputSections")
                        .HasForeignKey("CiProjectId", "CiBuildId", "CiJobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_ci_job_output_sections_ci_jobs_ci_project_id_ci_build_id_ci");

                    b.Navigation("Job");
                });

            modelBuilder.Entity("RevolutionaryWebApp.Server.Models.CiSecret", b =>
                {
                    b.HasOne("RevolutionaryWebApp.Server.Models.CiProject", "CiProject")
                        .WithMany("CiSecrets")
                        .HasForeignKey("CiProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_ci_secrets_ci_projects_ci_project_id");

                    b.Navigation("CiProject");
                });

            modelBuilder.Entity("RevolutionaryWebApp.Server.Models.ClaSignature", b =>
                {
                    b.HasOne("RevolutionaryWebApp.Server.Models.Cla", "Cla")
                        .WithMany("Signatures")
                        .HasForeignKey("ClaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_cla_signatures_clas_cla_id");

                    b.HasOne("RevolutionaryWebApp.Server.Models.User", "User")
                        .WithMany("ClaSignatures")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_cla_signatures_users_user_id");

                    b.Navigation("Cla");

                    b.Navigation("User");
                });

            modelBuilder.Entity("RevolutionaryWebApp.Server.Models.CrashReport", b =>
                {
                    b.HasOne("RevolutionaryWebApp.Server.Models.User", "DescriptionLastEditedBy")
                        .WithMany("LastEditedCrashReportDescriptions")
                        .HasForeignKey("DescriptionLastEditedById")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_crash_reports_users_description_last_edited_by_id");

                    b.HasOne("RevolutionaryWebApp.Server.Models.CrashReport", "DuplicateOf")
                        .WithMany("Duplicates")
                        .HasForeignKey("DuplicateOfId")
                        .HasConstraintName("fk_crash_reports_crash_reports_duplicate_of_id");

                    b.Navigation("DescriptionLastEditedBy");

                    b.Navigation("DuplicateOf");
                });

            modelBuilder.Entity("RevolutionaryWebApp.Server.Models.DebugSymbol", b =>
                {
                    b.HasOne("RevolutionaryWebApp.Server.Models.User", "CreatedBy")
                        .WithMany("CreatedDebugSymbols")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_debug_symbols_users_created_by_id");

                    b.HasOne("RevolutionaryWebApp.Server.Models.StorageItem", "StoredInItem")
                        .WithMany("DebugSymbols")
                        .HasForeignKey("StoredInItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_debug_symbols_storage_items_stored_in_item_id");

                    b.Navigation("CreatedBy");

                    b.Navigation("StoredInItem");
                });

            modelBuilder.Entity("RevolutionaryWebApp.Server.Models.DehydratedObject", b =>
                {
                    b.HasOne("RevolutionaryWebApp.Server.Models.StorageItem", "StorageItem")
                        .WithMany("DehydratedObjects")
                        .HasForeignKey("StorageItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_dehydrated_objects_storage_items_storage_item_id");

                    b.Navigation("StorageItem");
                });

            modelBuilder.Entity("RevolutionaryWebApp.Server.Models.DevBuild", b =>
                {
                    b.HasOne("RevolutionaryWebApp.Server.Models.StorageItem", "StorageItem")
                        .WithMany("DevBuilds")
                        .HasForeignKey("StorageItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_dev_builds_storage_items_storage_item_id");

                    b.HasOne("RevolutionaryWebApp.Server.Models.User", "VerifiedBy")
                        .WithMany("DevBuilds")
                        .HasForeignKey("VerifiedById")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_dev_builds_users_verified_by_id");

                    b.Navigation("StorageItem");

                    b.Navigation("VerifiedBy");
                });

            modelBuilder.Entity("RevolutionaryWebApp.Server.Models.ExecutedMaintenanceOperation", b =>
                {
                    b.HasOne("RevolutionaryWebApp.Server.Models.User", "PerformedBy")
                        .WithMany("ExecutedMaintenanceOperations")
                        .HasForeignKey("PerformedById")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_executed_maintenance_operations_users_performed_by_id");

                    b.Navigation("PerformedBy");
                });

            modelBuilder.Entity("RevolutionaryWebApp.Server.Models.FeedDiscordWebhook", b =>
                {
                    b.HasOne("RevolutionaryWebApp.Server.Models.Feed", "Feed")
                        .WithMany("DiscordWebhooks")
                        .HasForeignKey("FeedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_feed_discord_webhooks_feeds_feed_id");

                    b.Navigation("Feed");
                });

            modelBuilder.Entity("RevolutionaryWebApp.Server.Models.InProgressClaSignature", b =>
                {
                    b.HasOne("RevolutionaryWebApp.Server.Models.Cla", "Cla")
                        .WithMany("InProgressSignatures")
                        .HasForeignKey("ClaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_in_progress_cla_signatures_clas_cla_id");

                    b.HasOne("RevolutionaryWebApp.Server.Models.Session", "Session")
                        .WithOne("InProgressClaSignature")
                        .HasForeignKey("RevolutionaryWebApp.Server.Models.InProgressClaSignature", "SessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_in_progress_cla_signatures_sessions_session_id");

                    b.Navigation("Cla");

                    b.Navigation("Session");
                });

            modelBuilder.Entity("RevolutionaryWebApp.Server.Models.LauncherLink", b =>
                {
                    b.HasOne("RevolutionaryWebApp.Server.Models.User", "User")
                        .WithMany("LauncherLinks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_launcher_links_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("RevolutionaryWebApp.Server.Models.LauncherThriveVersionDownload", b =>
                {
                    b.HasOne("RevolutionaryWebApp.Server.Models.LauncherDownloadMirror", "Mirror")
                        .WithMany("ThriveVersionDownloads")
                        .HasForeignKey("MirrorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_launcher_thrive_version_downloads_launcher_download_mirrors");

                    b.HasOne("RevolutionaryWebApp.Server.Models.LauncherThriveVersion", "Version")
                        .WithMany()
                        .HasForeignKey("VersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_launcher_thrive_version_downloads_launcher_thrive_versions_");

                    b.HasOne("RevolutionaryWebApp.Server.Models.LauncherThriveVersionPlatform", "PartOfPlatform")
                        .WithMany("Mirrors")
                        .HasForeignKey("VersionId", "Platform")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_launcher_thrive_version_downloads_launcher_thrive_version_p");

                    b.Navigation("Mirror");

                    b.Navigation("PartOfPlatform");

                    b.Navigation("Version");
                });

            modelBuilder.Entity("RevolutionaryWebApp.Server.Models.LauncherThriveVersionPlatform", b =>
                {
                    b.HasOne("RevolutionaryWebApp.Server.Models.LauncherThriveVersion", "Version")
                        .WithMany("Platforms")
                        .HasForeignKey("VersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_launcher_thrive_version_platforms_launcher_thrive_versions_");

                    b.Navigation("Version");
                });

            modelBuilder.Entity("RevolutionaryWebApp.Server.Models.LauncherVersionAutoUpdateChannel", b =>
                {
                    b.HasOne("RevolutionaryWebApp.Server.Models.LauncherLauncherVersion", "Version")
                        .WithMany("AutoUpdateDownloads")
                        .HasForeignKey("VersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_launcher_version_auto_update_channels_launcher_launcher_ver");

                    b.Navigation("Version");
                });

            modelBuilder.Entity("RevolutionaryWebApp.Server.Models.LauncherVersionDownload", b =>
                {
                    b.HasOne("RevolutionaryWebApp.Server.Models.LauncherDownloadMirror", "Mirror")
                        .WithMany("LauncherVersionDownloads")
                        .HasForeignKey("MirrorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_launcher_version_downloads_launcher_download_mirrors_mirror");

                    b.HasOne("RevolutionaryWebApp.Server.Models.LauncherLauncherVersion", "Version")
                        .WithMany()
                        .HasForeignKey("VersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_launcher_version_downloads_launcher_launcher_versions_versi");

                    b.HasOne("RevolutionaryWebApp.Server.Models.LauncherVersionAutoUpdateChannel", "UpdateChannel")
                        .WithMany("Mirrors")
                        .HasForeignKey("VersionId", "Channel")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_launcher_version_downloads_launcher_version_auto_update_cha");

                    b.Navigation("Mirror");

                    b.Navigation("UpdateChannel");

                    b.Navigation("Version");
                });

            modelBuilder.Entity("RevolutionaryWebApp.Server.Models.LfsObject", b =>
                {
                    b.HasOne("RevolutionaryWebApp.Server.Models.LfsProject", "LfsProject")
                        .WithMany("LfsObjects")
                        .HasForeignKey("LfsProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_lfs_objects_lfs_projects_lfs_project_id");

                    b.Navigation("LfsProject");
                });

            modelBuilder.Entity("RevolutionaryWebApp.Server.Models.LogEntry", b =>
                {
                    b.HasOne("RevolutionaryWebApp.Server.Models.User", "TargetUser")
                        .WithMany("TargetedInLogs")
                        .HasForeignKey("TargetUserId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_log_entries_users_target_user_id");

                    b.Navigation("TargetUser");
                });

            modelBuilder.Entity("RevolutionaryWebApp.Server.Models.Meeting", b =>
                {
                    b.HasOne("RevolutionaryWebApp.Server.Models.User", "Chairman")
                        .WithMany("ChairmanOfMeetings")
                        .HasForeignKey("ChairmanId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_meetings_users_chairman_id");

                    b.HasOne("RevolutionaryWebApp.Server.Models.User", "Owner")
                        .WithMany("OwnerOfMeetings")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_meetings_users_owner_id");

                    b.HasOne("RevolutionaryWebApp.Server.Models.User", "Secretary")
                        .WithMany("SecretaryOfMeetings")
                        .HasForeignKey("SecretaryId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_meetings_users_secretary_id");

                    b.Navigation("Chairman");

                    b.Navigation("Owner");

                    b.Navigation("Secretary");
                });

            modelBuilder.Entity("RevolutionaryWebApp.Server.Models.MeetingMember", b =>
                {
                    b.HasOne("RevolutionaryWebApp.Server.Models.Meeting", "Meeting")
                        .WithMany("MeetingMembers")
                        .HasForeignKey("MeetingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_meeting_members_meetings_meeting_id");

                    b.HasOne("RevolutionaryWebApp.Server.Models.User", "User")
                        .WithMany("MemberOfMeetings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_meeting_members_users_user_id");

                    b.Navigation("Meeting");

                    b.Navigation("User");
                });

            modelBuilder.Entity("RevolutionaryWebApp.Server.Models.MeetingPoll", b =>
                {
                    b.HasOne("RevolutionaryWebApp.Server.Models.User", "ManuallyClosedBy")
                        .WithMany("ManuallyClosedPolls")
                        .HasForeignKey("ManuallyClosedById")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_meeting_polls_users_manually_closed_by_id");

                    b.HasOne("RevolutionaryWebApp.Server.Models.Meeting", "Meeting")
                        .WithMany("MeetingPolls")
                        .HasForeignKey("MeetingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_meeting_polls_meetings_meeting_id");

                    b.Navigation("ManuallyClosedBy");

                    b.Navigation("Meeting");
                });

            modelBuilder.Entity("RevolutionaryWebApp.Server.Models.MeetingPollVote", b =>
                {
                    b.HasOne("RevolutionaryWebApp.Server.Models.Meeting", "Meeting")
                        .WithMany("MeetingPollVotes")
                        .HasForeignKey("MeetingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_meeting_poll_votes_meetings_meeting_id");

                    b.HasOne("RevolutionaryWebApp.Server.Models.MeetingPoll", "Poll")
                        .WithMany("Votes")
                        .HasForeignKey("MeetingId", "PollId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_meeting_poll_votes_meeting_polls_meeting_id_poll_id");

                    b.Navigation("Meeting");

                    b.Navigation("Poll");
                });

            modelBuilder.Entity("RevolutionaryWebApp.Server.Models.MeetingPollVotingRecord", b =>
                {
                    b.HasOne("RevolutionaryWebApp.Server.Models.Meeting", "Meeting")
                        .WithMany("MeetingPollVotingRecords")
                        .HasForeignKey("MeetingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_meeting_poll_voting_records_meetings_meeting_id");

                    b.HasOne("RevolutionaryWebApp.Server.Models.User", "User")
                        .WithMany("VotedInPollsRecords")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_meeting_poll_voting_records_users_user_id");

                    b.HasOne("RevolutionaryWebApp.Server.Models.MeetingPoll", "Poll")
                        .WithMany("VotingRecords")
                        .HasForeignKey("MeetingId", "PollId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_meeting_poll_voting_records_meeting_polls_meeting_id_poll_id");

                    b.Navigation("Meeting");

                    b.Navigation("Poll");

                    b.Navigation("User");
                });

            modelBuilder.Entity("RevolutionaryWebApp.Server.Models.Pages.MediaFile", b =>
                {
                    b.HasOne("RevolutionaryWebApp.Server.Models.Pages.MediaFolder", "Folder")
                        .WithMany("FolderItems")
                        .HasForeignKey("FolderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_media_files_media_folders_folder_id");

                    b.HasOne("RevolutionaryWebApp.Server.Models.User", "LastModifiedBy")
                        .WithMany("LastModifierOfMediaFiles")
                        .HasForeignKey("LastModifiedById")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_media_files_users_last_modified_by_id");

                    b.HasOne("RevolutionaryWebApp.Server.Models.User", "UploadedBy")
                        .WithMany("UploaderOfMediaFiles")
                        .HasForeignKey("UploadedById")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_media_files_users_uploaded_by_id");

                    b.Navigation("Folder");

                    b.Navigation("LastModifiedBy");

                    b.Navigation("UploadedBy");
                });

            modelBuilder.Entity("RevolutionaryWebApp.Server.Models.Pages.MediaFolder", b =>
                {
                    b.HasOne("RevolutionaryWebApp.Server.Models.User", "LastModifiedBy")
                        .WithMany("LastModifierOfMediaFolders")
                        .HasForeignKey("LastModifiedById")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_media_folders_users_last_modified_by_id");

                    b.HasOne("RevolutionaryWebApp.Server.Models.User", "OwnedBy")
                        .WithMany("OwnerOfMediaFolders")
                        .HasForeignKey("OwnedById")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_media_folders_users_owned_by_id");

                    b.HasOne("RevolutionaryWebApp.Server.Models.Pages.MediaFolder", "ParentFolder")
                        .WithMany("SubFolders")
                        .HasForeignKey("ParentFolderId")
                        .HasConstraintName("fk_media_folders_media_folders_parent_folder_id");

                    b.Navigation("LastModifiedBy");

                    b.Navigation("OwnedBy");

                    b.Navigation("ParentFolder");
                });

            modelBuilder.Entity("RevolutionaryWebApp.Server.Models.Pages.PageEditSuggestion", b =>
                {
                    b.HasOne("RevolutionaryWebApp.Server.Models.Pages.VersionedPage", "Page")
                        .WithMany("EditSuggestions")
                        .HasForeignKey("PageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_page_edit_suggestions_versioned_pages_page_id");

                    b.HasOne("RevolutionaryWebApp.Server.Models.User", "SuggestedBy")
                        .WithMany("PageEditSuggestions")
                        .HasForeignKey("SuggestedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_page_edit_suggestions_users_suggested_by_id");

                    b.Navigation("Page");

                    b.Navigation("SuggestedBy");
                });

            modelBuilder.Entity("RevolutionaryWebApp.Server.Models.Pages.PageVersion", b =>
                {
                    b.HasOne("RevolutionaryWebApp.Server.Models.User", "EditedBy")
                        .WithMany("CreatedPageVersions")
                        .HasForeignKey("EditedById")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_page_versions_users_edited_by_id");

                    b.HasOne("RevolutionaryWebApp.Server.Models.Pages.VersionedPage", "Page")
                        .WithMany("PreviousVersions")
                        .HasForeignKey("PageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_page_versions_versioned_pages_page_id");

                    b.Navigation("EditedBy");

                    b.Navigation("Page");
                });

            modelBuilder.Entity("RevolutionaryWebApp.Server.Models.Pages.VersionedPage", b =>
                {
                    b.HasOne("RevolutionaryWebApp.Server.Models.User", "Creator")
                        .WithMany("CreatedPages")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_versioned_pages_users_creator_id");

                    b.HasOne("RevolutionaryWebApp.Server.Models.User", "LastEditor")
                        .WithMany("LastEditedPages")
                        .HasForeignKey("LastEditorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_versioned_pages_users_last_editor_id");

                    b.Navigation("Creator");

                    b.Navigation("LastEditor");
                });

            modelBuilder.Entity("RevolutionaryWebApp.Server.Models.PrecompiledObjectVersion", b =>
                {
                    b.HasOne("RevolutionaryWebApp.Server.Models.User", "CreatedBy")
                        .WithMany("CreatedPrecompiledObjects")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_precompiled_object_versions_users_created_by_id");

                    b.HasOne("RevolutionaryWebApp.Server.Models.PrecompiledObject", "OwnedBy")
                        .WithMany("Versions")
                        .HasForeignKey("OwnedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_precompiled_object_versions_precompiled_objects_owned_by_id");

                    b.HasOne("RevolutionaryWebApp.Server.Models.StorageItem", "StoredInItem")
                        .WithMany("PrecompiledObjectVersions")
                        .HasForeignKey("StoredInItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_precompiled_object_versions_storage_items_stored_in_item_id");

                    b.Navigation("CreatedBy");

                    b.Navigation("OwnedBy");

                    b.Navigation("StoredInItem");
                });

            modelBuilder.Entity("RevolutionaryWebApp.Server.Models.ProjectGitFile", b =>
                {
                    b.HasOne("RevolutionaryWebApp.Server.Models.LfsProject", "LfsProject")
                        .WithMany("ProjectGitFiles")
                        .HasForeignKey("LfsProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_project_git_files_lfs_projects_lfs_project_id");

                    b.Navigation("LfsProject");
                });

            modelBuilder.Entity("RevolutionaryWebApp.Server.Models.SeenFeedItem", b =>
                {
                    b.HasOne("RevolutionaryWebApp.Server.Models.Feed", "Feed")
                        .WithMany("SeenFeedItems")
                        .HasForeignKey("FeedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_seen_feed_items_feeds_feed_id");

                    b.Navigation("Feed");
                });

            modelBuilder.Entity("RevolutionaryWebApp.Server.Models.SentBulkEmail", b =>
                {
                    b.HasOne("RevolutionaryWebApp.Server.Models.User", "SentBy")
                        .WithMany("SentBulkEmails")
                        .HasForeignKey("SentById")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_sent_bulk_emails_users_sent_by_id");

                    b.Navigation("SentBy");
                });

            modelBuilder.Entity("RevolutionaryWebApp.Server.Models.Session", b =>
                {
                    b.HasOne("RevolutionaryWebApp.Server.Models.User", "User")
                        .WithMany("Sessions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_sessions_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("RevolutionaryWebApp.Server.Models.StorageItem", b =>
                {
                    b.HasOne("RevolutionaryWebApp.Server.Models.User", "LastModifiedBy")
                        .WithMany("LastModifiedStorageItems")
                        .HasForeignKey("LastModifiedById")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_storage_items_users_last_modified_by_id");

                    b.HasOne("RevolutionaryWebApp.Server.Models.User", "Owner")
                        .WithMany("StorageItems")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_storage_items_users_owner_id");

                    b.HasOne("RevolutionaryWebApp.Server.Models.StorageItem", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_storage_items_storage_items_parent_id");

                    b.Navigation("LastModifiedBy");

                    b.Navigation("Owner");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("RevolutionaryWebApp.Server.Models.StorageItemDeleteInfo", b =>
                {
                    b.HasOne("RevolutionaryWebApp.Server.Models.User", "DeletedBy")
                        .WithMany("DeleterOfFile")
                        .HasForeignKey("DeletedById")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_storage_item_delete_infos_users_deleted_by_id");

                    b.HasOne("RevolutionaryWebApp.Server.Models.StorageItem", "OriginalFolder")
                        .WithMany("OriginalFolderOfDeleted")
                        .HasForeignKey("OriginalFolderId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_storage_item_delete_infos_storage_items_original_folder_id");

                    b.HasOne("RevolutionaryWebApp.Server.Models.User", "OriginalFolderOwner")
                        .WithMany("OwnerOfOriginalFolderOfDeleted")
                        .HasForeignKey("OriginalFolderOwnerId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_storage_item_delete_infos_users_original_folder_owner_id");

                    b.HasOne("RevolutionaryWebApp.Server.Models.StorageItem", "StorageItem")
                        .WithOne("DeleteInfo")
                        .HasForeignKey("RevolutionaryWebApp.Server.Models.StorageItemDeleteInfo", "StorageItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_storage_item_delete_infos_storage_items_storage_item_id");

                    b.Navigation("DeletedBy");

                    b.Navigation("OriginalFolder");

                    b.Navigation("OriginalFolderOwner");

                    b.Navigation("StorageItem");
                });

            modelBuilder.Entity("RevolutionaryWebApp.Server.Models.StorageItemVersion", b =>
                {
                    b.HasOne("RevolutionaryWebApp.Server.Models.StorageFile", "StorageFile")
                        .WithMany("StorageItemVersions")
                        .HasForeignKey("StorageFileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_storage_item_versions_storage_files_storage_file_id");

                    b.HasOne("RevolutionaryWebApp.Server.Models.StorageItem", "StorageItem")
                        .WithMany("StorageItemVersions")
                        .HasForeignKey("StorageItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_storage_item_versions_storage_items_storage_item_id");

                    b.HasOne("RevolutionaryWebApp.Server.Models.User", "UploadedBy")
                        .WithMany("UploadedStorageItemVersions")
                        .HasForeignKey("UploadedById")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_storage_item_versions_users_uploaded_by_id");

                    b.Navigation("StorageFile");

                    b.Navigation("StorageItem");

                    b.Navigation("UploadedBy");
                });

            modelBuilder.Entity("RevolutionaryWebApp.Server.Models.UserGroupExtraData", b =>
                {
                    b.HasOne("RevolutionaryWebApp.Server.Models.UserGroup", "Group")
                        .WithOne("ExtraData")
                        .HasForeignKey("RevolutionaryWebApp.Server.Models.UserGroupExtraData", "GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_groups_extra_data_user_groups_group_id");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("UserUserGroup", b =>
                {
                    b.HasOne("RevolutionaryWebApp.Server.Models.UserGroup", null)
                        .WithMany()
                        .HasForeignKey("GroupsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_user_group_user_groups_groups_id");

                    b.HasOne("RevolutionaryWebApp.Server.Models.User", null)
                        .WithMany()
                        .HasForeignKey("MembersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_user_group_users_members_id");
                });

            modelBuilder.Entity("RevolutionaryWebApp.Server.Models.CiBuild", b =>
                {
                    b.Navigation("CiJobs");
                });

            modelBuilder.Entity("RevolutionaryWebApp.Server.Models.CiJob", b =>
                {
                    b.Navigation("CiJobArtifacts");

                    b.Navigation("CiJobOutputSections");
                });

            modelBuilder.Entity("RevolutionaryWebApp.Server.Models.CiProject", b =>
                {
                    b.Navigation("CiBuilds");

                    b.Navigation("CiSecrets");
                });

            modelBuilder.Entity("RevolutionaryWebApp.Server.Models.Cla", b =>
                {
                    b.Navigation("InProgressSignatures");

                    b.Navigation("Signatures");
                });

            modelBuilder.Entity("RevolutionaryWebApp.Server.Models.CrashReport", b =>
                {
                    b.Navigation("Duplicates");
                });

            modelBuilder.Entity("RevolutionaryWebApp.Server.Models.Feed", b =>
                {
                    b.Navigation("DiscordWebhooks");

                    b.Navigation("SeenFeedItems");
                });

            modelBuilder.Entity("RevolutionaryWebApp.Server.Models.LauncherDownloadMirror", b =>
                {
                    b.Navigation("LauncherVersionDownloads");

                    b.Navigation("ThriveVersionDownloads");
                });

            modelBuilder.Entity("RevolutionaryWebApp.Server.Models.LauncherLauncherVersion", b =>
                {
                    b.Navigation("AutoUpdateDownloads");
                });

            modelBuilder.Entity("RevolutionaryWebApp.Server.Models.LauncherThriveVersion", b =>
                {
                    b.Navigation("Platforms");
                });

            modelBuilder.Entity("RevolutionaryWebApp.Server.Models.LauncherThriveVersionPlatform", b =>
                {
                    b.Navigation("Mirrors");
                });

            modelBuilder.Entity("RevolutionaryWebApp.Server.Models.LauncherVersionAutoUpdateChannel", b =>
                {
                    b.Navigation("Mirrors");
                });

            modelBuilder.Entity("RevolutionaryWebApp.Server.Models.LfsProject", b =>
                {
                    b.Navigation("LfsObjects");

                    b.Navigation("ProjectGitFiles");
                });

            modelBuilder.Entity("RevolutionaryWebApp.Server.Models.Meeting", b =>
                {
                    b.Navigation("MeetingMembers");

                    b.Navigation("MeetingPollVotes");

                    b.Navigation("MeetingPollVotingRecords");

                    b.Navigation("MeetingPolls");
                });

            modelBuilder.Entity("RevolutionaryWebApp.Server.Models.MeetingPoll", b =>
                {
                    b.Navigation("Votes");

                    b.Navigation("VotingRecords");
                });

            modelBuilder.Entity("RevolutionaryWebApp.Server.Models.Pages.MediaFolder", b =>
                {
                    b.Navigation("FolderItems");

                    b.Navigation("SubFolders");
                });

            modelBuilder.Entity("RevolutionaryWebApp.Server.Models.Pages.VersionedPage", b =>
                {
                    b.Navigation("EditSuggestions");

                    b.Navigation("PreviousVersions");
                });

            modelBuilder.Entity("RevolutionaryWebApp.Server.Models.PrecompiledObject", b =>
                {
                    b.Navigation("Versions");
                });

            modelBuilder.Entity("RevolutionaryWebApp.Server.Models.Session", b =>
                {
                    b.Navigation("InProgressClaSignature");
                });

            modelBuilder.Entity("RevolutionaryWebApp.Server.Models.StorageFile", b =>
                {
                    b.Navigation("StorageItemVersions");
                });

            modelBuilder.Entity("RevolutionaryWebApp.Server.Models.StorageItem", b =>
                {
                    b.Navigation("Children");

                    b.Navigation("CiJobArtifacts");

                    b.Navigation("DebugSymbols");

                    b.Navigation("DehydratedObjects");

                    b.Navigation("DeleteInfo");

                    b.Navigation("DevBuilds");

                    b.Navigation("OriginalFolderOfDeleted");

                    b.Navigation("PrecompiledObjectVersions");

                    b.Navigation("StorageItemVersions");
                });

            modelBuilder.Entity("RevolutionaryWebApp.Server.Models.User", b =>
                {
                    b.Navigation("AssociationMember");

                    b.Navigation("ChairmanOfMeetings");

                    b.Navigation("ClaSignatures");

                    b.Navigation("CreatedDebugSymbols");

                    b.Navigation("CreatedPageVersions");

                    b.Navigation("CreatedPages");

                    b.Navigation("CreatedPrecompiledObjects");

                    b.Navigation("DeleterOfFile");

                    b.Navigation("DevBuilds");

                    b.Navigation("ExecutedMaintenanceOperations");

                    b.Navigation("LastEditedCrashReportDescriptions");

                    b.Navigation("LastEditedPages");

                    b.Navigation("LastModifiedStorageItems");

                    b.Navigation("LastModifierOfMediaFiles");

                    b.Navigation("LastModifierOfMediaFolders");

                    b.Navigation("LauncherLinks");

                    b.Navigation("ManuallyClosedPolls");

                    b.Navigation("MemberOfMeetings");

                    b.Navigation("OwnerOfMediaFolders");

                    b.Navigation("OwnerOfMeetings");

                    b.Navigation("OwnerOfOriginalFolderOfDeleted");

                    b.Navigation("PageEditSuggestions");

                    b.Navigation("PerformedActions");

                    b.Navigation("PerformedAdminActions");

                    b.Navigation("SecretaryOfMeetings");

                    b.Navigation("SentBulkEmails");

                    b.Navigation("Sessions");

                    b.Navigation("StorageItems");

                    b.Navigation("TargetedByAdminActions");

                    b.Navigation("TargetedInLogs");

                    b.Navigation("UploadedStorageItemVersions");

                    b.Navigation("UploaderOfMediaFiles");

                    b.Navigation("VotedInPollsRecords");
                });

            modelBuilder.Entity("RevolutionaryWebApp.Server.Models.UserGroup", b =>
                {
                    b.Navigation("ExtraData");
                });
#pragma warning restore 612, 618
        }
    }
}
