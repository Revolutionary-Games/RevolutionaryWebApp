// <auto-generated />
using System;
using System.Net;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using RevolutionaryWebApp.Server.Models;

namespace RevolutionaryWebApp.Server.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20210530103958_TweakServerDiskColumns")]
    partial class TweakServerDiskColumns
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:DatabaseTemplate", "template0")
                .HasAnnotation("Relational:Collation", "en_GB.UTF-8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.6")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.HasSequence("dehydrated_objects_hilo")
                .IncrementsBy(10);

            modelBuilder.HasSequence("lfs_objects_hilo")
                .IncrementsBy(10);

            modelBuilder.HasSequence("project_git_files_hilo")
                .IncrementsBy(10);

            modelBuilder.HasSequence("storage_files_hilo")
                .IncrementsBy(10);

            modelBuilder.HasSequence("storage_item_versions_hilo")
                .IncrementsBy(10);

            modelBuilder.HasSequence("storage_items_hilo")
                .IncrementsBy(10);

            modelBuilder.Entity("DehydratedObjectDevBuild", b =>
                {
                    b.Property<long>("DehydratedObjectsId")
                        .HasColumnType("bigint")
                        .HasColumnName("dehydrated_objects_id");

                    b.Property<long>("DevBuildsId")
                        .HasColumnType("bigint")
                        .HasColumnName("dev_builds_id");

                    b.HasKey("DehydratedObjectsId", "DevBuildsId")
                        .HasName("pk_dehydrated_objects_dev_builds");

                    b.HasIndex("DevBuildsId")
                        .HasDatabaseName("ix_dehydrated_objects_dev_builds_dev_builds_id");

                    b.ToTable("dehydrated_objects_dev_builds");
                });

            modelBuilder.Entity("RevolutionaryWebApp.Server.Models.AccessKey", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("HashedKeyCode")
                        .HasColumnType("text")
                        .HasColumnName("hashed_key_code");

                    b.Property<string>("KeyCode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("key_code");

                    b.Property<int>("KeyType")
                        .HasColumnType("integer")
                        .HasColumnName("key_type");

                    b.Property<DateTime?>("LastUsed")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_used");

                    b.Property<IPAddress>("LastUsedFrom")
                        .HasColumnType("inet")
                        .HasColumnName("last_used_from");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_access_keys");

                    b.HasIndex("HashedKeyCode")
                        .IsUnique()
                        .HasDatabaseName("ix_access_keys_hashed_key_code");

                    b.ToTable("access_keys");
                });

            modelBuilder.Entity("RevolutionaryWebApp.Server.Models.ActionLogEntry", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("message");

                    b.Property<long?>("PerformedById")
                        .HasColumnType("bigint")
                        .HasColumnName("performed_by_id");

                    b.HasKey("Id")
                        .HasName("pk_action_log_entries");

                    b.HasIndex("PerformedById")
                        .HasDatabaseName("ix_action_log_entries_performed_by_id");

                    b.ToTable("action_log_entries");
                });

            modelBuilder.Entity("RevolutionaryWebApp.Server.Models.AdminAction", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("message");

                    b.Property<long?>("PerformedById")
                        .HasColumnType("bigint")
                        .HasColumnName("performed_by_id");

                    b.Property<long?>("TargetUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("target_user_id");

                    b.HasKey("Id")
                        .HasName("pk_admin_actions");

                    b.HasIndex("PerformedById")
                        .HasDatabaseName("ix_admin_actions_performed_by_id");

                    b.HasIndex("TargetUserId")
                        .HasDatabaseName("ix_admin_actions_target_user_id");

                    b.ToTable("admin_actions");
                });

            modelBuilder.Entity("RevolutionaryWebApp.Server.Models.CiBuild", b =>
                {
                    b.Property<long>("CiProjectId")
                        .HasColumnType("bigint")
                        .HasColumnName("ci_project_id");

                    b.Property<long>("CiBuildId")
                        .HasColumnType("bigint")
                        .HasColumnName("ci_build_id");

                    b.Property<string>("Branch")
                        .HasColumnType("text")
                        .HasColumnName("branch");

                    b.Property<string>("CommitHash")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("commit_hash");

                    b.Property<string>("CommitMessage")
                        .HasColumnType("text")
                        .HasColumnName("commit_message");

                    b.Property<string>("Commits")
                        .HasColumnType("text")
                        .HasColumnName("commits");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("timezone('utc', now())");

                    b.Property<DateTime?>("FinishedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("finished_at");

                    b.Property<bool>("IsSafe")
                        .HasColumnType("boolean")
                        .HasColumnName("is_safe");

                    b.Property<string>("PreviousCommit")
                        .HasColumnType("text")
                        .HasColumnName("previous_commit");

                    b.Property<string>("RemoteRef")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("remote_ref");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("status");

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("CiProjectId", "CiBuildId")
                        .HasName("pk_ci_builds");

                    b.ToTable("ci_builds");
                });

            modelBuilder.Entity("RevolutionaryWebApp.Server.Models.CiJob", b =>
                {
                    b.Property<long>("CiProjectId")
                        .HasColumnType("bigint")
                        .HasColumnName("ci_project_id");

                    b.Property<long>("CiBuildId")
                        .HasColumnType("bigint")
                        .HasColumnName("ci_build_id");

                    b.Property<long>("CiJobId")
                        .HasColumnType("bigint")
                        .HasColumnName("ci_job_id");

                    b.Property<Guid?>("BuildOutputConnectKey")
                        .HasColumnType("uuid")
                        .HasColumnName("build_output_connect_key");

                    b.Property<string>("CacheSettingsJson")
                        .HasColumnType("text")
                        .HasColumnName("cache_settings_json");

                    b.Property<DateTime?>("FinishedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("finished_at");

                    b.Property<string>("HashedBuildOutputConnectKey")
                        .HasColumnType("text")
                        .HasColumnName("hashed_build_output_connect_key");

                    b.Property<string>("Image")
                        .HasColumnType("text")
                        .HasColumnName("image");

                    b.Property<string>("JobName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("job_name");

                    b.Property<long>("RunningOnServerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(-1L)
                        .HasColumnName("running_on_server_id");

                    b.Property<int>("State")
                        .HasColumnType("integer")
                        .HasColumnName("state");

                    b.Property<bool>("Succeeded")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("succeeded");

                    b.HasKey("CiProjectId", "CiBuildId", "CiJobId")
                        .HasName("pk_ci_jobs");

                    b.HasIndex("HashedBuildOutputConnectKey")
                        .IsUnique()
                        .HasDatabaseName("ix_ci_jobs_hashed_build_output_connect_key");

                    b.ToTable("ci_jobs");
                });

            modelBuilder.Entity("RevolutionaryWebApp.Server.Models.CiJobArtifact", b =>
                {
                    b.Property<long>("CiProjectId")
                        .HasColumnType("bigint")
                        .HasColumnName("ci_project_id");

                    b.Property<long>("CiBuildId")
                        .HasColumnType("bigint")
                        .HasColumnName("ci_build_id");

                    b.Property<long>("CiJobId")
                        .HasColumnType("bigint")
                        .HasColumnName("ci_job_id");

                    b.Property<long>("CiJobArtifactId")
                        .HasColumnType("bigint")
                        .HasColumnName("ci_job_artifact_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<long>("StorageItemId")
                        .HasColumnType("bigint")
                        .HasColumnName("storage_item_id");

                    b.HasKey("CiProjectId", "CiBuildId", "CiJobId", "CiJobArtifactId")
                        .HasName("pk_ci_job_artifacts");

                    b.HasIndex("StorageItemId")
                        .HasDatabaseName("ix_ci_job_artifacts_storage_item_id");

                    b.ToTable("ci_job_artifacts");
                });

            modelBuilder.Entity("RevolutionaryWebApp.Server.Models.CiJobOutputSection", b =>
                {
                    b.Property<long>("CiProjectId")
                        .HasColumnType("bigint")
                        .HasColumnName("ci_project_id");

                    b.Property<long>("CiBuildId")
                        .HasColumnType("bigint")
                        .HasColumnName("ci_build_id");

                    b.Property<long>("CiJobId")
                        .HasColumnType("bigint")
                        .HasColumnName("ci_job_id");

                    b.Property<long>("CiJobOutputSectionId")
                        .HasColumnType("bigint")
                        .HasColumnName("ci_job_output_section_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Output")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("output");

                    b.Property<long>("OutputLength")
                        .HasColumnType("bigint")
                        .HasColumnName("output_length");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.HasKey("CiProjectId", "CiBuildId", "CiJobId", "CiJobOutputSectionId")
                        .HasName("pk_ci_job_output_sections");

                    b.ToTable("ci_job_output_sections");
                });

            modelBuilder.Entity("RevolutionaryWebApp.Server.Models.CiProject", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("DefaultBranch")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("default_branch");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean")
                        .HasColumnName("deleted");

                    b.Property<bool>("Enabled")
                        .HasColumnType("boolean")
                        .HasColumnName("enabled");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("ProjectType")
                        .HasColumnType("integer")
                        .HasColumnName("project_type");

                    b.Property<bool>("Public")
                        .HasColumnType("boolean")
                        .HasColumnName("public");

                    b.Property<string>("RepositoryCloneUrl")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("repository_clone_url");

                    b.Property<string>("RepositoryFullName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("repository_full_name");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_ci_projects");

                    b.ToTable("ci_projects");
                });

            modelBuilder.Entity("RevolutionaryWebApp.Server.Models.CiSecret", b =>
                {
                    b.Property<long>("CiProjectId")
                        .HasColumnType("bigint")
                        .HasColumnName("ci_project_id");

                    b.Property<long>("CiSecretId")
                        .HasColumnType("bigint")
                        .HasColumnName("ci_secret_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("SecretContent")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("secret_content");

                    b.Property<string>("SecretName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("secret_name");

                    b.Property<int>("UsedForBuildTypes")
                        .HasColumnType("integer")
                        .HasColumnName("used_for_build_types");

                    b.HasKey("CiProjectId", "CiSecretId")
                        .HasName("pk_ci_secrets");

                    b.HasIndex("CiProjectId", "SecretName", "UsedForBuildTypes")
                        .IsUnique()
                        .HasDatabaseName("ix_ci_secrets_ci_project_id_secret_name_used_for_build_types");

                    b.ToTable("ci_secrets");
                });

            modelBuilder.Entity("RevolutionaryWebApp.Server.Models.ControlledServer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("AWSInstanceType")
                        .HasColumnType("text")
                        .HasColumnName("aws_instance_type");

                    b.Property<bool>("CleanUpQueued")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("clean_up_queued");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<long>("CreatedVolumeSize")
                        .HasColumnType("bigint")
                        .HasColumnName("created_volume_size");

                    b.Property<string>("CreatedWithImage")
                        .HasColumnType("text")
                        .HasColumnName("created_with_image");

                    b.Property<string>("InstanceId")
                        .HasColumnType("text")
                        .HasColumnName("instance_id");

                    b.Property<DateTime>("LastMaintenance")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_maintenance");

                    b.Property<bool>("ProvisionedFully")
                        .HasColumnType("boolean")
                        .HasColumnName("provisioned_fully");

                    b.Property<IPAddress>("PublicAddress")
                        .HasColumnType("inet")
                        .HasColumnName("public_address");

                    b.Property<int>("ReservationType")
                        .HasColumnType("integer")
                        .HasColumnName("reservation_type");

                    b.Property<long?>("ReservedFor")
                        .HasColumnType("bigint")
                        .HasColumnName("reserved_for");

                    b.Property<DateTime?>("RunningSince")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("running_since");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<DateTime>("StatusLastChecked")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("status_last_checked");

                    b.Property<double>("TotalRuntime")
                        .HasColumnType("double precision")
                        .HasColumnName("total_runtime");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.Property<int>("UsedDiskSpace")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(-1)
                        .HasColumnName("used_disk_space");

                    b.Property<bool>("WantsMaintenance")
                        .HasColumnType("boolean")
                        .HasColumnName("wants_maintenance");

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id")
                        .HasName("pk_controlled_servers");

                    b.ToTable("controlled_servers");
                });

            modelBuilder.Entity("RevolutionaryWebApp.Server.Models.DehydratedObject", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:HiLoSequenceName", "dehydrated_objects_hilo")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SequenceHiLo);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Sha3")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("sha3");

                    b.Property<long>("StorageItemId")
                        .HasColumnType("bigint")
                        .HasColumnName("storage_item_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_dehydrated_objects");

                    b.HasIndex("Sha3")
                        .IsUnique()
                        .HasDatabaseName("ix_dehydrated_objects_sha3");

                    b.HasIndex("StorageItemId")
                        .HasDatabaseName("ix_dehydrated_objects_storage_item_id");

                    b.ToTable("dehydrated_objects");
                });

            modelBuilder.Entity("RevolutionaryWebApp.Server.Models.DevBuild", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("Anonymous")
                        .HasColumnType("boolean")
                        .HasColumnName("anonymous");

                    b.Property<string>("Branch")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("branch");

                    b.Property<string>("BuildHash")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("build_hash");

                    b.Property<bool>("BuildOfTheDay")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("build_of_the_day");

                    b.Property<string>("BuildZipHash")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("build_zip_hash");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int>("Downloads")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("downloads");

                    b.Property<bool>("Important")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("important");

                    b.Property<bool>("Keep")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("keep");

                    b.Property<string>("Platform")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("platform");

                    b.Property<bool>("PrFetched")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("pr_fetched");

                    b.Property<string>("PrUrl")
                        .HasColumnType("text")
                        .HasColumnName("pr_url");

                    b.Property<int>("Score")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("score");

                    b.Property<long>("StorageItemId")
                        .HasColumnType("bigint")
                        .HasColumnName("storage_item_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.Property<bool>("Verified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("verified");

                    b.Property<long?>("VerifiedById")
                        .HasColumnType("bigint")
                        .HasColumnName("verified_by_id");

                    b.HasKey("Id")
                        .HasName("pk_dev_builds");

                    b.HasIndex("Anonymous")
                        .HasDatabaseName("ix_dev_builds_anonymous");

                    b.HasIndex("Branch")
                        .HasDatabaseName("ix_dev_builds_branch");

                    b.HasIndex("Platform")
                        .HasDatabaseName("ix_dev_builds_platform");

                    b.HasIndex("StorageItemId")
                        .HasDatabaseName("ix_dev_builds_storage_item_id");

                    b.HasIndex("VerifiedById")
                        .HasDatabaseName("ix_dev_builds_verified_by_id");

                    b.HasIndex("BuildHash", "Platform")
                        .IsUnique()
                        .HasDatabaseName("ix_dev_builds_build_hash_platform");

                    b.ToTable("dev_builds");
                });

            modelBuilder.Entity("RevolutionaryWebApp.Server.Models.GithubWebhook", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("HashedSecret")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("hashed_secret");

                    b.Property<DateTime?>("LastUsed")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_used");

                    b.Property<string>("Secret")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("secret");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_github_webhooks");

                    b.ToTable("github_webhooks");
                });

            modelBuilder.Entity("RevolutionaryWebApp.Server.Models.LauncherLink", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("HashedLinkCode")
                        .HasColumnType("text")
                        .HasColumnName("hashed_link_code");

                    b.Property<DateTime?>("LastConnection")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_connection");

                    b.Property<string>("LastIp")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("last_ip");

                    b.Property<string>("LinkCode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("link_code");

                    b.Property<int>("TotalApiCalls")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("total_api_calls");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_launcher_links");

                    b.HasIndex("HashedLinkCode")
                        .IsUnique()
                        .HasDatabaseName("ix_launcher_links_hashed_link_code");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_launcher_links_user_id");

                    b.ToTable("launcher_links");
                });

            modelBuilder.Entity("RevolutionaryWebApp.Server.Models.LfsObject", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:HiLoSequenceName", "lfs_objects_hilo")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SequenceHiLo);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("LfsOid")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("lfs_oid");

                    b.Property<long>("LfsProjectId")
                        .HasColumnType("bigint")
                        .HasColumnName("lfs_project_id");

                    b.Property<long>("Size")
                        .HasColumnType("bigint")
                        .HasColumnName("size");

                    b.Property<string>("StoragePath")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("storage_path");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_lfs_objects");

                    b.HasIndex("LfsProjectId", "LfsOid")
                        .IsUnique()
                        .HasDatabaseName("ix_lfs_objects_lfs_project_id_lfs_oid");

                    b.ToTable("lfs_objects");
                });

            modelBuilder.Entity("RevolutionaryWebApp.Server.Models.LfsProject", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("CloneUrl")
                        .HasColumnType("text")
                        .HasColumnName("clone_url");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("deleted");

                    b.Property<string>("FileTreeCommit")
                        .HasColumnType("text")
                        .HasColumnName("file_tree_commit");

                    b.Property<DateTime?>("FileTreeUpdated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("file_tree_updated");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<bool>("Public")
                        .HasColumnType("boolean")
                        .HasColumnName("public");

                    b.Property<string>("RepoUrl")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("repo_url");

                    b.Property<string>("Slug")
                        .HasColumnType("text")
                        .HasColumnName("slug");

                    b.Property<int?>("TotalObjectCount")
                        .HasColumnType("integer")
                        .HasColumnName("total_object_count");

                    b.Property<int?>("TotalObjectSize")
                        .HasColumnType("integer")
                        .HasColumnName("total_object_size");

                    b.Property<DateTime?>("TotalSizeUpdated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("total_size_updated");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_lfs_projects");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_lfs_projects_name");

                    b.HasIndex("Slug")
                        .IsUnique()
                        .HasDatabaseName("ix_lfs_projects_slug");

                    b.ToTable("lfs_projects");
                });

            modelBuilder.Entity("RevolutionaryWebApp.Server.Models.LogEntry", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("message");

                    b.Property<long?>("TargetUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("target_user_id");

                    b.HasKey("Id")
                        .HasName("pk_log_entries");

                    b.HasIndex("TargetUserId")
                        .HasDatabaseName("ix_log_entries_target_user_id");

                    b.ToTable("log_entries");
                });

            modelBuilder.Entity("RevolutionaryWebApp.Server.Models.PatreonSettings", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("active");

                    b.Property<string>("CampaignId")
                        .HasColumnType("text")
                        .HasColumnName("campaign_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatorRefreshToken")
                        .HasColumnType("text")
                        .HasColumnName("creator_refresh_token");

                    b.Property<string>("CreatorToken")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("creator_token");

                    b.Property<string>("DevbuildsRewardId")
                        .HasColumnType("text")
                        .HasColumnName("devbuilds_reward_id");

                    b.Property<DateTime?>("LastRefreshed")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_refreshed");

                    b.Property<DateTime?>("LastWebhook")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_webhook");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("VipRewardId")
                        .HasColumnType("text")
                        .HasColumnName("vip_reward_id");

                    b.Property<string>("WebhookId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("webhook_id");

                    b.Property<string>("WebhookSecret")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("webhook_secret");

                    b.HasKey("Id")
                        .HasName("pk_patreon_settings");

                    b.HasIndex("WebhookId")
                        .IsUnique()
                        .HasDatabaseName("ix_patreon_settings_webhook_id");

                    b.ToTable("patreon_settings");
                });

            modelBuilder.Entity("RevolutionaryWebApp.Server.Models.Patron", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("EmailAlias")
                        .HasColumnType("text")
                        .HasColumnName("email_alias");

                    b.Property<bool?>("HasForumAccount")
                        .HasColumnType("boolean")
                        .HasColumnName("has_forum_account");

                    b.Property<bool?>("Marked")
                        .HasColumnType("boolean")
                        .HasColumnName("marked");

                    b.Property<string>("PatreonRefreshToken")
                        .HasColumnType("text")
                        .HasColumnName("patreon_refresh_token");

                    b.Property<string>("PatreonToken")
                        .HasColumnType("text")
                        .HasColumnName("patreon_token");

                    b.Property<int>("PledgeAmountCents")
                        .HasColumnType("integer")
                        .HasColumnName("pledge_amount_cents");

                    b.Property<string>("RewardId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("reward_id");

                    b.Property<bool?>("Suspended")
                        .HasColumnType("boolean")
                        .HasColumnName("suspended");

                    b.Property<string>("SuspendedReason")
                        .HasColumnType("text")
                        .HasColumnName("suspended_reason");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("username");

                    b.HasKey("Id")
                        .HasName("pk_patrons");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("ix_patrons_email");

                    b.HasIndex("EmailAlias")
                        .IsUnique()
                        .HasDatabaseName("ix_patrons_email_alias");

                    b.ToTable("patrons");
                });

            modelBuilder.Entity("RevolutionaryWebApp.Server.Models.ProjectGitFile", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:HiLoSequenceName", "project_git_files_hilo")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SequenceHiLo);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Ftype")
                        .HasColumnType("text")
                        .HasColumnName("ftype");

                    b.Property<string>("LfsOid")
                        .HasColumnType("text")
                        .HasColumnName("lfs_oid");

                    b.Property<long>("LfsProjectId")
                        .HasColumnType("bigint")
                        .HasColumnName("lfs_project_id");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Path")
                        .HasColumnType("text")
                        .HasColumnName("path");

                    b.Property<int?>("Size")
                        .HasColumnType("integer")
                        .HasColumnName("size");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_project_git_files");

                    b.HasIndex("LfsProjectId", "Name", "Path")
                        .IsUnique()
                        .HasDatabaseName("ix_project_git_files_lfs_project_id_name_path");

                    b.ToTable("project_git_files");
                });

            modelBuilder.Entity("RevolutionaryWebApp.Server.Models.RedeemableCode", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("timezone('utc', now())");

                    b.Property<string>("GrantedResource")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("granted_resource");

                    b.Property<string>("HashedId")
                        .HasColumnType("text")
                        .HasColumnName("hashed_id");

                    b.Property<bool>("MultiUse")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("multi_use");

                    b.Property<int>("Uses")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("uses");

                    b.HasKey("Id")
                        .HasName("pk_redeemable_codes");

                    b.HasIndex("HashedId")
                        .IsUnique()
                        .HasDatabaseName("ix_redeemable_codes_hashed_id");

                    b.ToTable("redeemable_codes");
                });

            modelBuilder.Entity("RevolutionaryWebApp.Server.Models.Session", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("HashedId")
                        .HasColumnType("text")
                        .HasColumnName("hashed_id");

                    b.Property<DateTime>("LastUsed")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_used");

                    b.Property<IPAddress>("LastUsedFrom")
                        .HasColumnType("inet")
                        .HasColumnName("last_used_from");

                    b.Property<long>("SessionVersion")
                        .HasColumnType("bigint")
                        .HasColumnName("session_version");

                    b.Property<string>("SsoNonce")
                        .HasColumnType("text")
                        .HasColumnName("sso_nonce");

                    b.Property<string>("SsoReturnUrl")
                        .HasColumnType("text")
                        .HasColumnName("sso_return_url");

                    b.Property<DateTime?>("SsoStartTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("sso_start_time");

                    b.Property<string>("StartedSsoLogin")
                        .HasColumnType("text")
                        .HasColumnName("started_sso_login");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_sessions");

                    b.HasIndex("HashedId")
                        .IsUnique()
                        .HasDatabaseName("ix_sessions_hashed_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_sessions_user_id");

                    b.ToTable("sessions");
                });

            modelBuilder.Entity("RevolutionaryWebApp.Server.Models.StorageFile", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:HiLoSequenceName", "storage_files_hilo")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SequenceHiLo);

                    b.Property<bool>("AllowParentless")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("allow_parentless");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<long?>("Size")
                        .HasColumnType("bigint")
                        .HasColumnName("size");

                    b.Property<string>("StoragePath")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("storage_path");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.Property<DateTime?>("UploadExpires")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("upload_expires");

                    b.Property<bool>("Uploading")
                        .HasColumnType("boolean")
                        .HasColumnName("uploading");

                    b.HasKey("Id")
                        .HasName("pk_storage_files");

                    b.HasIndex("StoragePath")
                        .IsUnique()
                        .HasDatabaseName("ix_storage_files_storage_path");

                    b.HasIndex("Uploading")
                        .HasDatabaseName("ix_storage_files_uploading");

                    b.ToTable("storage_files");
                });

            modelBuilder.Entity("RevolutionaryWebApp.Server.Models.StorageItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:HiLoSequenceName", "storage_items_hilo")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SequenceHiLo);

                    b.Property<bool>("AllowParentless")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("allow_parentless");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("Ftype")
                        .HasColumnType("integer")
                        .HasColumnName("ftype");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<long?>("OwnerId")
                        .HasColumnType("bigint")
                        .HasColumnName("owner_id");

                    b.Property<long?>("ParentId")
                        .HasColumnType("bigint")
                        .HasColumnName("parent_id");

                    b.Property<int>("ReadAccess")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(2)
                        .HasColumnName("read_access");

                    b.Property<long?>("Size")
                        .HasColumnType("bigint")
                        .HasColumnName("size");

                    b.Property<bool>("Special")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("special");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.Property<int>("WriteAccess")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(2)
                        .HasColumnName("write_access");

                    b.HasKey("Id")
                        .HasName("pk_storage_items");

                    b.HasIndex("AllowParentless")
                        .HasDatabaseName("ix_storage_items_allow_parentless");

                    b.HasIndex("OwnerId")
                        .HasDatabaseName("ix_storage_items_owner_id");

                    b.HasIndex("ParentId")
                        .HasDatabaseName("ix_storage_items_parent_id");

                    b.HasIndex("Name", "ParentId")
                        .IsUnique()
                        .HasDatabaseName("ix_storage_items_name_parent_id");

                    b.HasIndex(new[] { "Name" }, "index_storage_items_on_name")
                        .IsUnique()
                        .HasDatabaseName("ix_storage_items_name")
                        .HasFilter("(parent_id IS NULL)");

                    b.ToTable("storage_items");
                });

            modelBuilder.Entity("RevolutionaryWebApp.Server.Models.StorageItemVersion", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:HiLoSequenceName", "storage_item_versions_hilo")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SequenceHiLo);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<bool>("Keep")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("keep");

                    b.Property<bool>("Protected")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("protected");

                    b.Property<long>("StorageFileId")
                        .HasColumnType("bigint")
                        .HasColumnName("storage_file_id");

                    b.Property<long>("StorageItemId")
                        .HasColumnType("bigint")
                        .HasColumnName("storage_item_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.Property<bool>("Uploading")
                        .HasColumnType("boolean")
                        .HasColumnName("uploading");

                    b.Property<int>("Version")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1)
                        .HasColumnName("version");

                    b.HasKey("Id")
                        .HasName("pk_storage_item_versions");

                    b.HasIndex("StorageFileId")
                        .HasDatabaseName("ix_storage_item_versions_storage_file_id");

                    b.HasIndex("StorageItemId", "Version")
                        .IsUnique()
                        .HasDatabaseName("ix_storage_item_versions_storage_item_id_version");

                    b.ToTable("storage_item_versions");
                });

            modelBuilder.Entity("RevolutionaryWebApp.Server.Models.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer")
                        .HasColumnName("access_failed_count");

                    b.Property<bool?>("Admin")
                        .HasColumnType("boolean")
                        .HasColumnName("admin");

                    b.Property<string>("ApiToken")
                        .HasColumnType("text")
                        .HasColumnName("api_token");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("text")
                        .HasColumnName("concurrency_stamp");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<bool?>("Developer")
                        .HasColumnType("boolean")
                        .HasColumnName("developer");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("email_confirmed");

                    b.Property<string>("HashedApiToken")
                        .HasColumnType("text")
                        .HasColumnName("hashed_api_token");

                    b.Property<string>("HashedLauncherLinkCode")
                        .HasColumnType("text")
                        .HasColumnName("hashed_launcher_link_code");

                    b.Property<string>("HashedLfsToken")
                        .HasColumnType("text")
                        .HasColumnName("hashed_lfs_token");

                    b.Property<DateTime?>("LauncherCodeExpires")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("launcher_code_expires");

                    b.Property<string>("LauncherLinkCode")
                        .HasColumnType("text")
                        .HasColumnName("launcher_link_code");

                    b.Property<string>("LfsToken")
                        .HasColumnType("text")
                        .HasColumnName("lfs_token");

                    b.Property<bool>("Local")
                        .HasColumnType("boolean")
                        .HasColumnName("local");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("lockout_enabled");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("lockout_end");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("text")
                        .HasColumnName("normalized_email");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("text")
                        .HasColumnName("normalized_user_name");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text")
                        .HasColumnName("phone_number");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("phone_number_confirmed");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text")
                        .HasColumnName("security_stamp");

                    b.Property<int>("SessionVersion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1)
                        .HasColumnName("session_version");

                    b.Property<string>("SsoSource")
                        .HasColumnType("text")
                        .HasColumnName("sso_source");

                    b.Property<bool?>("Suspended")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("suspended");

                    b.Property<bool?>("SuspendedManually")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("suspended_manually");

                    b.Property<string>("SuspendedReason")
                        .HasColumnType("text")
                        .HasColumnName("suspended_reason");

                    b.Property<int>("TotalLauncherLinks")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("total_launcher_links");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("two_factor_enabled");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UserName")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("ix_users_email");

                    b.HasIndex("HashedApiToken")
                        .IsUnique()
                        .HasDatabaseName("ix_users_hashed_api_token");

                    b.HasIndex("HashedLauncherLinkCode")
                        .IsUnique()
                        .HasDatabaseName("ix_users_hashed_launcher_link_code");

                    b.HasIndex("HashedLfsToken")
                        .IsUnique()
                        .HasDatabaseName("ix_users_hashed_lfs_token");

                    b.ToTable("users");
                });

            modelBuilder.Entity("DehydratedObjectDevBuild", b =>
                {
                    b.HasOne("RevolutionaryWebApp.Server.Models.DehydratedObject", null)
                        .WithMany()
                        .HasForeignKey("DehydratedObjectsId")
                        .HasConstraintName("fk_dehydrated_objects_dev_builds_dehydrated_objects_dehydrated")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RevolutionaryWebApp.Server.Models.DevBuild", null)
                        .WithMany()
                        .HasForeignKey("DevBuildsId")
                        .HasConstraintName("fk_dehydrated_objects_dev_builds_dev_builds_dev_builds_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RevolutionaryWebApp.Server.Models.ActionLogEntry", b =>
                {
                    b.HasOne("RevolutionaryWebApp.Server.Models.User", "PerformedBy")
                        .WithMany("PerformedActions")
                        .HasForeignKey("PerformedById")
                        .HasConstraintName("fk_action_log_entries_users_performed_by_id")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("PerformedBy");
                });

            modelBuilder.Entity("RevolutionaryWebApp.Server.Models.AdminAction", b =>
                {
                    b.HasOne("RevolutionaryWebApp.Server.Models.User", "PerformedBy")
                        .WithMany("PerformedAdminActions")
                        .HasForeignKey("PerformedById")
                        .HasConstraintName("fk_admin_actions_users_performed_by_id")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("RevolutionaryWebApp.Server.Models.User", "TargetUser")
                        .WithMany("TargetedByAdminActions")
                        .HasForeignKey("TargetUserId")
                        .HasConstraintName("fk_admin_actions_users_target_user_id")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("PerformedBy");

                    b.Navigation("TargetUser");
                });

            modelBuilder.Entity("RevolutionaryWebApp.Server.Models.CiBuild", b =>
                {
                    b.HasOne("RevolutionaryWebApp.Server.Models.CiProject", "CiProject")
                        .WithMany("CiBuilds")
                        .HasForeignKey("CiProjectId")
                        .HasConstraintName("fk_ci_builds_ci_projects_ci_project_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CiProject");
                });

            modelBuilder.Entity("RevolutionaryWebApp.Server.Models.CiJob", b =>
                {
                    b.HasOne("RevolutionaryWebApp.Server.Models.CiBuild", "Build")
                        .WithMany("CiJobs")
                        .HasForeignKey("CiProjectId", "CiBuildId")
                        .HasConstraintName("fk_ci_jobs_ci_builds_ci_project_id_ci_build_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Build");
                });

            modelBuilder.Entity("RevolutionaryWebApp.Server.Models.CiJobArtifact", b =>
                {
                    b.HasOne("RevolutionaryWebApp.Server.Models.StorageItem", "StorageItem")
                        .WithMany("CiJobArtifacts")
                        .HasForeignKey("StorageItemId")
                        .HasConstraintName("fk_ci_job_artifacts_storage_items_storage_item_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RevolutionaryWebApp.Server.Models.CiJob", "Job")
                        .WithMany("CiJobArtifacts")
                        .HasForeignKey("CiProjectId", "CiBuildId", "CiJobId")
                        .HasConstraintName("fk_ci_job_artifacts_ci_jobs_ci_project_id_ci_build_id_ci_job_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Job");

                    b.Navigation("StorageItem");
                });

            modelBuilder.Entity("RevolutionaryWebApp.Server.Models.CiJobOutputSection", b =>
                {
                    b.HasOne("RevolutionaryWebApp.Server.Models.CiJob", "Job")
                        .WithMany("CiJobOutputSections")
                        .HasForeignKey("CiProjectId", "CiBuildId", "CiJobId")
                        .HasConstraintName("fk_ci_job_output_sections_ci_jobs_ci_project_id_ci_build_id_ci")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Job");
                });

            modelBuilder.Entity("RevolutionaryWebApp.Server.Models.CiSecret", b =>
                {
                    b.HasOne("RevolutionaryWebApp.Server.Models.CiProject", "CiProject")
                        .WithMany("CiSecrets")
                        .HasForeignKey("CiProjectId")
                        .HasConstraintName("fk_ci_secrets_ci_projects_ci_project_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CiProject");
                });

            modelBuilder.Entity("RevolutionaryWebApp.Server.Models.DehydratedObject", b =>
                {
                    b.HasOne("RevolutionaryWebApp.Server.Models.StorageItem", "StorageItem")
                        .WithMany("DehydratedObjects")
                        .HasForeignKey("StorageItemId")
                        .HasConstraintName("fk_dehydrated_objects_storage_items_storage_item_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("StorageItem");
                });

            modelBuilder.Entity("RevolutionaryWebApp.Server.Models.DevBuild", b =>
                {
                    b.HasOne("RevolutionaryWebApp.Server.Models.StorageItem", "StorageItem")
                        .WithMany("DevBuilds")
                        .HasForeignKey("StorageItemId")
                        .HasConstraintName("fk_dev_builds_storage_items_storage_item_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RevolutionaryWebApp.Server.Models.User", "VerifiedBy")
                        .WithMany("DevBuilds")
                        .HasForeignKey("VerifiedById")
                        .HasConstraintName("fk_dev_builds_users_verified_by_id")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("StorageItem");

                    b.Navigation("VerifiedBy");
                });

            modelBuilder.Entity("RevolutionaryWebApp.Server.Models.LauncherLink", b =>
                {
                    b.HasOne("RevolutionaryWebApp.Server.Models.User", "User")
                        .WithMany("LauncherLinks")
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_launcher_links_users_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("RevolutionaryWebApp.Server.Models.LfsObject", b =>
                {
                    b.HasOne("RevolutionaryWebApp.Server.Models.LfsProject", "LfsProject")
                        .WithMany("LfsObjects")
                        .HasForeignKey("LfsProjectId")
                        .HasConstraintName("fk_lfs_objects_lfs_projects_lfs_project_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LfsProject");
                });

            modelBuilder.Entity("RevolutionaryWebApp.Server.Models.LogEntry", b =>
                {
                    b.HasOne("RevolutionaryWebApp.Server.Models.User", "TargetUser")
                        .WithMany("TargetedInLogs")
                        .HasForeignKey("TargetUserId")
                        .HasConstraintName("fk_log_entries_users_target_user_id")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("TargetUser");
                });

            modelBuilder.Entity("RevolutionaryWebApp.Server.Models.ProjectGitFile", b =>
                {
                    b.HasOne("RevolutionaryWebApp.Server.Models.LfsProject", "LfsProject")
                        .WithMany("ProjectGitFiles")
                        .HasForeignKey("LfsProjectId")
                        .HasConstraintName("fk_project_git_files_lfs_projects_lfs_project_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LfsProject");
                });

            modelBuilder.Entity("RevolutionaryWebApp.Server.Models.Session", b =>
                {
                    b.HasOne("RevolutionaryWebApp.Server.Models.User", "User")
                        .WithMany("Sessions")
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_sessions_users_user_id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("User");
                });

            modelBuilder.Entity("RevolutionaryWebApp.Server.Models.StorageItem", b =>
                {
                    b.HasOne("RevolutionaryWebApp.Server.Models.User", "Owner")
                        .WithMany("StorageItems")
                        .HasForeignKey("OwnerId")
                        .HasConstraintName("fk_storage_items_users_owner_id")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("RevolutionaryWebApp.Server.Models.StorageItem", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .HasConstraintName("fk_storage_items_storage_items_parent_id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Owner");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("RevolutionaryWebApp.Server.Models.StorageItemVersion", b =>
                {
                    b.HasOne("RevolutionaryWebApp.Server.Models.StorageFile", "StorageFile")
                        .WithMany("StorageItemVersions")
                        .HasForeignKey("StorageFileId")
                        .HasConstraintName("fk_storage_item_versions_storage_files_storage_file_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RevolutionaryWebApp.Server.Models.StorageItem", "StorageItem")
                        .WithMany("StorageItemVersions")
                        .HasForeignKey("StorageItemId")
                        .HasConstraintName("fk_storage_item_versions_storage_items_storage_item_id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("StorageFile");

                    b.Navigation("StorageItem");
                });

            modelBuilder.Entity("RevolutionaryWebApp.Server.Models.CiBuild", b =>
                {
                    b.Navigation("CiJobs");
                });

            modelBuilder.Entity("RevolutionaryWebApp.Server.Models.CiJob", b =>
                {
                    b.Navigation("CiJobArtifacts");

                    b.Navigation("CiJobOutputSections");
                });

            modelBuilder.Entity("RevolutionaryWebApp.Server.Models.CiProject", b =>
                {
                    b.Navigation("CiBuilds");

                    b.Navigation("CiSecrets");
                });

            modelBuilder.Entity("RevolutionaryWebApp.Server.Models.LfsProject", b =>
                {
                    b.Navigation("LfsObjects");

                    b.Navigation("ProjectGitFiles");
                });

            modelBuilder.Entity("RevolutionaryWebApp.Server.Models.StorageFile", b =>
                {
                    b.Navigation("StorageItemVersions");
                });

            modelBuilder.Entity("RevolutionaryWebApp.Server.Models.StorageItem", b =>
                {
                    b.Navigation("Children");

                    b.Navigation("CiJobArtifacts");

                    b.Navigation("DehydratedObjects");

                    b.Navigation("DevBuilds");

                    b.Navigation("StorageItemVersions");
                });

            modelBuilder.Entity("RevolutionaryWebApp.Server.Models.User", b =>
                {
                    b.Navigation("DevBuilds");

                    b.Navigation("LauncherLinks");

                    b.Navigation("PerformedActions");

                    b.Navigation("PerformedAdminActions");

                    b.Navigation("Sessions");

                    b.Navigation("StorageItems");

                    b.Navigation("TargetedByAdminActions");

                    b.Navigation("TargetedInLogs");
                });
#pragma warning restore 612, 618
        }
    }
}
