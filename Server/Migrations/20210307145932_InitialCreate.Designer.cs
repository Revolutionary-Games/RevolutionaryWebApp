// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ThriveDevCenter.Server.Models;

namespace ThriveDevCenter.Server.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20210307145932_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:Collation", "en_GB.UTF-8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.3")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.HasSequence("EntityFrameworkHiLoSequence")
                .IncrementsBy(10);

            modelBuilder.Entity("DehydratedObjectDevBuild", b =>
                {
                    b.Property<long>("DehydratedObjectsId")
                        .HasColumnType("bigint")
                        .HasColumnName("dehydrated_objects_id");

                    b.Property<long>("DevBuildsId")
                        .HasColumnType("bigint")
                        .HasColumnName("dev_builds_id");

                    b.HasKey("DehydratedObjectsId", "DevBuildsId")
                        .HasName("pk_dehydrated_objects_dev_builds");

                    b.HasIndex("DevBuildsId")
                        .HasDatabaseName("ix_dehydrated_objects_dev_builds_dev_builds_id");

                    b.ToTable("dehydrated_objects_dev_builds");
                });

            modelBuilder.Entity("ThriveDevCenter.Server.Models.AccessKey", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("KeyCode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("key_code");

                    b.Property<int>("KeyType")
                        .HasColumnType("integer")
                        .HasColumnName("key_type");

                    b.Property<DateTime>("LastUsed")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_used");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_access_keys");

                    b.HasIndex("KeyCode")
                        .IsUnique()
                        .HasDatabaseName("ix_access_keys_key_code");

                    b.ToTable("access_keys");
                });

            modelBuilder.Entity("ThriveDevCenter.Server.Models.DehydratedObject", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:HiLoSequenceName", "EntityFrameworkHiLoSequence")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SequenceHiLo);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Sha3")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("sha3");

                    b.Property<long>("StorageItemId")
                        .HasColumnType("bigint")
                        .HasColumnName("storage_item_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_dehydrated_objects");

                    b.HasIndex("Sha3")
                        .IsUnique()
                        .HasDatabaseName("ix_dehydrated_objects_sha3");

                    b.HasIndex("StorageItemId")
                        .HasDatabaseName("ix_dehydrated_objects_storage_item_id");

                    b.ToTable("dehydrated_objects");
                });

            modelBuilder.Entity("ThriveDevCenter.Server.Models.DevBuild", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("Anonymous")
                        .HasColumnType("boolean")
                        .HasColumnName("anonymous");

                    b.Property<string>("Branch")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("branch");

                    b.Property<string>("BuildHash")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("build_hash");

                    b.Property<bool>("BuildOfTheDay")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("build_of_the_day");

                    b.Property<string>("BuildZipHash")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("build_zip_hash");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int>("Downloads")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("downloads");

                    b.Property<bool>("Important")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("important");

                    b.Property<bool>("Keep")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("keep");

                    b.Property<string>("Platform")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("platform");

                    b.Property<bool>("PrFetched")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("pr_fetched");

                    b.Property<string>("PrUrl")
                        .HasColumnType("text")
                        .HasColumnName("pr_url");

                    b.Property<int>("Score")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("score");

                    b.Property<long>("StorageItemId")
                        .HasColumnType("bigint")
                        .HasColumnName("storage_item_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.Property<bool>("Verified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("verified");

                    b.Property<long?>("VerifiedById")
                        .HasColumnType("bigint")
                        .HasColumnName("verified_by_id");

                    b.HasKey("Id")
                        .HasName("pk_dev_builds");

                    b.HasIndex("Anonymous")
                        .HasDatabaseName("ix_dev_builds_anonymous");

                    b.HasIndex("StorageItemId")
                        .HasDatabaseName("ix_dev_builds_storage_item_id");

                    b.HasIndex("VerifiedById")
                        .HasDatabaseName("ix_dev_builds_verified_by_id");

                    b.HasIndex("BuildHash", "Platform")
                        .IsUnique()
                        .HasDatabaseName("ix_dev_builds_build_hash_platform");

                    b.ToTable("dev_builds");
                });

            modelBuilder.Entity("ThriveDevCenter.Server.Models.LauncherLink", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("LastConnection")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_connection");

                    b.Property<string>("LastIp")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("last_ip");

                    b.Property<string>("LinkCode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("link_code");

                    b.Property<int>("TotalApiCalls")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("total_api_calls");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_launcher_links");

                    b.HasIndex("LinkCode")
                        .IsUnique()
                        .HasDatabaseName("ix_launcher_links_link_code");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_launcher_links_user_id");

                    b.ToTable("launcher_links");
                });

            modelBuilder.Entity("ThriveDevCenter.Server.Models.LfsObject", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:HiLoSequenceName", "EntityFrameworkHiLoSequence")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SequenceHiLo);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("LfsOid")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("lfs_oid");

                    b.Property<long>("LfsProjectId")
                        .HasColumnType("bigint")
                        .HasColumnName("lfs_project_id");

                    b.Property<int>("Size")
                        .HasColumnType("integer")
                        .HasColumnName("size");

                    b.Property<string>("StoragePath")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("storage_path");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_lfs_objects");

                    b.HasIndex("LfsProjectId", "LfsOid")
                        .IsUnique()
                        .HasDatabaseName("ix_lfs_objects_lfs_project_id_lfs_oid");

                    b.ToTable("lfs_objects");
                });

            modelBuilder.Entity("ThriveDevCenter.Server.Models.LfsProject", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("CloneUrl")
                        .HasColumnType("text")
                        .HasColumnName("clone_url");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("FileTreeCommit")
                        .HasColumnType("text")
                        .HasColumnName("file_tree_commit");

                    b.Property<DateTime?>("FileTreeUpdated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("file_tree_updated");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<bool>("Public")
                        .HasColumnType("boolean")
                        .HasColumnName("public");

                    b.Property<string>("RepoUrl")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("repo_url");

                    b.Property<string>("Slug")
                        .HasColumnType("text")
                        .HasColumnName("slug");

                    b.Property<int?>("TotalObjectCount")
                        .HasColumnType("integer")
                        .HasColumnName("total_object_count");

                    b.Property<int?>("TotalObjectSize")
                        .HasColumnType("integer")
                        .HasColumnName("total_object_size");

                    b.Property<DateTime?>("TotalSizeUpdated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("total_size_updated");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_lfs_projects");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_lfs_projects_name");

                    b.HasIndex("Slug")
                        .IsUnique()
                        .HasDatabaseName("ix_lfs_projects_slug");

                    b.ToTable("lfs_projects");
                });

            modelBuilder.Entity("ThriveDevCenter.Server.Models.PatreonSettings", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("active");

                    b.Property<string>("CampaignId")
                        .HasColumnType("text")
                        .HasColumnName("campaign_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatorRefreshToken")
                        .HasColumnType("text")
                        .HasColumnName("creator_refresh_token");

                    b.Property<string>("CreatorToken")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("creator_token");

                    b.Property<string>("DevbuildsRewardId")
                        .HasColumnType("text")
                        .HasColumnName("devbuilds_reward_id");

                    b.Property<DateTime?>("LastRefreshed")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_refreshed");

                    b.Property<DateTime?>("LastWebhook")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_webhook");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("VipRewardId")
                        .HasColumnType("text")
                        .HasColumnName("vip_reward_id");

                    b.Property<string>("WebhookId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("webhook_id");

                    b.Property<string>("WebhookSecret")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("webhook_secret");

                    b.HasKey("Id")
                        .HasName("pk_patreon_settings");

                    b.HasIndex("WebhookId")
                        .IsUnique()
                        .HasDatabaseName("ix_patreon_settings_webhook_id");

                    b.ToTable("patreon_settings");
                });

            modelBuilder.Entity("ThriveDevCenter.Server.Models.Patron", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("EmailAlias")
                        .HasColumnType("text")
                        .HasColumnName("email_alias");

                    b.Property<bool?>("HasForumAccount")
                        .HasColumnType("boolean")
                        .HasColumnName("has_forum_account");

                    b.Property<bool?>("Marked")
                        .HasColumnType("boolean")
                        .HasColumnName("marked");

                    b.Property<string>("PatreonRefreshToken")
                        .HasColumnType("text")
                        .HasColumnName("patreon_refresh_token");

                    b.Property<string>("PatreonToken")
                        .HasColumnType("text")
                        .HasColumnName("patreon_token");

                    b.Property<int>("PledgeAmountCents")
                        .HasColumnType("integer")
                        .HasColumnName("pledge_amount_cents");

                    b.Property<string>("RewardId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("reward_id");

                    b.Property<bool?>("Suspended")
                        .HasColumnType("boolean")
                        .HasColumnName("suspended");

                    b.Property<string>("SuspendedReason")
                        .HasColumnType("text")
                        .HasColumnName("suspended_reason");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("username");

                    b.HasKey("Id")
                        .HasName("pk_patrons");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("ix_patrons_email");

                    b.HasIndex("EmailAlias")
                        .IsUnique()
                        .HasDatabaseName("ix_patrons_email_alias");

                    b.ToTable("patrons");
                });

            modelBuilder.Entity("ThriveDevCenter.Server.Models.ProjectGitFile", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:HiLoSequenceName", "EntityFrameworkHiLoSequence")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SequenceHiLo);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Ftype")
                        .HasColumnType("text")
                        .HasColumnName("ftype");

                    b.Property<string>("LfsOid")
                        .HasColumnType("text")
                        .HasColumnName("lfs_oid");

                    b.Property<long>("LfsProjectId")
                        .HasColumnType("bigint")
                        .HasColumnName("lfs_project_id");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Path")
                        .HasColumnType("text")
                        .HasColumnName("path");

                    b.Property<int?>("Size")
                        .HasColumnType("integer")
                        .HasColumnName("size");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_project_git_files");

                    b.HasIndex("LfsProjectId")
                        .HasDatabaseName("ix_project_git_files_lfs_project_id");

                    b.HasIndex("Path", "Name", "LfsProjectId")
                        .IsUnique()
                        .HasDatabaseName("ix_project_git_files_path_name_lfs_project_id");

                    b.ToTable("project_git_files");
                });

            modelBuilder.Entity("ThriveDevCenter.Server.Models.StorageFile", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:HiLoSequenceName", "EntityFrameworkHiLoSequence")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SequenceHiLo);

                    b.Property<bool>("AllowParentless")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("allow_parentless");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<int?>("Size")
                        .HasColumnType("integer")
                        .HasColumnName("size");

                    b.Property<string>("StoragePath")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("storage_path");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.Property<DateTime?>("UploadExpires")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("upload_expires");

                    b.Property<bool>("Uploading")
                        .HasColumnType("boolean")
                        .HasColumnName("uploading");

                    b.HasKey("Id")
                        .HasName("pk_storage_files");

                    b.HasIndex("StoragePath")
                        .IsUnique()
                        .HasDatabaseName("ix_storage_files_storage_path");

                    b.HasIndex("Uploading")
                        .HasDatabaseName("ix_storage_files_uploading");

                    b.ToTable("storage_files");
                });

            modelBuilder.Entity("ThriveDevCenter.Server.Models.StorageItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:HiLoSequenceName", "EntityFrameworkHiLoSequence")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SequenceHiLo);

                    b.Property<bool>("AllowParentless")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("allow_parentless");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<int?>("Ftype")
                        .HasColumnType("integer")
                        .HasColumnName("ftype");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<long?>("OwnerId")
                        .HasColumnType("bigint")
                        .HasColumnName("owner_id");

                    b.Property<long?>("ParentId")
                        .HasColumnType("bigint")
                        .HasColumnName("parent_id");

                    b.Property<int?>("ReadAccess")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(2)
                        .HasColumnName("read_access");

                    b.Property<int?>("Size")
                        .HasColumnType("integer")
                        .HasColumnName("size");

                    b.Property<bool>("Special")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("special");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.Property<int?>("WriteAccess")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(2)
                        .HasColumnName("write_access");

                    b.HasKey("Id")
                        .HasName("pk_storage_items");

                    b.HasIndex("AllowParentless")
                        .HasDatabaseName("ix_storage_items_allow_parentless");

                    b.HasIndex("OwnerId")
                        .HasDatabaseName("ix_storage_items_owner_id");

                    b.HasIndex("ParentId")
                        .HasDatabaseName("ix_storage_items_parent_id");

                    b.HasIndex("Name", "ParentId")
                        .IsUnique()
                        .HasDatabaseName("ix_storage_items_name_parent_id");

                    b.HasIndex(new[] { "Name" }, "index_storage_items_on_name")
                        .IsUnique()
                        .HasDatabaseName("ix_storage_items_name")
                        .HasFilter("(parent_id IS NULL)");

                    b.ToTable("storage_items");
                });

            modelBuilder.Entity("ThriveDevCenter.Server.Models.StorageItemVersion", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:HiLoSequenceName", "EntityFrameworkHiLoSequence")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SequenceHiLo);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<bool>("Keep")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("keep");

                    b.Property<bool>("Protected")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("protected");

                    b.Property<long>("StorageFileId")
                        .HasColumnType("bigint")
                        .HasColumnName("storage_file_id");

                    b.Property<long>("StorageItemId")
                        .HasColumnType("bigint")
                        .HasColumnName("storage_item_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.Property<bool>("Uploading")
                        .HasColumnType("boolean")
                        .HasColumnName("uploading");

                    b.Property<int>("Version")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1)
                        .HasColumnName("version");

                    b.HasKey("Id")
                        .HasName("pk_storage_item_versions");

                    b.HasIndex("StorageFileId")
                        .HasDatabaseName("ix_storage_item_versions_storage_file_id");

                    b.HasIndex("StorageItemId", "Version")
                        .IsUnique()
                        .HasDatabaseName("ix_storage_item_versions_storage_item_id_version");

                    b.ToTable("storage_item_versions");
                });

            modelBuilder.Entity("ThriveDevCenter.Server.Models.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool?>("Admin")
                        .HasColumnType("boolean")
                        .HasColumnName("admin");

                    b.Property<string>("ApiToken")
                        .HasColumnType("text")
                        .HasColumnName("api_token");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<bool?>("Developer")
                        .HasColumnType("boolean")
                        .HasColumnName("developer");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<DateTime?>("LauncherCodeExpires")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("launcher_code_expires");

                    b.Property<string>("LauncherLinkCode")
                        .HasColumnType("text")
                        .HasColumnName("launcher_link_code");

                    b.Property<string>("LfsToken")
                        .HasColumnType("text")
                        .HasColumnName("lfs_token");

                    b.Property<bool>("Local")
                        .HasColumnType("boolean")
                        .HasColumnName("local");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("PasswordDigest")
                        .HasColumnType("text")
                        .HasColumnName("password_digest");

                    b.Property<int>("SessionVersion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1)
                        .HasColumnName("session_version");

                    b.Property<string>("SsoSource")
                        .HasColumnType("text")
                        .HasColumnName("sso_source");

                    b.Property<bool?>("Suspended")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("suspended");

                    b.Property<bool?>("SuspendedManually")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("suspended_manually");

                    b.Property<string>("SuspendedReason")
                        .HasColumnType("text")
                        .HasColumnName("suspended_reason");

                    b.Property<int>("TotalLauncherLinks")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("total_launcher_links");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("ApiToken")
                        .IsUnique()
                        .HasDatabaseName("ix_users_api_token");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("ix_users_email");

                    b.HasIndex("LauncherLinkCode")
                        .IsUnique()
                        .HasDatabaseName("ix_users_launcher_link_code");

                    b.HasIndex("LfsToken")
                        .IsUnique()
                        .HasDatabaseName("ix_users_lfs_token");

                    b.ToTable("users");
                });

            modelBuilder.Entity("DehydratedObjectDevBuild", b =>
                {
                    b.HasOne("ThriveDevCenter.Server.Models.DehydratedObject", null)
                        .WithMany()
                        .HasForeignKey("DehydratedObjectsId")
                        .HasConstraintName("fk_dehydrated_objects_dev_builds_dehydrated_objects_dehydrated")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ThriveDevCenter.Server.Models.DevBuild", null)
                        .WithMany()
                        .HasForeignKey("DevBuildsId")
                        .HasConstraintName("fk_dehydrated_objects_dev_builds_dev_builds_dev_builds_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ThriveDevCenter.Server.Models.DehydratedObject", b =>
                {
                    b.HasOne("ThriveDevCenter.Server.Models.StorageItem", "StorageItem")
                        .WithMany("DehydratedObjects")
                        .HasForeignKey("StorageItemId")
                        .HasConstraintName("fk_dehydrated_objects_storage_items_storage_item_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("StorageItem");
                });

            modelBuilder.Entity("ThriveDevCenter.Server.Models.DevBuild", b =>
                {
                    b.HasOne("ThriveDevCenter.Server.Models.StorageItem", "StorageItem")
                        .WithMany("DevBuilds")
                        .HasForeignKey("StorageItemId")
                        .HasConstraintName("fk_dev_builds_storage_items_storage_item_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ThriveDevCenter.Server.Models.User", "VerifiedBy")
                        .WithMany("DevBuilds")
                        .HasForeignKey("VerifiedById")
                        .HasConstraintName("fk_dev_builds_users_verified_by_id")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("StorageItem");

                    b.Navigation("VerifiedBy");
                });

            modelBuilder.Entity("ThriveDevCenter.Server.Models.LauncherLink", b =>
                {
                    b.HasOne("ThriveDevCenter.Server.Models.User", "User")
                        .WithMany("LauncherLinks")
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_launcher_links_users_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ThriveDevCenter.Server.Models.LfsObject", b =>
                {
                    b.HasOne("ThriveDevCenter.Server.Models.LfsProject", "LfsProject")
                        .WithMany("LfsObjects")
                        .HasForeignKey("LfsProjectId")
                        .HasConstraintName("fk_lfs_objects_lfs_projects_lfs_project_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LfsProject");
                });

            modelBuilder.Entity("ThriveDevCenter.Server.Models.ProjectGitFile", b =>
                {
                    b.HasOne("ThriveDevCenter.Server.Models.LfsProject", "LfsProject")
                        .WithMany("ProjectGitFiles")
                        .HasForeignKey("LfsProjectId")
                        .HasConstraintName("fk_project_git_files_lfs_projects_lfs_project_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LfsProject");
                });

            modelBuilder.Entity("ThriveDevCenter.Server.Models.StorageItem", b =>
                {
                    b.HasOne("ThriveDevCenter.Server.Models.User", "Owner")
                        .WithMany("StorageItems")
                        .HasForeignKey("OwnerId")
                        .HasConstraintName("fk_storage_items_users_owner_id")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ThriveDevCenter.Server.Models.StorageItem", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .HasConstraintName("fk_storage_items_storage_items_parent_id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Owner");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("ThriveDevCenter.Server.Models.StorageItemVersion", b =>
                {
                    b.HasOne("ThriveDevCenter.Server.Models.StorageFile", "StorageFile")
                        .WithMany("StorageItemVersions")
                        .HasForeignKey("StorageFileId")
                        .HasConstraintName("fk_storage_item_versions_storage_files_storage_file_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ThriveDevCenter.Server.Models.StorageItem", "StorageItem")
                        .WithMany("StorageItemVersions")
                        .HasForeignKey("StorageItemId")
                        .HasConstraintName("fk_storage_item_versions_storage_items_storage_item_id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("StorageFile");

                    b.Navigation("StorageItem");
                });

            modelBuilder.Entity("ThriveDevCenter.Server.Models.LfsProject", b =>
                {
                    b.Navigation("LfsObjects");

                    b.Navigation("ProjectGitFiles");
                });

            modelBuilder.Entity("ThriveDevCenter.Server.Models.StorageFile", b =>
                {
                    b.Navigation("StorageItemVersions");
                });

            modelBuilder.Entity("ThriveDevCenter.Server.Models.StorageItem", b =>
                {
                    b.Navigation("Children");

                    b.Navigation("DehydratedObjects");

                    b.Navigation("DevBuilds");

                    b.Navigation("StorageItemVersions");
                });

            modelBuilder.Entity("ThriveDevCenter.Server.Models.User", b =>
                {
                    b.Navigation("DevBuilds");

                    b.Navigation("LauncherLinks");

                    b.Navigation("StorageItems");
                });
#pragma warning restore 612, 618
        }
    }
}
